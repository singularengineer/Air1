
Air1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000453c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004650  08004650  00014650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d8  080046d8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080046d8  080046d8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046d8  080046d8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d8  080046d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046dc  080046dc  000146dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080046e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000080  08004760  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08004760  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bce2  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb1  00000000  00000000  0002bd8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  0002d940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  0002e5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018082  00000000  00000000  0002f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e96b  00000000  00000000  00047252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b219  00000000  00000000  00055bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0dd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a90  00000000  00000000  000e0e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08004634 	.word	0x08004634

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08004634 	.word	0x08004634

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_frsub>:
 8000a68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a6c:	e002      	b.n	8000a74 <__addsf3>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_fsub>:
 8000a70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a74 <__addsf3>:
 8000a74:	0042      	lsls	r2, r0, #1
 8000a76:	bf1f      	itttt	ne
 8000a78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a7c:	ea92 0f03 	teqne	r2, r3
 8000a80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a88:	d06a      	beq.n	8000b60 <__addsf3+0xec>
 8000a8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a92:	bfc1      	itttt	gt
 8000a94:	18d2      	addgt	r2, r2, r3
 8000a96:	4041      	eorgt	r1, r0
 8000a98:	4048      	eorgt	r0, r1
 8000a9a:	4041      	eorgt	r1, r0
 8000a9c:	bfb8      	it	lt
 8000a9e:	425b      	neglt	r3, r3
 8000aa0:	2b19      	cmp	r3, #25
 8000aa2:	bf88      	it	hi
 8000aa4:	4770      	bxhi	lr
 8000aa6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ab2:	bf18      	it	ne
 8000ab4:	4240      	negne	r0, r0
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000abe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ac2:	bf18      	it	ne
 8000ac4:	4249      	negne	r1, r1
 8000ac6:	ea92 0f03 	teq	r2, r3
 8000aca:	d03f      	beq.n	8000b4c <__addsf3+0xd8>
 8000acc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ad0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad4:	eb10 000c 	adds.w	r0, r0, ip
 8000ad8:	f1c3 0320 	rsb	r3, r3, #32
 8000adc:	fa01 f103 	lsl.w	r1, r1, r3
 8000ae0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae4:	d502      	bpl.n	8000aec <__addsf3+0x78>
 8000ae6:	4249      	negs	r1, r1
 8000ae8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000af0:	d313      	bcc.n	8000b1a <__addsf3+0xa6>
 8000af2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000af6:	d306      	bcc.n	8000b06 <__addsf3+0x92>
 8000af8:	0840      	lsrs	r0, r0, #1
 8000afa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000afe:	f102 0201 	add.w	r2, r2, #1
 8000b02:	2afe      	cmp	r2, #254	; 0xfe
 8000b04:	d251      	bcs.n	8000baa <__addsf3+0x136>
 8000b06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b0e:	bf08      	it	eq
 8000b10:	f020 0001 	biceq.w	r0, r0, #1
 8000b14:	ea40 0003 	orr.w	r0, r0, r3
 8000b18:	4770      	bx	lr
 8000b1a:	0049      	lsls	r1, r1, #1
 8000b1c:	eb40 0000 	adc.w	r0, r0, r0
 8000b20:	3a01      	subs	r2, #1
 8000b22:	bf28      	it	cs
 8000b24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b28:	d2ed      	bcs.n	8000b06 <__addsf3+0x92>
 8000b2a:	fab0 fc80 	clz	ip, r0
 8000b2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b32:	ebb2 020c 	subs.w	r2, r2, ip
 8000b36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b3a:	bfaa      	itet	ge
 8000b3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b40:	4252      	neglt	r2, r2
 8000b42:	4318      	orrge	r0, r3
 8000b44:	bfbc      	itt	lt
 8000b46:	40d0      	lsrlt	r0, r2
 8000b48:	4318      	orrlt	r0, r3
 8000b4a:	4770      	bx	lr
 8000b4c:	f092 0f00 	teq	r2, #0
 8000b50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b54:	bf06      	itte	eq
 8000b56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b5a:	3201      	addeq	r2, #1
 8000b5c:	3b01      	subne	r3, #1
 8000b5e:	e7b5      	b.n	8000acc <__addsf3+0x58>
 8000b60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b68:	bf18      	it	ne
 8000b6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6e:	d021      	beq.n	8000bb4 <__addsf3+0x140>
 8000b70:	ea92 0f03 	teq	r2, r3
 8000b74:	d004      	beq.n	8000b80 <__addsf3+0x10c>
 8000b76:	f092 0f00 	teq	r2, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	4608      	moveq	r0, r1
 8000b7e:	4770      	bx	lr
 8000b80:	ea90 0f01 	teq	r0, r1
 8000b84:	bf1c      	itt	ne
 8000b86:	2000      	movne	r0, #0
 8000b88:	4770      	bxne	lr
 8000b8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b8e:	d104      	bne.n	8000b9a <__addsf3+0x126>
 8000b90:	0040      	lsls	r0, r0, #1
 8000b92:	bf28      	it	cs
 8000b94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b98:	4770      	bx	lr
 8000b9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b9e:	bf3c      	itt	cc
 8000ba0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bxcc	lr
 8000ba6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000baa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb2:	4770      	bx	lr
 8000bb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bb8:	bf16      	itet	ne
 8000bba:	4608      	movne	r0, r1
 8000bbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bc0:	4601      	movne	r1, r0
 8000bc2:	0242      	lsls	r2, r0, #9
 8000bc4:	bf06      	itte	eq
 8000bc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bca:	ea90 0f01 	teqeq	r0, r1
 8000bce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bd2:	4770      	bx	lr

08000bd4 <__aeabi_ui2f>:
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	e004      	b.n	8000be4 <__aeabi_i2f+0x8>
 8000bda:	bf00      	nop

08000bdc <__aeabi_i2f>:
 8000bdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	bf48      	it	mi
 8000be2:	4240      	negmi	r0, r0
 8000be4:	ea5f 0c00 	movs.w	ip, r0
 8000be8:	bf08      	it	eq
 8000bea:	4770      	bxeq	lr
 8000bec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bf0:	4601      	mov	r1, r0
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	e01c      	b.n	8000c32 <__aeabi_l2f+0x2a>

08000bf8 <__aeabi_ul2f>:
 8000bf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bfc:	bf08      	it	eq
 8000bfe:	4770      	bxeq	lr
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e00a      	b.n	8000c1c <__aeabi_l2f+0x14>
 8000c06:	bf00      	nop

08000c08 <__aeabi_l2f>:
 8000c08:	ea50 0201 	orrs.w	r2, r0, r1
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__aeabi_l2f+0x14>
 8000c16:	4240      	negs	r0, r0
 8000c18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c1c:	ea5f 0c01 	movs.w	ip, r1
 8000c20:	bf02      	ittt	eq
 8000c22:	4684      	moveq	ip, r0
 8000c24:	4601      	moveq	r1, r0
 8000c26:	2000      	moveq	r0, #0
 8000c28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c2c:	bf08      	it	eq
 8000c2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c36:	fabc f28c 	clz	r2, ip
 8000c3a:	3a08      	subs	r2, #8
 8000c3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c40:	db10      	blt.n	8000c64 <__aeabi_l2f+0x5c>
 8000c42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c46:	4463      	add	r3, ip
 8000c48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c4c:	f1c2 0220 	rsb	r2, r2, #32
 8000c50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c54:	fa20 f202 	lsr.w	r2, r0, r2
 8000c58:	eb43 0002 	adc.w	r0, r3, r2
 8000c5c:	bf08      	it	eq
 8000c5e:	f020 0001 	biceq.w	r0, r0, #1
 8000c62:	4770      	bx	lr
 8000c64:	f102 0220 	add.w	r2, r2, #32
 8000c68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c74:	fa21 f202 	lsr.w	r2, r1, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_fmul>:
 8000c84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c92:	ea92 0f0c 	teqne	r2, ip
 8000c96:	ea93 0f0c 	teqne	r3, ip
 8000c9a:	d06f      	beq.n	8000d7c <__aeabi_fmul+0xf8>
 8000c9c:	441a      	add	r2, r3
 8000c9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000ca2:	0240      	lsls	r0, r0, #9
 8000ca4:	bf18      	it	ne
 8000ca6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000caa:	d01e      	beq.n	8000cea <__aeabi_fmul+0x66>
 8000cac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cb0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cb4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cb8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cc4:	bf3e      	ittt	cc
 8000cc6:	0049      	lslcc	r1, r1, #1
 8000cc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ccc:	005b      	lslcc	r3, r3, #1
 8000cce:	ea40 0001 	orr.w	r0, r0, r1
 8000cd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cd6:	2afd      	cmp	r2, #253	; 0xfd
 8000cd8:	d81d      	bhi.n	8000d16 <__aeabi_fmul+0x92>
 8000cda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce2:	bf08      	it	eq
 8000ce4:	f020 0001 	biceq.w	r0, r0, #1
 8000ce8:	4770      	bx	lr
 8000cea:	f090 0f00 	teq	r0, #0
 8000cee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cf2:	bf08      	it	eq
 8000cf4:	0249      	lsleq	r1, r1, #9
 8000cf6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cfe:	3a7f      	subs	r2, #127	; 0x7f
 8000d00:	bfc2      	ittt	gt
 8000d02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d0a:	4770      	bxgt	lr
 8000d0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	3a01      	subs	r2, #1
 8000d16:	dc5d      	bgt.n	8000dd4 <__aeabi_fmul+0x150>
 8000d18:	f112 0f19 	cmn.w	r2, #25
 8000d1c:	bfdc      	itt	le
 8000d1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d22:	4770      	bxle	lr
 8000d24:	f1c2 0200 	rsb	r2, r2, #0
 8000d28:	0041      	lsls	r1, r0, #1
 8000d2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d2e:	f1c2 0220 	rsb	r2, r2, #32
 8000d32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d3a:	f140 0000 	adc.w	r0, r0, #0
 8000d3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d42:	bf08      	it	eq
 8000d44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d48:	4770      	bx	lr
 8000d4a:	f092 0f00 	teq	r2, #0
 8000d4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d52:	bf02      	ittt	eq
 8000d54:	0040      	lsleq	r0, r0, #1
 8000d56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d5a:	3a01      	subeq	r2, #1
 8000d5c:	d0f9      	beq.n	8000d52 <__aeabi_fmul+0xce>
 8000d5e:	ea40 000c 	orr.w	r0, r0, ip
 8000d62:	f093 0f00 	teq	r3, #0
 8000d66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0049      	lsleq	r1, r1, #1
 8000d6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d72:	3b01      	subeq	r3, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fmul+0xe6>
 8000d76:	ea41 010c 	orr.w	r1, r1, ip
 8000d7a:	e78f      	b.n	8000c9c <__aeabi_fmul+0x18>
 8000d7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d80:	ea92 0f0c 	teq	r2, ip
 8000d84:	bf18      	it	ne
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d00a      	beq.n	8000da2 <__aeabi_fmul+0x11e>
 8000d8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d90:	bf18      	it	ne
 8000d92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d96:	d1d8      	bne.n	8000d4a <__aeabi_fmul+0xc6>
 8000d98:	ea80 0001 	eor.w	r0, r0, r1
 8000d9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000da0:	4770      	bx	lr
 8000da2:	f090 0f00 	teq	r0, #0
 8000da6:	bf17      	itett	ne
 8000da8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dac:	4608      	moveq	r0, r1
 8000dae:	f091 0f00 	teqne	r1, #0
 8000db2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000db6:	d014      	beq.n	8000de2 <__aeabi_fmul+0x15e>
 8000db8:	ea92 0f0c 	teq	r2, ip
 8000dbc:	d101      	bne.n	8000dc2 <__aeabi_fmul+0x13e>
 8000dbe:	0242      	lsls	r2, r0, #9
 8000dc0:	d10f      	bne.n	8000de2 <__aeabi_fmul+0x15e>
 8000dc2:	ea93 0f0c 	teq	r3, ip
 8000dc6:	d103      	bne.n	8000dd0 <__aeabi_fmul+0x14c>
 8000dc8:	024b      	lsls	r3, r1, #9
 8000dca:	bf18      	it	ne
 8000dcc:	4608      	movne	r0, r1
 8000dce:	d108      	bne.n	8000de2 <__aeabi_fmul+0x15e>
 8000dd0:	ea80 0001 	eor.w	r0, r0, r1
 8000dd4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ddc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de0:	4770      	bx	lr
 8000de2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dea:	4770      	bx	lr

08000dec <__aeabi_fdiv>:
 8000dec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000df0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df4:	bf1e      	ittt	ne
 8000df6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dfa:	ea92 0f0c 	teqne	r2, ip
 8000dfe:	ea93 0f0c 	teqne	r3, ip
 8000e02:	d069      	beq.n	8000ed8 <__aeabi_fdiv+0xec>
 8000e04:	eba2 0203 	sub.w	r2, r2, r3
 8000e08:	ea80 0c01 	eor.w	ip, r0, r1
 8000e0c:	0249      	lsls	r1, r1, #9
 8000e0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e12:	d037      	beq.n	8000e84 <__aeabi_fdiv+0x98>
 8000e14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e24:	428b      	cmp	r3, r1
 8000e26:	bf38      	it	cc
 8000e28:	005b      	lslcc	r3, r3, #1
 8000e2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e32:	428b      	cmp	r3, r1
 8000e34:	bf24      	itt	cs
 8000e36:	1a5b      	subcs	r3, r3, r1
 8000e38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e40:	bf24      	itt	cs
 8000e42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e4e:	bf24      	itt	cs
 8000e50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e5c:	bf24      	itt	cs
 8000e5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	bf18      	it	ne
 8000e6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e6e:	d1e0      	bne.n	8000e32 <__aeabi_fdiv+0x46>
 8000e70:	2afd      	cmp	r2, #253	; 0xfd
 8000e72:	f63f af50 	bhi.w	8000d16 <__aeabi_fmul+0x92>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8c:	327f      	adds	r2, #127	; 0x7f
 8000e8e:	bfc2      	ittt	gt
 8000e90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e98:	4770      	bxgt	lr
 8000e9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9e:	f04f 0300 	mov.w	r3, #0
 8000ea2:	3a01      	subs	r2, #1
 8000ea4:	e737      	b.n	8000d16 <__aeabi_fmul+0x92>
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0040      	lsleq	r0, r0, #1
 8000eb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb6:	3a01      	subeq	r2, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fdiv+0xc2>
 8000eba:	ea40 000c 	orr.w	r0, r0, ip
 8000ebe:	f093 0f00 	teq	r3, #0
 8000ec2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0049      	lsleq	r1, r1, #1
 8000eca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ece:	3b01      	subeq	r3, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fdiv+0xda>
 8000ed2:	ea41 010c 	orr.w	r1, r1, ip
 8000ed6:	e795      	b.n	8000e04 <__aeabi_fdiv+0x18>
 8000ed8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000edc:	ea92 0f0c 	teq	r2, ip
 8000ee0:	d108      	bne.n	8000ef4 <__aeabi_fdiv+0x108>
 8000ee2:	0242      	lsls	r2, r0, #9
 8000ee4:	f47f af7d 	bne.w	8000de2 <__aeabi_fmul+0x15e>
 8000ee8:	ea93 0f0c 	teq	r3, ip
 8000eec:	f47f af70 	bne.w	8000dd0 <__aeabi_fmul+0x14c>
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	e776      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000ef4:	ea93 0f0c 	teq	r3, ip
 8000ef8:	d104      	bne.n	8000f04 <__aeabi_fdiv+0x118>
 8000efa:	024b      	lsls	r3, r1, #9
 8000efc:	f43f af4c 	beq.w	8000d98 <__aeabi_fmul+0x114>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e76e      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000f04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f08:	bf18      	it	ne
 8000f0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f0e:	d1ca      	bne.n	8000ea6 <__aeabi_fdiv+0xba>
 8000f10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f14:	f47f af5c 	bne.w	8000dd0 <__aeabi_fmul+0x14c>
 8000f18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f1c:	f47f af3c 	bne.w	8000d98 <__aeabi_fmul+0x114>
 8000f20:	e75f      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000f22:	bf00      	nop

08000f24 <__aeabi_f2uiz>:
 8000f24:	0042      	lsls	r2, r0, #1
 8000f26:	d20e      	bcs.n	8000f46 <__aeabi_f2uiz+0x22>
 8000f28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f2c:	d30b      	bcc.n	8000f46 <__aeabi_f2uiz+0x22>
 8000f2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f36:	d409      	bmi.n	8000f4c <__aeabi_f2uiz+0x28>
 8000f38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f40:	fa23 f002 	lsr.w	r0, r3, r2
 8000f44:	4770      	bx	lr
 8000f46:	f04f 0000 	mov.w	r0, #0
 8000f4a:	4770      	bx	lr
 8000f4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f50:	d101      	bne.n	8000f56 <__aeabi_f2uiz+0x32>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	d102      	bne.n	8000f5c <__aeabi_f2uiz+0x38>
 8000f56:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5a:	4770      	bx	lr
 8000f5c:	f04f 0000 	mov.w	r0, #0
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <Air1APP>:
uint32_t IncFactor = 1;
char lcd_buff[16];
char *lcd_ptr;

void Air1APP()
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_HB_GPIO_Port, LED_HB_Pin);
 8000f68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f6c:	480a      	ldr	r0, [pc, #40]	; (8000f98 <Air1APP+0x34>)
 8000f6e:	f001 f974 	bl	800225a <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8000f72:	20c8      	movs	r0, #200	; 0xc8
 8000f74:	f000 feb6 	bl	8001ce4 <HAL_Delay>
	if(HAL_GPIO_ReadPin(ENC_SW_GPIO_Port, ENC_SW_Pin) ==  GPIO_PIN_RESET)
 8000f78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7c:	4807      	ldr	r0, [pc, #28]	; (8000f9c <Air1APP+0x38>)
 8000f7e:	f001 f93d 	bl	80021fc <HAL_GPIO_ReadPin>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <Air1APP+0x2a>
		UpdateCursor();
 8000f88:	f000 f80a 	bl	8000fa0 <UpdateCursor>
	else
		UpdateFreqency();

}
 8000f8c:	e001      	b.n	8000f92 <Air1APP+0x2e>
		UpdateFreqency();
 8000f8e:	f000 f84b 	bl	8001028 <UpdateFreqency>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40011000 	.word	0x40011000
 8000f9c:	40010800 	.word	0x40010800

08000fa0 <UpdateCursor>:

void UpdateCursor()
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
	LCD_Command(0x0E);
 8000fa6:	200e      	movs	r0, #14
 8000fa8:	f000 f8ca 	bl	8001140 <LCD_Command>
	int8_t cursor_update =  Encoder_Diff();
 8000fac:	f000 f8a4 	bl	80010f8 <Encoder_Diff>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	71fb      	strb	r3, [r7, #7]
	int8_t cursor_temp = cursor_current + cursor_update;
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <UpdateCursor+0x7c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	71bb      	strb	r3, [r7, #6]
	if((cursor_temp >= 0 ) && (cursor_temp < 7))
 8000fc2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db24      	blt.n	8001014 <UpdateCursor+0x74>
 8000fca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	dc20      	bgt.n	8001014 <UpdateCursor+0x74>
	{
		LCD_MoveCursor(0,cursor_temp);
 8000fd2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f000 f94f 	bl	800127c <LCD_MoveCursor>
		cursor_current = cursor_temp;
 8000fde:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <UpdateCursor+0x7c>)
 8000fe4:	6013      	str	r3, [r2, #0]
		IncFactor = pow(10,6 - cursor_current);
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <UpdateCursor+0x7c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f1c3 0306 	rsb	r3, r3, #6
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fa00 	bl	80003f4 <__aeabi_i2d>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	f04f 0000 	mov.w	r0, #0
 8000ffc:	4908      	ldr	r1, [pc, #32]	; (8001020 <UpdateCursor+0x80>)
 8000ffe:	f002 fc37 	bl	8003870 <pow>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	f7ff fd0d 	bl	8000a28 <__aeabi_d2uiz>
 800100e:	4603      	mov	r3, r0
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <UpdateCursor+0x84>)
 8001012:	6013      	str	r3, [r2, #0]
	}
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200000a0 	.word	0x200000a0
 8001020:	40240000 	.word	0x40240000
 8001024:	2000000c 	.word	0x2000000c

08001028 <UpdateFreqency>:

void UpdateFreqency()
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	//uint8_t len = 0;
	int16_t freq_diff = Encoder_Diff();
 800102e:	f000 f863 	bl	80010f8 <Encoder_Diff>
 8001032:	4603      	mov	r3, r0
 8001034:	807b      	strh	r3, [r7, #2]
	uint32_t freq_temp = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]

	if(freq_diff == 0)
 800103a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d047      	beq.n	80010d2 <UpdateFreqency+0xaa>
		return;

	if(freq_diff > 0)
 8001042:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001046:	2b00      	cmp	r3, #0
 8001048:	dd05      	ble.n	8001056 <UpdateFreqency+0x2e>
		freq_temp = freqency_current + IncFactor;
 800104a:	4b24      	ldr	r3, [pc, #144]	; (80010dc <UpdateFreqency+0xb4>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <UpdateFreqency+0xb8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	607b      	str	r3, [r7, #4]
	if(freq_diff < 0)
 8001056:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800105a:	2b00      	cmp	r3, #0
 800105c:	da05      	bge.n	800106a <UpdateFreqency+0x42>
		freq_temp = freqency_current - IncFactor;
 800105e:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <UpdateFreqency+0xb4>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <UpdateFreqency+0xb8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	607b      	str	r3, [r7, #4]

	if((freq_temp <= M40_MAX) && (freq_temp >= M40_MIN))
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <UpdateFreqency+0xbc>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	d82f      	bhi.n	80010d4 <UpdateFreqency+0xac>
 8001074:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <UpdateFreqency+0xc0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	429a      	cmp	r2, r3
 800107c:	d32a      	bcc.n	80010d4 <UpdateFreqency+0xac>
	{
		LCD_MoveCursor(0,0);
 800107e:	2100      	movs	r1, #0
 8001080:	2000      	movs	r0, #0
 8001082:	f000 f8fb 	bl	800127c <LCD_MoveCursor>
		lcd_ptr = itoa(freq_temp,(char *)lcd_buff,10);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	220a      	movs	r2, #10
 800108a:	4918      	ldr	r1, [pc, #96]	; (80010ec <UpdateFreqency+0xc4>)
 800108c:	4618      	mov	r0, r3
 800108e:	f002 fba3 	bl	80037d8 <itoa>
 8001092:	4603      	mov	r3, r0
 8001094:	4a16      	ldr	r2, [pc, #88]	; (80010f0 <UpdateFreqency+0xc8>)
 8001096:	6013      	str	r3, [r2, #0]
		SI5351_SetFrequency(CLK0, freq_temp);
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	2000      	movs	r0, #0
 800109c:	f000 fa5a 	bl	8001554 <SI5351_SetFrequency>

		while(*lcd_ptr)
 80010a0:	e008      	b.n	80010b4 <UpdateFreqency+0x8c>
			LCD_Data(*lcd_ptr++);
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <UpdateFreqency+0xc8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	4911      	ldr	r1, [pc, #68]	; (80010f0 <UpdateFreqency+0xc8>)
 80010aa:	600a      	str	r2, [r1, #0]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f876 	bl	80011a0 <LCD_Data>
		while(*lcd_ptr)
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <UpdateFreqency+0xc8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f1      	bne.n	80010a2 <UpdateFreqency+0x7a>
		LCD_MoveCursor(0,cursor_current);
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <UpdateFreqency+0xcc>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4619      	mov	r1, r3
 80010c4:	2000      	movs	r0, #0
 80010c6:	f000 f8d9 	bl	800127c <LCD_MoveCursor>
		freqency_current = freq_temp;
 80010ca:	4a04      	ldr	r2, [pc, #16]	; (80010dc <UpdateFreqency+0xb4>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	e000      	b.n	80010d4 <UpdateFreqency+0xac>
		return;
 80010d2:	bf00      	nop
	}
}
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000008 	.word	0x20000008
 80010e0:	2000000c 	.word	0x2000000c
 80010e4:	20000004 	.word	0x20000004
 80010e8:	20000000 	.word	0x20000000
 80010ec:	200000a4 	.word	0x200000a4
 80010f0:	200000b4 	.word	0x200000b4
 80010f4:	200000a0 	.word	0x200000a0

080010f8 <Encoder_Diff>:

int16_t Encoder_Diff()
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
	int16_t diff = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	80fb      	strh	r3, [r7, #6]
	uint32_t encoder_new = TIM1->CNT>>2; // Divide by 2 as a filter
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <Encoder_Diff+0x40>)
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	603b      	str	r3, [r7, #0]

	if(encoder != encoder_new)
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <Encoder_Diff+0x44>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d00a      	beq.n	800112a <Encoder_Diff+0x32>
	{
		diff = encoder_new - encoder;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	b29a      	uxth	r2, r3
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <Encoder_Diff+0x44>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	b29b      	uxth	r3, r3
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	b29b      	uxth	r3, r3
 8001122:	80fb      	strh	r3, [r7, #6]
		encoder = encoder_new;
 8001124:	4a05      	ldr	r2, [pc, #20]	; (800113c <Encoder_Diff+0x44>)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	6013      	str	r3, [r2, #0]
	}
	return diff;
 800112a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	40012c00 	.word	0x40012c00
 800113c:	2000009c 	.word	0x2000009c

08001140 <LCD_Command>:
#include "LCD_I2C.h"

I2C_HandleTypeDef *_i2c;

void LCD_Command(char cmd)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af02      	add	r7, sp, #8
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
	char i2cBuff[4];
	char data_H, data_L;
	data_H = cmd & 0xF0;
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	f023 030f 	bic.w	r3, r3, #15
 8001150:	73fb      	strb	r3, [r7, #15]
	data_L = (cmd & 0x0F) << 4;
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	73bb      	strb	r3, [r7, #14]

	i2cBuff[0] = data_H | En; //load new command byte with En high
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	f043 030c 	orr.w	r3, r3, #12
 800115e:	b2db      	uxtb	r3, r3
 8001160:	723b      	strb	r3, [r7, #8]
	i2cBuff[1] = data_H | LCD_BACKLIGHT; //update command while keeping backlight on
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	b2db      	uxtb	r3, r3
 800116a:	727b      	strb	r3, [r7, #9]
	i2cBuff[2] = data_L | En; //load new command byte with En high
 800116c:	7bbb      	ldrb	r3, [r7, #14]
 800116e:	f043 030c 	orr.w	r3, r3, #12
 8001172:	b2db      	uxtb	r3, r3
 8001174:	72bb      	strb	r3, [r7, #10]
	i2cBuff[3] = data_L | LCD_BACKLIGHT; //update command while keeping backlight on
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	f043 0308 	orr.w	r3, r3, #8
 800117c:	b2db      	uxtb	r3, r3
 800117e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit (_i2c, LCD_ADDRESS,(uint8_t *) i2cBuff, 4, 100);
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <LCD_Command+0x5c>)
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	f107 0208 	add.w	r2, r7, #8
 8001188:	2364      	movs	r3, #100	; 0x64
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2304      	movs	r3, #4
 800118e:	214e      	movs	r1, #78	; 0x4e
 8001190:	f001 f9c0 	bl	8002514 <HAL_I2C_Master_Transmit>
}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200000b8 	.word	0x200000b8

080011a0 <LCD_Data>:

void LCD_Data(char data)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]

	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	f023 030f 	bic.w	r3, r3, #15
 80011b0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	f043 030d 	orr.w	r3, r3, #13
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	f043 0309 	orr.w	r3, r3, #9
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80011cc:	7bbb      	ldrb	r3, [r7, #14]
 80011ce:	f043 030d 	orr.w	r3, r3, #13
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80011d6:	7bbb      	ldrb	r3, [r7, #14]
 80011d8:	f043 0309 	orr.w	r3, r3, #9
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (_i2c, LCD_ADDRESS,(uint8_t *) data_t, 4, 100);
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <LCD_Data+0x5c>)
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	f107 0208 	add.w	r2, r7, #8
 80011e8:	2364      	movs	r3, #100	; 0x64
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2304      	movs	r3, #4
 80011ee:	214e      	movs	r1, #78	; 0x4e
 80011f0:	f001 f990 	bl	8002514 <HAL_I2C_Master_Transmit>
}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200000b8 	.word	0x200000b8

08001200 <LCD_Init>:

void LCD_Init(I2C_HandleTypeDef *i2c)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	_i2c = i2c;
 8001208:	4a1b      	ldr	r2, [pc, #108]	; (8001278 <LCD_Init+0x78>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
	LCD_Command (0x30);
 800120e:	2030      	movs	r0, #48	; 0x30
 8001210:	f7ff ff96 	bl	8001140 <LCD_Command>
	HAL_Delay(50);
 8001214:	2032      	movs	r0, #50	; 0x32
 8001216:	f000 fd65 	bl	8001ce4 <HAL_Delay>
	LCD_Command (0x30);
 800121a:	2030      	movs	r0, #48	; 0x30
 800121c:	f7ff ff90 	bl	8001140 <LCD_Command>
	HAL_Delay(5);
 8001220:	2005      	movs	r0, #5
 8001222:	f000 fd5f 	bl	8001ce4 <HAL_Delay>
	LCD_Command (0x20);
 8001226:	2020      	movs	r0, #32
 8001228:	f7ff ff8a 	bl	8001140 <LCD_Command>
	HAL_Delay(10);
 800122c:	200a      	movs	r0, #10
 800122e:	f000 fd59 	bl	8001ce4 <HAL_Delay>

  	LCD_Command (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001232:	2028      	movs	r0, #40	; 0x28
 8001234:	f7ff ff84 	bl	8001140 <LCD_Command>
	HAL_Delay(2);
 8001238:	2002      	movs	r0, #2
 800123a:	f000 fd53 	bl	8001ce4 <HAL_Delay>
	LCD_Command (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800123e:	2008      	movs	r0, #8
 8001240:	f7ff ff7e 	bl	8001140 <LCD_Command>
	HAL_Delay(2);
 8001244:	2002      	movs	r0, #2
 8001246:	f000 fd4d 	bl	8001ce4 <HAL_Delay>
	LCD_Command (0x01);  // clear display
 800124a:	2001      	movs	r0, #1
 800124c:	f7ff ff78 	bl	8001140 <LCD_Command>
	HAL_Delay(2);
 8001250:	2002      	movs	r0, #2
 8001252:	f000 fd47 	bl	8001ce4 <HAL_Delay>
	LCD_Command (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001256:	2006      	movs	r0, #6
 8001258:	f7ff ff72 	bl	8001140 <LCD_Command>
	HAL_Delay(2);
 800125c:	2002      	movs	r0, #2
 800125e:	f000 fd41 	bl	8001ce4 <HAL_Delay>
	LCD_Command (0x0E); //Display on/off control --> D = 1, C =1 and B = 0. (Cursor and blink, last two bits)
 8001262:	200e      	movs	r0, #14
 8001264:	f7ff ff6c 	bl	8001140 <LCD_Command>
	HAL_Delay(2);
 8001268:	2002      	movs	r0, #2
 800126a:	f000 fd3b 	bl	8001ce4 <HAL_Delay>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200000b8 	.word	0x200000b8

0800127c <LCD_MoveCursor>:

void LCD_MoveCursor(int row, int col)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
	//sanity check for 16x2 display
	if(row > 1)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b01      	cmp	r3, #1
 800128a:	dd01      	ble.n	8001290 <LCD_MoveCursor+0x14>
		row = 1;
 800128c:	2301      	movs	r3, #1
 800128e:	607b      	str	r3, [r7, #4]
	if(col > 15)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	2b0f      	cmp	r3, #15
 8001294:	dd01      	ble.n	800129a <LCD_MoveCursor+0x1e>
		col = 15;
 8001296:	230f      	movs	r3, #15
 8001298:	603b      	str	r3, [r7, #0]

	switch(row)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <LCD_MoveCursor+0x2c>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d005      	beq.n	80012b2 <LCD_MoveCursor+0x36>
 80012a6:	e009      	b.n	80012bc <LCD_MoveCursor+0x40>
	{
		case 0:
			col |= 0x80;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ae:	603b      	str	r3, [r7, #0]
			break;
 80012b0:	e004      	b.n	80012bc <LCD_MoveCursor+0x40>
		case 1:
			col |= 0xC0;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80012b8:	603b      	str	r3, [r7, #0]
			break;
 80012ba:	bf00      	nop
	}
	LCD_Command(col);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff3d 	bl	8001140 <LCD_Command>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <SI5351_Init>:
#include "SI5351.h"

I2C_HandleTypeDef* i2c_si5351;

void SI5351_Init(I2C_HandleTypeDef *i2c)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	i2c_si5351 = i2c;
 80012d8:	4a03      	ldr	r2, [pc, #12]	; (80012e8 <SI5351_Init+0x18>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	200000bc 	.word	0x200000bc

080012ec <SI5351_WriteRegister>:

uint8_t SI5351_WriteRegister(uint8_t reg, uint8_t data)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	4603      	mov	r3, r0
 80012f4:	460a      	mov	r2, r1
 80012f6:	71fb      	strb	r3, [r7, #7]
 80012f8:	4613      	mov	r3, r2
 80012fa:	71bb      	strb	r3, [r7, #6]
	uint8_t txbuff[2];
	txbuff[0] = reg;
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	733b      	strb	r3, [r7, #12]
	txbuff[1] = data;
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit (i2c_si5351, SI5351_ADDR,(uint8_t *) txbuff, 2, 100);
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <SI5351_WriteRegister+0x38>)
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	f107 020c 	add.w	r2, r7, #12
 800130c:	2364      	movs	r3, #100	; 0x64
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2302      	movs	r3, #2
 8001312:	21c0      	movs	r1, #192	; 0xc0
 8001314:	f001 f8fe 	bl	8002514 <HAL_I2C_Master_Transmit>
	return 0;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200000bc 	.word	0x200000bc

08001328 <SetPLL>:
 * num is 0..1,048,575 (0xFFFFF)
 * denom is 0..1,048,575 (0xFFFFF)
 *
*/
void SetPLL(uint8_t pll, uint8_t mult, uint32_t num, uint32_t denom)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b089      	sub	sp, #36	; 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60ba      	str	r2, [r7, #8]
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	4603      	mov	r3, r0
 8001334:	73fb      	strb	r3, [r7, #15]
 8001336:	460b      	mov	r3, r1
 8001338:	73bb      	strb	r3, [r7, #14]
	uint32_t P1;					// PLL config register P1
	uint32_t P2;					// PLL config register P2
	uint32_t P3;					// PLL config register P3

	P1 = (uint32_t)(128 * ((float)num / (float)denom));
 800133a:	68b8      	ldr	r0, [r7, #8]
 800133c:	f7ff fc4a 	bl	8000bd4 <__aeabi_ui2f>
 8001340:	4604      	mov	r4, r0
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fc46 	bl	8000bd4 <__aeabi_ui2f>
 8001348:	4603      	mov	r3, r0
 800134a:	4619      	mov	r1, r3
 800134c:	4620      	mov	r0, r4
 800134e:	f7ff fd4d 	bl	8000dec <__aeabi_fdiv>
 8001352:	4603      	mov	r3, r0
 8001354:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fc93 	bl	8000c84 <__aeabi_fmul>
 800135e:	4603      	mov	r3, r0
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fddf 	bl	8000f24 <__aeabi_f2uiz>
 8001366:	4603      	mov	r3, r0
 8001368:	61fb      	str	r3, [r7, #28]
	P1 = (uint32_t)(128 * (uint32_t)(mult) + P1 - 512);
 800136a:	7bbb      	ldrb	r3, [r7, #14]
 800136c:	01da      	lsls	r2, r3, #7
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	4413      	add	r3, r2
 8001372:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001376:	61fb      	str	r3, [r7, #28]
	P2 = (uint32_t)(128 * ((float)num / (float)denom));
 8001378:	68b8      	ldr	r0, [r7, #8]
 800137a:	f7ff fc2b 	bl	8000bd4 <__aeabi_ui2f>
 800137e:	4604      	mov	r4, r0
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff fc27 	bl	8000bd4 <__aeabi_ui2f>
 8001386:	4603      	mov	r3, r0
 8001388:	4619      	mov	r1, r3
 800138a:	4620      	mov	r0, r4
 800138c:	f7ff fd2e 	bl	8000dec <__aeabi_fdiv>
 8001390:	4603      	mov	r3, r0
 8001392:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fc74 	bl	8000c84 <__aeabi_fmul>
 800139c:	4603      	mov	r3, r0
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fdc0 	bl	8000f24 <__aeabi_f2uiz>
 80013a4:	4603      	mov	r3, r0
 80013a6:	61bb      	str	r3, [r7, #24]
	P2 = (uint32_t)(128 * num - denom * P2);
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	01da      	lsls	r2, r3, #7
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69b9      	ldr	r1, [r7, #24]
 80013b0:	fb01 f303 	mul.w	r3, r1, r3
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	61bb      	str	r3, [r7, #24]
	P3 = denom;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	617b      	str	r3, [r7, #20]

	SI5351_WriteRegister(pll + 0, (P3 & 0x0000FF00) >> 8);
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	0a1b      	lsrs	r3, r3, #8
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff90 	bl	80012ec <SI5351_WriteRegister>
	SI5351_WriteRegister(pll + 1, (P3 & 0x000000FF));
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	3301      	adds	r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff87 	bl	80012ec <SI5351_WriteRegister>
	SI5351_WriteRegister(pll + 2, (P1 & 0x00030000) >> 16);
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	3302      	adds	r3, #2
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	0c1b      	lsrs	r3, r3, #16
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	4619      	mov	r1, r3
 80013f2:	4610      	mov	r0, r2
 80013f4:	f7ff ff7a 	bl	80012ec <SI5351_WriteRegister>
	SI5351_WriteRegister(pll + 3, (P1 & 0x0000FF00) >> 8);
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	3303      	adds	r3, #3
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	b2db      	uxtb	r3, r3
 8001404:	4619      	mov	r1, r3
 8001406:	4610      	mov	r0, r2
 8001408:	f7ff ff70 	bl	80012ec <SI5351_WriteRegister>
	SI5351_WriteRegister(pll + 4, (P1 & 0x000000FF));
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	3304      	adds	r3, #4
 8001410:	b2db      	uxtb	r3, r3
 8001412:	69fa      	ldr	r2, [r7, #28]
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff67 	bl	80012ec <SI5351_WriteRegister>
	SI5351_WriteRegister(pll + 5, ((P3 & 0x000F0000) >> 12) | ((P2 & 0x000F0000) >> 16));
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	3305      	adds	r3, #5
 8001422:	b2d8      	uxtb	r0, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	0b1b      	lsrs	r3, r3, #12
 8001428:	b2db      	uxtb	r3, r3
 800142a:	f023 030f 	bic.w	r3, r3, #15
 800142e:	b2da      	uxtb	r2, r3
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	0c1b      	lsrs	r3, r3, #16
 8001434:	b2db      	uxtb	r3, r3
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	b2db      	uxtb	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b2db      	uxtb	r3, r3
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff ff53 	bl	80012ec <SI5351_WriteRegister>
	SI5351_WriteRegister(pll + 6, (P2 & 0x0000FF00) >> 8);
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	3306      	adds	r3, #6
 800144a:	b2da      	uxtb	r2, r3
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	b2db      	uxtb	r3, r3
 8001452:	4619      	mov	r1, r3
 8001454:	4610      	mov	r0, r2
 8001456:	f7ff ff49 	bl	80012ec <SI5351_WriteRegister>
	SI5351_WriteRegister(pll + 7, (P2 & 0x000000FF));
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	3307      	adds	r3, #7
 800145e:	b2db      	uxtb	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	4611      	mov	r1, r2
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff40 	bl	80012ec <SI5351_WriteRegister>
}
 800146c:	bf00      	nop
 800146e:	3724      	adds	r7, #36	; 0x24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd90      	pop	{r4, r7, pc}

08001474 <SetMultiSynth>:
/*
 * Set up MultiSynth with integer divider and R divider
 * R divider is the bit value which is OR'ed onto the appropriate register, it is a #define in si5351a.h
 */
void SetMultiSynth(uint8_t synth, uint32_t divider, uint8_t rDiv)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
 8001480:	4613      	mov	r3, r2
 8001482:	71bb      	strb	r3, [r7, #6]
	uint32_t P1;					// Synth config register P1
	uint32_t P2;					// Synth config register P2
	uint32_t P3;					// Synth config register P3

	P1 = 128 * divider - 512;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800148a:	3b04      	subs	r3, #4
 800148c:	01db      	lsls	r3, r3, #7
 800148e:	617b      	str	r3, [r7, #20]
	P2 = 0;							// P2 = 0, P3 = 1 forces an integer value for the divider
 8001490:	2300      	movs	r3, #0
 8001492:	613b      	str	r3, [r7, #16]
	P3 = 1;
 8001494:	2301      	movs	r3, #1
 8001496:	60fb      	str	r3, [r7, #12]

	SI5351_WriteRegister(synth + 0,   (P3 & 0x0000FF00) >> 8);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	0a1b      	lsrs	r3, r3, #8
 800149c:	b2da      	uxtb	r2, r3
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	4611      	mov	r1, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff22 	bl	80012ec <SI5351_WriteRegister>
	SI5351_WriteRegister(synth + 1,   (P3 & 0x000000FF));
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	3301      	adds	r3, #1
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff19 	bl	80012ec <SI5351_WriteRegister>
	SI5351_WriteRegister(synth + 2,   ((P1 & 0x00030000) >> 16) | rDiv);
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	3302      	adds	r3, #2
 80014be:	b2d8      	uxtb	r0, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	0c1b      	lsrs	r3, r3, #16
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	79bb      	ldrb	r3, [r7, #6]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff ff0a 	bl	80012ec <SI5351_WriteRegister>
	SI5351_WriteRegister(synth + 3,   (P1 & 0x0000FF00) >> 8);
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	3303      	adds	r3, #3
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	4619      	mov	r1, r3
 80014e6:	4610      	mov	r0, r2
 80014e8:	f7ff ff00 	bl	80012ec <SI5351_WriteRegister>
	SI5351_WriteRegister(synth + 4,   (P1 & 0x000000FF));
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	3304      	adds	r3, #4
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fef7 	bl	80012ec <SI5351_WriteRegister>
	SI5351_WriteRegister(synth + 5,   ((P3 & 0x000F0000) >> 12) | ((P2 & 0x000F0000) >> 16));
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	3305      	adds	r3, #5
 8001502:	b2d8      	uxtb	r0, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	0b1b      	lsrs	r3, r3, #12
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f023 030f 	bic.w	r3, r3, #15
 800150e:	b2da      	uxtb	r2, r3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	0c1b      	lsrs	r3, r3, #16
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	b2db      	uxtb	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b2db      	uxtb	r3, r3
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fee3 	bl	80012ec <SI5351_WriteRegister>
	SI5351_WriteRegister(synth + 6,   (P2 & 0x0000FF00) >> 8);
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	3306      	adds	r3, #6
 800152a:	b2da      	uxtb	r2, r3
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	0a1b      	lsrs	r3, r3, #8
 8001530:	b2db      	uxtb	r3, r3
 8001532:	4619      	mov	r1, r3
 8001534:	4610      	mov	r0, r2
 8001536:	f7ff fed9 	bl	80012ec <SI5351_WriteRegister>
	SI5351_WriteRegister(synth + 7,   (P2 & 0x000000FF));
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	3307      	adds	r3, #7
 800153e:	b2db      	uxtb	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	4611      	mov	r1, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fed0 	bl	80012ec <SI5351_WriteRegister>
}
 800154c:	bf00      	nop
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <SI5351_SetFrequency>:
 * Set CLK0 output ON and to the specified frequency by the encoder
 * Frequency is in the range 1MHz to 150MHz
 */

void SI5351_SetFrequency(eSi5351_ClockOut Channel, uint32_t frequency)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	71fb      	strb	r3, [r7, #7]
	static uint8_t firstrun = 0;

	uint32_t pllFreq;
	uint32_t xtalFreq = XTAL_FREQ;
 8001560:	4b40      	ldr	r3, [pc, #256]	; (8001664 <SI5351_SetFrequency+0x110>)
 8001562:	623b      	str	r3, [r7, #32]
	uint8_t mult;
	uint32_t num;
	uint32_t denom;
	uint32_t divider;

	if(firstrun == 0)
 8001564:	4b40      	ldr	r3, [pc, #256]	; (8001668 <SI5351_SetFrequency+0x114>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d141      	bne.n	80015f0 <SI5351_SetFrequency+0x9c>
	{


		divider = 900000000 / frequency;// Calculate the division ratio. 900,000,000 is the maximum internal
 800156c:	4a3f      	ldr	r2, [pc, #252]	; (800166c <SI5351_SetFrequency+0x118>)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	fbb2 f3f3 	udiv	r3, r2, r3
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
										// PLL frequency: 900MHz
		if (divider % 2) divider--;		// Ensure an even integer division ratio
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <SI5351_SetFrequency+0x32>
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	3b01      	subs	r3, #1
 8001584:	627b      	str	r3, [r7, #36]	; 0x24

		pllFreq = divider * frequency;	// Calculate the pllFrequency: the divider * desired output frequency
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	fb02 f303 	mul.w	r3, r2, r3
 800158e:	61fb      	str	r3, [r7, #28]

		mult = pllFreq / xtalFreq;		// Determine the multiplier to get to the required pllFrequency
 8001590:	69fa      	ldr	r2, [r7, #28]
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	fbb2 f3f3 	udiv	r3, r2, r3
 8001598:	76fb      	strb	r3, [r7, #27]
		l = pllFreq % xtalFreq;			// It has three parts:
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	6a3a      	ldr	r2, [r7, #32]
 800159e:	fbb3 f2f2 	udiv	r2, r3, r2
 80015a2:	6a39      	ldr	r1, [r7, #32]
 80015a4:	fb01 f202 	mul.w	r2, r1, r2
 80015a8:	1a9b      	subs	r3, r3, r2
 80015aa:	617b      	str	r3, [r7, #20]
		f = l;							// mult is an integer that must be in the range 15..90
 80015ac:	6978      	ldr	r0, [r7, #20]
 80015ae:	f7ff fb11 	bl	8000bd4 <__aeabi_ui2f>
 80015b2:	4603      	mov	r3, r0
 80015b4:	613b      	str	r3, [r7, #16]
		f *= 1048575;					// num and denom are the fractional parts, the numerator and denominator
 80015b6:	492e      	ldr	r1, [pc, #184]	; (8001670 <SI5351_SetFrequency+0x11c>)
 80015b8:	6938      	ldr	r0, [r7, #16]
 80015ba:	f7ff fb63 	bl	8000c84 <__aeabi_fmul>
 80015be:	4603      	mov	r3, r0
 80015c0:	613b      	str	r3, [r7, #16]
		f /= xtalFreq;					// each is 20 bits (range 0..1048575)
 80015c2:	6a38      	ldr	r0, [r7, #32]
 80015c4:	f7ff fb06 	bl	8000bd4 <__aeabi_ui2f>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4619      	mov	r1, r3
 80015cc:	6938      	ldr	r0, [r7, #16]
 80015ce:	f7ff fc0d 	bl	8000dec <__aeabi_fdiv>
 80015d2:	4603      	mov	r3, r0
 80015d4:	613b      	str	r3, [r7, #16]
		num = f;						// the actual multiplier is  mult + num / denom
 80015d6:	6938      	ldr	r0, [r7, #16]
 80015d8:	f7ff fca4 	bl	8000f24 <__aeabi_f2uiz>
 80015dc:	4603      	mov	r3, r0
 80015de:	60fb      	str	r3, [r7, #12]
		denom = 1048575;				// For simplicity we set the denominator to the maximum 1048575
 80015e0:	4b24      	ldr	r3, [pc, #144]	; (8001674 <SI5351_SetFrequency+0x120>)
 80015e2:	60bb      	str	r3, [r7, #8]

										// Set up PLL A with the calculated multiplication ratio
		SetPLL(SI_SYNTH_PLL_A, mult, num, denom);
 80015e4:	7ef9      	ldrb	r1, [r7, #27]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	201a      	movs	r0, #26
 80015ec:	f7ff fe9c 	bl	8001328 <SetPLL>
										// The final R division stage can divide by a power of two, from 1..128.
										// reprented by constants SI_R_DIV1 to SI_R_DIV128 (see si5351a.h header file)
										// If you want to output frequencies below 1MHz, you have to use the
										// final R division stage
	}
	switch(Channel)
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d022      	beq.n	800163c <SI5351_SetFrequency+0xe8>
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	dc2e      	bgt.n	8001658 <SI5351_SetFrequency+0x104>
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <SI5351_SetFrequency+0xb0>
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d00e      	beq.n	8001620 <SI5351_SetFrequency+0xcc>
											// Finally switch on the CLK0 output (0x4F)
											// and set the MultiSynth0 input to be PLL A
			SI5351_WriteRegister(SI_CLK2_CONTROL, 0x4F | SI_CLK_SRC_PLL_A);
			break;
		default:
			break;
 8001602:	e029      	b.n	8001658 <SI5351_SetFrequency+0x104>
			SetMultiSynth(SI_SYNTH_MS_0, divider, SI_R_DIV_1);
 8001604:	2200      	movs	r2, #0
 8001606:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001608:	202a      	movs	r0, #42	; 0x2a
 800160a:	f7ff ff33 	bl	8001474 <SetMultiSynth>
			SI5351_WriteRegister(SI_PLL_RESET, 0xA0);
 800160e:	21a0      	movs	r1, #160	; 0xa0
 8001610:	20b1      	movs	r0, #177	; 0xb1
 8001612:	f7ff fe6b 	bl	80012ec <SI5351_WriteRegister>
			SI5351_WriteRegister(SI_CLK0_CONTROL, 0x4F | SI_CLK_SRC_PLL_A);
 8001616:	214f      	movs	r1, #79	; 0x4f
 8001618:	2010      	movs	r0, #16
 800161a:	f7ff fe67 	bl	80012ec <SI5351_WriteRegister>
			break;
 800161e:	e01c      	b.n	800165a <SI5351_SetFrequency+0x106>
			SetMultiSynth(SI_SYNTH_MS_1, divider, SI_R_DIV_1);
 8001620:	2200      	movs	r2, #0
 8001622:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001624:	2032      	movs	r0, #50	; 0x32
 8001626:	f7ff ff25 	bl	8001474 <SetMultiSynth>
			SI5351_WriteRegister(SI_PLL_RESET, 0xA0);
 800162a:	21a0      	movs	r1, #160	; 0xa0
 800162c:	20b1      	movs	r0, #177	; 0xb1
 800162e:	f7ff fe5d 	bl	80012ec <SI5351_WriteRegister>
			SI5351_WriteRegister(SI_CLK1_CONTROL, 0x4F | SI_CLK_SRC_PLL_A);
 8001632:	214f      	movs	r1, #79	; 0x4f
 8001634:	2011      	movs	r0, #17
 8001636:	f7ff fe59 	bl	80012ec <SI5351_WriteRegister>
			break;
 800163a:	e00e      	b.n	800165a <SI5351_SetFrequency+0x106>
			SetMultiSynth(SI_SYNTH_MS_2, divider, SI_R_DIV_1);
 800163c:	2200      	movs	r2, #0
 800163e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001640:	203a      	movs	r0, #58	; 0x3a
 8001642:	f7ff ff17 	bl	8001474 <SetMultiSynth>
			SI5351_WriteRegister(SI_PLL_RESET, 0xA0);
 8001646:	21a0      	movs	r1, #160	; 0xa0
 8001648:	20b1      	movs	r0, #177	; 0xb1
 800164a:	f7ff fe4f 	bl	80012ec <SI5351_WriteRegister>
			SI5351_WriteRegister(SI_CLK2_CONTROL, 0x4F | SI_CLK_SRC_PLL_A);
 800164e:	214f      	movs	r1, #79	; 0x4f
 8001650:	2012      	movs	r0, #18
 8001652:	f7ff fe4b 	bl	80012ec <SI5351_WriteRegister>
			break;
 8001656:	e000      	b.n	800165a <SI5351_SetFrequency+0x106>
			break;
 8001658:	bf00      	nop
//	SI5351_WriteRegister(SI_PLL_RESET, 0xA0);
//									// Finally switch on the CLK0 output (0x4F)
//									// and set the MultiSynth0 input to be PLL A
//	SI5351_WriteRegister(SI_CLK0_CONTROL, 0x4F | SI_CLK_SRC_PLL_A);

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	017d7840 	.word	0x017d7840
 8001668:	200000c0 	.word	0x200000c0
 800166c:	35a4e900 	.word	0x35a4e900
 8001670:	497ffff0 	.word	0x497ffff0
 8001674:	000fffff 	.word	0x000fffff

08001678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800167e:	f000 facf 	bl	8001c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001682:	f000 f835 	bl	80016f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001686:	f000 f92d 	bl	80018e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800168a:	f000 f877 	bl	800177c <MX_I2C1_Init>
  MX_TIM1_Init();
 800168e:	f000 f8d1 	bl	8001834 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001692:	f000 f8a1 	bl	80017d8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8001696:	213c      	movs	r1, #60	; 0x3c
 8001698:	4810      	ldr	r0, [pc, #64]	; (80016dc <main+0x64>)
 800169a:	f001 fee9 	bl	8003470 <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  LCD_Init(&hi2c1);
 800169e:	4810      	ldr	r0, [pc, #64]	; (80016e0 <main+0x68>)
 80016a0:	f7ff fdae 	bl	8001200 <LCD_Init>
  SI5351_Init(&hi2c2);
 80016a4:	480f      	ldr	r0, [pc, #60]	; (80016e4 <main+0x6c>)
 80016a6:	f7ff fe13 	bl	80012d0 <SI5351_Init>

  char *str = "CW";
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <main+0x70>)
 80016ac:	607b      	str	r3, [r7, #4]
  LCD_MoveCursor(0,14);
 80016ae:	210e      	movs	r1, #14
 80016b0:	2000      	movs	r0, #0
 80016b2:	f7ff fde3 	bl	800127c <LCD_MoveCursor>
  while(*str)
 80016b6:	e006      	b.n	80016c6 <main+0x4e>
	  LCD_Data(*str++);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fd6d 	bl	80011a0 <LCD_Data>
  while(*str)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f4      	bne.n	80016b8 <main+0x40>

  SI5351_SetFrequency(CLK0, 7150000);
 80016ce:	4907      	ldr	r1, [pc, #28]	; (80016ec <main+0x74>)
 80016d0:	2000      	movs	r0, #0
 80016d2:	f7ff ff3f 	bl	8001554 <SI5351_SetFrequency>

  while (1)
  {
	  Air1APP();
 80016d6:	f7ff fc45 	bl	8000f64 <Air1APP>
 80016da:	e7fc      	b.n	80016d6 <main+0x5e>
 80016dc:	2000016c 	.word	0x2000016c
 80016e0:	200000c4 	.word	0x200000c4
 80016e4:	20000118 	.word	0x20000118
 80016e8:	08004650 	.word	0x08004650
 80016ec:	006d19b0 	.word	0x006d19b0

080016f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b090      	sub	sp, #64	; 0x40
 80016f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f6:	f107 0318 	add.w	r3, r7, #24
 80016fa:	2228      	movs	r2, #40	; 0x28
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f002 f86c 	bl	80037dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001712:	2301      	movs	r3, #1
 8001714:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800171a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001720:	2301      	movs	r3, #1
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001724:	2302      	movs	r3, #2
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800172c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800172e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001732:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001734:	f107 0318 	add.w	r3, r7, #24
 8001738:	4618      	mov	r0, r3
 800173a:	f001 f9f1 	bl	8002b20 <HAL_RCC_OscConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001744:	f000 f934 	bl	80019b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001748:	230f      	movs	r3, #15
 800174a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800174c:	2302      	movs	r3, #2
 800174e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2102      	movs	r1, #2
 8001762:	4618      	mov	r0, r3
 8001764:	f001 fc5e 	bl	8003024 <HAL_RCC_ClockConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800176e:	f000 f91f 	bl	80019b0 <Error_Handler>
  }
}
 8001772:	bf00      	nop
 8001774:	3740      	adds	r7, #64	; 0x40
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <MX_I2C1_Init+0x50>)
 8001782:	4a13      	ldr	r2, [pc, #76]	; (80017d0 <MX_I2C1_Init+0x54>)
 8001784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_I2C1_Init+0x50>)
 8001788:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <MX_I2C1_Init+0x58>)
 800178a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <MX_I2C1_Init+0x50>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_I2C1_Init+0x50>)
 8001794:	2200      	movs	r2, #0
 8001796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_I2C1_Init+0x50>)
 800179a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800179e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a0:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <MX_I2C1_Init+0x50>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_I2C1_Init+0x50>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <MX_I2C1_Init+0x50>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_I2C1_Init+0x50>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <MX_I2C1_Init+0x50>)
 80017ba:	f000 fd67 	bl	800228c <HAL_I2C_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017c4:	f000 f8f4 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200000c4 	.word	0x200000c4
 80017d0:	40005400 	.word	0x40005400
 80017d4:	000186a0 	.word	0x000186a0

080017d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <MX_I2C2_Init+0x50>)
 80017de:	4a13      	ldr	r2, [pc, #76]	; (800182c <MX_I2C2_Init+0x54>)
 80017e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_I2C2_Init+0x50>)
 80017e4:	4a12      	ldr	r2, [pc, #72]	; (8001830 <MX_I2C2_Init+0x58>)
 80017e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_I2C2_Init+0x50>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_I2C2_Init+0x50>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_I2C2_Init+0x50>)
 80017f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017fc:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <MX_I2C2_Init+0x50>)
 80017fe:	2200      	movs	r2, #0
 8001800:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_I2C2_Init+0x50>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <MX_I2C2_Init+0x50>)
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_I2C2_Init+0x50>)
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001814:	4804      	ldr	r0, [pc, #16]	; (8001828 <MX_I2C2_Init+0x50>)
 8001816:	f000 fd39 	bl	800228c <HAL_I2C_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001820:	f000 f8c6 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000118 	.word	0x20000118
 800182c:	40005800 	.word	0x40005800
 8001830:	000186a0 	.word	0x000186a0

08001834 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08c      	sub	sp, #48	; 0x30
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	2224      	movs	r2, #36	; 0x24
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f001 ffca 	bl	80037dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001850:	4b22      	ldr	r3, [pc, #136]	; (80018dc <MX_TIM1_Init+0xa8>)
 8001852:	4a23      	ldr	r2, [pc, #140]	; (80018e0 <MX_TIM1_Init+0xac>)
 8001854:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001856:	4b21      	ldr	r3, [pc, #132]	; (80018dc <MX_TIM1_Init+0xa8>)
 8001858:	2200      	movs	r2, #0
 800185a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185c:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <MX_TIM1_Init+0xa8>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <MX_TIM1_Init+0xa8>)
 8001864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001868:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <MX_TIM1_Init+0xa8>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001870:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <MX_TIM1_Init+0xa8>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <MX_TIM1_Init+0xa8>)
 8001878:	2280      	movs	r2, #128	; 0x80
 800187a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800187c:	2303      	movs	r3, #3
 800187e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001880:	2300      	movs	r3, #0
 8001882:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001884:	2301      	movs	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001888:	2300      	movs	r3, #0
 800188a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 800188c:	2308      	movs	r3, #8
 800188e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001894:	2301      	movs	r3, #1
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001898:	2300      	movs	r3, #0
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 800189c:	2308      	movs	r3, #8
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	4619      	mov	r1, r3
 80018a6:	480d      	ldr	r0, [pc, #52]	; (80018dc <MX_TIM1_Init+0xa8>)
 80018a8:	f001 fd40 	bl	800332c <HAL_TIM_Encoder_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80018b2:	f000 f87d 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	4619      	mov	r1, r3
 80018c2:	4806      	ldr	r0, [pc, #24]	; (80018dc <MX_TIM1_Init+0xa8>)
 80018c4:	f001 fee8 	bl	8003698 <HAL_TIMEx_MasterConfigSynchronization>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80018ce:	f000 f86f 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	3730      	adds	r7, #48	; 0x30
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	2000016c 	.word	0x2000016c
 80018e0:	40012c00 	.word	0x40012c00

080018e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f8:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <MX_GPIO_Init+0xc0>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	4a29      	ldr	r2, [pc, #164]	; (80019a4 <MX_GPIO_Init+0xc0>)
 80018fe:	f043 0310 	orr.w	r3, r3, #16
 8001902:	6193      	str	r3, [r2, #24]
 8001904:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <MX_GPIO_Init+0xc0>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001910:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <MX_GPIO_Init+0xc0>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	4a23      	ldr	r2, [pc, #140]	; (80019a4 <MX_GPIO_Init+0xc0>)
 8001916:	f043 0320 	orr.w	r3, r3, #32
 800191a:	6193      	str	r3, [r2, #24]
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <MX_GPIO_Init+0xc0>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f003 0320 	and.w	r3, r3, #32
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <MX_GPIO_Init+0xc0>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <MX_GPIO_Init+0xc0>)
 800192e:	f043 0308 	orr.w	r3, r3, #8
 8001932:	6193      	str	r3, [r2, #24]
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <MX_GPIO_Init+0xc0>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001940:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <MX_GPIO_Init+0xc0>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	4a17      	ldr	r2, [pc, #92]	; (80019a4 <MX_GPIO_Init+0xc0>)
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	6193      	str	r3, [r2, #24]
 800194c:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <MX_GPIO_Init+0xc0>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	603b      	str	r3, [r7, #0]
 8001956:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_HB_GPIO_Port, LED_HB_Pin, GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800195e:	4812      	ldr	r0, [pc, #72]	; (80019a8 <MX_GPIO_Init+0xc4>)
 8001960:	f000 fc63 	bl	800222a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_HB_Pin */
  GPIO_InitStruct.Pin = LED_HB_Pin;
 8001964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001968:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196a:	2301      	movs	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2302      	movs	r3, #2
 8001974:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_HB_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 0310 	add.w	r3, r7, #16
 800197a:	4619      	mov	r1, r3
 800197c:	480a      	ldr	r0, [pc, #40]	; (80019a8 <MX_GPIO_Init+0xc4>)
 800197e:	f000 fab9 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_SW_Pin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 8001982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	4619      	mov	r1, r3
 8001996:	4805      	ldr	r0, [pc, #20]	; (80019ac <MX_GPIO_Init+0xc8>)
 8001998:	f000 faac 	bl	8001ef4 <HAL_GPIO_Init>

}
 800199c:	bf00      	nop
 800199e:	3720      	adds	r7, #32
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40011000 	.word	0x40011000
 80019ac:	40010800 	.word	0x40010800

080019b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b4:	b672      	cpsid	i
}
 80019b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <Error_Handler+0x8>
	...

080019bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_MspInit+0x5c>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <HAL_MspInit+0x5c>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6193      	str	r3, [r2, #24]
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_MspInit+0x5c>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_MspInit+0x5c>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	4a0e      	ldr	r2, [pc, #56]	; (8001a18 <HAL_MspInit+0x5c>)
 80019e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e4:	61d3      	str	r3, [r2, #28]
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_MspInit+0x5c>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_MspInit+0x60>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <HAL_MspInit+0x60>)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40010000 	.word	0x40010000

08001a20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0318 	add.w	r3, r7, #24
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a2b      	ldr	r2, [pc, #172]	; (8001ae8 <HAL_I2C_MspInit+0xc8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d124      	bne.n	8001a8a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <HAL_I2C_MspInit+0xcc>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a29      	ldr	r2, [pc, #164]	; (8001aec <HAL_I2C_MspInit+0xcc>)
 8001a46:	f043 0308 	orr.w	r3, r3, #8
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b27      	ldr	r3, [pc, #156]	; (8001aec <HAL_I2C_MspInit+0xcc>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a58:	23c0      	movs	r3, #192	; 0xc0
 8001a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a5c:	2312      	movs	r3, #18
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a60:	2303      	movs	r3, #3
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a64:	f107 0318 	add.w	r3, r7, #24
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4821      	ldr	r0, [pc, #132]	; (8001af0 <HAL_I2C_MspInit+0xd0>)
 8001a6c:	f000 fa42 	bl	8001ef4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a70:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <HAL_I2C_MspInit+0xcc>)
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <HAL_I2C_MspInit+0xcc>)
 8001a76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a7a:	61d3      	str	r3, [r2, #28]
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_I2C_MspInit+0xcc>)
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a88:	e029      	b.n	8001ade <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a19      	ldr	r2, [pc, #100]	; (8001af4 <HAL_I2C_MspInit+0xd4>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d124      	bne.n	8001ade <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_I2C_MspInit+0xcc>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a14      	ldr	r2, [pc, #80]	; (8001aec <HAL_I2C_MspInit+0xcc>)
 8001a9a:	f043 0308 	orr.w	r3, r3, #8
 8001a9e:	6193      	str	r3, [r2, #24]
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_I2C_MspInit+0xcc>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001aac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab2:	2312      	movs	r3, #18
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aba:	f107 0318 	add.w	r3, r7, #24
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480b      	ldr	r0, [pc, #44]	; (8001af0 <HAL_I2C_MspInit+0xd0>)
 8001ac2:	f000 fa17 	bl	8001ef4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_I2C_MspInit+0xcc>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4a08      	ldr	r2, [pc, #32]	; (8001aec <HAL_I2C_MspInit+0xcc>)
 8001acc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ad0:	61d3      	str	r3, [r2, #28]
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_I2C_MspInit+0xcc>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
}
 8001ade:	bf00      	nop
 8001ae0:	3728      	adds	r7, #40	; 0x28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40005400 	.word	0x40005400
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40010c00 	.word	0x40010c00
 8001af4:	40005800 	.word	0x40005800

08001af8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a16      	ldr	r2, [pc, #88]	; (8001b6c <HAL_TIM_Encoder_MspInit+0x74>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d124      	bne.n	8001b62 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b18:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <HAL_TIM_Encoder_MspInit+0x78>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a14      	ldr	r2, [pc, #80]	; (8001b70 <HAL_TIM_Encoder_MspInit+0x78>)
 8001b1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_TIM_Encoder_MspInit+0x78>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_TIM_Encoder_MspInit+0x78>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <HAL_TIM_Encoder_MspInit+0x78>)
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <HAL_TIM_Encoder_MspInit+0x78>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 0310 	add.w	r3, r7, #16
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4805      	ldr	r0, [pc, #20]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001b5e:	f000 f9c9 	bl	8001ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b62:	bf00      	nop
 8001b64:	3720      	adds	r7, #32
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40012c00 	.word	0x40012c00
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40010800 	.word	0x40010800

08001b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <NMI_Handler+0x4>

08001b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <HardFault_Handler+0x4>

08001b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <MemManage_Handler+0x4>

08001b8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8e:	e7fe      	b.n	8001b8e <BusFault_Handler+0x4>

08001b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <UsageFault_Handler+0x4>

08001b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bbe:	f000 f875 	bl	8001cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
	...

08001bd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd4:	480c      	ldr	r0, [pc, #48]	; (8001c08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bd6:	490d      	ldr	r1, [pc, #52]	; (8001c0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	; (8001c10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bdc:	e002      	b.n	8001be4 <LoopCopyDataInit>

08001bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be2:	3304      	adds	r3, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be8:	d3f9      	bcc.n	8001bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bec:	4c0a      	ldr	r4, [pc, #40]	; (8001c18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf0:	e001      	b.n	8001bf6 <LoopFillZerobss>

08001bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf4:	3204      	adds	r2, #4

08001bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf8:	d3fb      	bcc.n	8001bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bfa:	f7ff ffe4 	bl	8001bc6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bfe:	f001 fdaf 	bl	8003760 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c02:	f7ff fd39 	bl	8001678 <main>
  bx lr
 8001c06:	4770      	bx	lr
  ldr r0, =_sdata
 8001c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c0c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001c10:	080046e0 	.word	0x080046e0
  ldr r2, =_sbss
 8001c14:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001c18:	200001b8 	.word	0x200001b8

08001c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC1_2_IRQHandler>
	...

08001c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <HAL_Init+0x28>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a07      	ldr	r2, [pc, #28]	; (8001c48 <HAL_Init+0x28>)
 8001c2a:	f043 0310 	orr.w	r3, r3, #16
 8001c2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c30:	2003      	movs	r0, #3
 8001c32:	f000 f92b 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c36:	200f      	movs	r0, #15
 8001c38:	f000 f808 	bl	8001c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c3c:	f7ff febe 	bl	80019bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40022000 	.word	0x40022000

08001c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_InitTick+0x54>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_InitTick+0x58>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 f935 	bl	8001eda <HAL_SYSTICK_Config>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e00e      	b.n	8001c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b0f      	cmp	r3, #15
 8001c7e:	d80a      	bhi.n	8001c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c80:	2200      	movs	r2, #0
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	f000 f90b 	bl	8001ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c8c:	4a06      	ldr	r2, [pc, #24]	; (8001ca8 <HAL_InitTick+0x5c>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	e000      	b.n	8001c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000010 	.word	0x20000010
 8001ca4:	20000018 	.word	0x20000018
 8001ca8:	20000014 	.word	0x20000014

08001cac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_IncTick+0x1c>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_IncTick+0x20>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	4a03      	ldr	r2, [pc, #12]	; (8001ccc <HAL_IncTick+0x20>)
 8001cbe:	6013      	str	r3, [r2, #0]
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	20000018 	.word	0x20000018
 8001ccc:	200001b4 	.word	0x200001b4

08001cd0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd4:	4b02      	ldr	r3, [pc, #8]	; (8001ce0 <HAL_GetTick+0x10>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	200001b4 	.word	0x200001b4

08001ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff fff0 	bl	8001cd0 <HAL_GetTick>
 8001cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfc:	d005      	beq.n	8001d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_Delay+0x44>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d0a:	bf00      	nop
 8001d0c:	f7ff ffe0 	bl	8001cd0 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d8f7      	bhi.n	8001d0c <HAL_Delay+0x28>
  {
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000018 	.word	0x20000018

08001d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <__NVIC_GetPriorityGrouping+0x18>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	f003 0307 	and.w	r3, r3, #7
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db0a      	blt.n	8001dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	490c      	ldr	r1, [pc, #48]	; (8001ddc <__NVIC_SetPriority+0x4c>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	440b      	add	r3, r1
 8001db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db8:	e00a      	b.n	8001dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4908      	ldr	r1, [pc, #32]	; (8001de0 <__NVIC_SetPriority+0x50>)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	761a      	strb	r2, [r3, #24]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000e100 	.word	0xe000e100
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f1c3 0307 	rsb	r3, r3, #7
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	bf28      	it	cs
 8001e02:	2304      	movcs	r3, #4
 8001e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d902      	bls.n	8001e14 <NVIC_EncodePriority+0x30>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b03      	subs	r3, #3
 8001e12:	e000      	b.n	8001e16 <NVIC_EncodePriority+0x32>
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43d9      	mvns	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	4313      	orrs	r3, r2
         );
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	; 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff ff90 	bl	8001d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff49 	bl	8001d2c <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff5e 	bl	8001d74 <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff90 	bl	8001de4 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5f 	bl	8001d90 <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ffb0 	bl	8001e48 <SysTick_Config>
 8001ee8:	4603      	mov	r3, r0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b08b      	sub	sp, #44	; 0x2c
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001efe:	2300      	movs	r3, #0
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f06:	e169      	b.n	80021dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f08:	2201      	movs	r2, #1
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	f040 8158 	bne.w	80021d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4a9a      	ldr	r2, [pc, #616]	; (8002194 <HAL_GPIO_Init+0x2a0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d05e      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001f30:	4a98      	ldr	r2, [pc, #608]	; (8002194 <HAL_GPIO_Init+0x2a0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d875      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f36:	4a98      	ldr	r2, [pc, #608]	; (8002198 <HAL_GPIO_Init+0x2a4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d058      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001f3c:	4a96      	ldr	r2, [pc, #600]	; (8002198 <HAL_GPIO_Init+0x2a4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d86f      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f42:	4a96      	ldr	r2, [pc, #600]	; (800219c <HAL_GPIO_Init+0x2a8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d052      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001f48:	4a94      	ldr	r2, [pc, #592]	; (800219c <HAL_GPIO_Init+0x2a8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d869      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f4e:	4a94      	ldr	r2, [pc, #592]	; (80021a0 <HAL_GPIO_Init+0x2ac>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d04c      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001f54:	4a92      	ldr	r2, [pc, #584]	; (80021a0 <HAL_GPIO_Init+0x2ac>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d863      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f5a:	4a92      	ldr	r2, [pc, #584]	; (80021a4 <HAL_GPIO_Init+0x2b0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d046      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001f60:	4a90      	ldr	r2, [pc, #576]	; (80021a4 <HAL_GPIO_Init+0x2b0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d85d      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f66:	2b12      	cmp	r3, #18
 8001f68:	d82a      	bhi.n	8001fc0 <HAL_GPIO_Init+0xcc>
 8001f6a:	2b12      	cmp	r3, #18
 8001f6c:	d859      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f6e:	a201      	add	r2, pc, #4	; (adr r2, 8001f74 <HAL_GPIO_Init+0x80>)
 8001f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f74:	08001fef 	.word	0x08001fef
 8001f78:	08001fc9 	.word	0x08001fc9
 8001f7c:	08001fdb 	.word	0x08001fdb
 8001f80:	0800201d 	.word	0x0800201d
 8001f84:	08002023 	.word	0x08002023
 8001f88:	08002023 	.word	0x08002023
 8001f8c:	08002023 	.word	0x08002023
 8001f90:	08002023 	.word	0x08002023
 8001f94:	08002023 	.word	0x08002023
 8001f98:	08002023 	.word	0x08002023
 8001f9c:	08002023 	.word	0x08002023
 8001fa0:	08002023 	.word	0x08002023
 8001fa4:	08002023 	.word	0x08002023
 8001fa8:	08002023 	.word	0x08002023
 8001fac:	08002023 	.word	0x08002023
 8001fb0:	08002023 	.word	0x08002023
 8001fb4:	08002023 	.word	0x08002023
 8001fb8:	08001fd1 	.word	0x08001fd1
 8001fbc:	08001fe5 	.word	0x08001fe5
 8001fc0:	4a79      	ldr	r2, [pc, #484]	; (80021a8 <HAL_GPIO_Init+0x2b4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fc6:	e02c      	b.n	8002022 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	623b      	str	r3, [r7, #32]
          break;
 8001fce:	e029      	b.n	8002024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	623b      	str	r3, [r7, #32]
          break;
 8001fd8:	e024      	b.n	8002024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	3308      	adds	r3, #8
 8001fe0:	623b      	str	r3, [r7, #32]
          break;
 8001fe2:	e01f      	b.n	8002024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	330c      	adds	r3, #12
 8001fea:	623b      	str	r3, [r7, #32]
          break;
 8001fec:	e01a      	b.n	8002024 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d102      	bne.n	8001ffc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	623b      	str	r3, [r7, #32]
          break;
 8001ffa:	e013      	b.n	8002024 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d105      	bne.n	8002010 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002004:	2308      	movs	r3, #8
 8002006:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	611a      	str	r2, [r3, #16]
          break;
 800200e:	e009      	b.n	8002024 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002010:	2308      	movs	r3, #8
 8002012:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	615a      	str	r2, [r3, #20]
          break;
 800201a:	e003      	b.n	8002024 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800201c:	2300      	movs	r3, #0
 800201e:	623b      	str	r3, [r7, #32]
          break;
 8002020:	e000      	b.n	8002024 <HAL_GPIO_Init+0x130>
          break;
 8002022:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	2bff      	cmp	r3, #255	; 0xff
 8002028:	d801      	bhi.n	800202e <HAL_GPIO_Init+0x13a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	e001      	b.n	8002032 <HAL_GPIO_Init+0x13e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3304      	adds	r3, #4
 8002032:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2bff      	cmp	r3, #255	; 0xff
 8002038:	d802      	bhi.n	8002040 <HAL_GPIO_Init+0x14c>
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	e002      	b.n	8002046 <HAL_GPIO_Init+0x152>
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	3b08      	subs	r3, #8
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	210f      	movs	r1, #15
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	fa01 f303 	lsl.w	r3, r1, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	401a      	ands	r2, r3
 8002058:	6a39      	ldr	r1, [r7, #32]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	431a      	orrs	r2, r3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 80b1 	beq.w	80021d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002074:	4b4d      	ldr	r3, [pc, #308]	; (80021ac <HAL_GPIO_Init+0x2b8>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	4a4c      	ldr	r2, [pc, #304]	; (80021ac <HAL_GPIO_Init+0x2b8>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6193      	str	r3, [r2, #24]
 8002080:	4b4a      	ldr	r3, [pc, #296]	; (80021ac <HAL_GPIO_Init+0x2b8>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800208c:	4a48      	ldr	r2, [pc, #288]	; (80021b0 <HAL_GPIO_Init+0x2bc>)
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	089b      	lsrs	r3, r3, #2
 8002092:	3302      	adds	r3, #2
 8002094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002098:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	220f      	movs	r2, #15
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4013      	ands	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a40      	ldr	r2, [pc, #256]	; (80021b4 <HAL_GPIO_Init+0x2c0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d013      	beq.n	80020e0 <HAL_GPIO_Init+0x1ec>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a3f      	ldr	r2, [pc, #252]	; (80021b8 <HAL_GPIO_Init+0x2c4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d00d      	beq.n	80020dc <HAL_GPIO_Init+0x1e8>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a3e      	ldr	r2, [pc, #248]	; (80021bc <HAL_GPIO_Init+0x2c8>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d007      	beq.n	80020d8 <HAL_GPIO_Init+0x1e4>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3d      	ldr	r2, [pc, #244]	; (80021c0 <HAL_GPIO_Init+0x2cc>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d101      	bne.n	80020d4 <HAL_GPIO_Init+0x1e0>
 80020d0:	2303      	movs	r3, #3
 80020d2:	e006      	b.n	80020e2 <HAL_GPIO_Init+0x1ee>
 80020d4:	2304      	movs	r3, #4
 80020d6:	e004      	b.n	80020e2 <HAL_GPIO_Init+0x1ee>
 80020d8:	2302      	movs	r3, #2
 80020da:	e002      	b.n	80020e2 <HAL_GPIO_Init+0x1ee>
 80020dc:	2301      	movs	r3, #1
 80020de:	e000      	b.n	80020e2 <HAL_GPIO_Init+0x1ee>
 80020e0:	2300      	movs	r3, #0
 80020e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e4:	f002 0203 	and.w	r2, r2, #3
 80020e8:	0092      	lsls	r2, r2, #2
 80020ea:	4093      	lsls	r3, r2
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020f2:	492f      	ldr	r1, [pc, #188]	; (80021b0 <HAL_GPIO_Init+0x2bc>)
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	3302      	adds	r3, #2
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d006      	beq.n	800211a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800210c:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	492c      	ldr	r1, [pc, #176]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	600b      	str	r3, [r1, #0]
 8002118:	e006      	b.n	8002128 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800211a:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	43db      	mvns	r3, r3
 8002122:	4928      	ldr	r1, [pc, #160]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002124:	4013      	ands	r3, r2
 8002126:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d006      	beq.n	8002142 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002134:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	4922      	ldr	r1, [pc, #136]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	43db      	mvns	r3, r3
 800214a:	491e      	ldr	r1, [pc, #120]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 800214c:	4013      	ands	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d006      	beq.n	800216a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800215c:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	4918      	ldr	r1, [pc, #96]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	608b      	str	r3, [r1, #8]
 8002168:	e006      	b.n	8002178 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800216a:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	43db      	mvns	r3, r3
 8002172:	4914      	ldr	r1, [pc, #80]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002174:	4013      	ands	r3, r2
 8002176:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d021      	beq.n	80021c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002184:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	490e      	ldr	r1, [pc, #56]	; (80021c4 <HAL_GPIO_Init+0x2d0>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	60cb      	str	r3, [r1, #12]
 8002190:	e021      	b.n	80021d6 <HAL_GPIO_Init+0x2e2>
 8002192:	bf00      	nop
 8002194:	10320000 	.word	0x10320000
 8002198:	10310000 	.word	0x10310000
 800219c:	10220000 	.word	0x10220000
 80021a0:	10210000 	.word	0x10210000
 80021a4:	10120000 	.word	0x10120000
 80021a8:	10110000 	.word	0x10110000
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40010000 	.word	0x40010000
 80021b4:	40010800 	.word	0x40010800
 80021b8:	40010c00 	.word	0x40010c00
 80021bc:	40011000 	.word	0x40011000
 80021c0:	40011400 	.word	0x40011400
 80021c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_GPIO_Init+0x304>)
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	4909      	ldr	r1, [pc, #36]	; (80021f8 <HAL_GPIO_Init+0x304>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	3301      	adds	r3, #1
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f47f ae8e 	bne.w	8001f08 <HAL_GPIO_Init+0x14>
  }
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	372c      	adds	r7, #44	; 0x2c
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	40010400 	.word	0x40010400

080021fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	887b      	ldrh	r3, [r7, #2]
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002214:	2301      	movs	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e001      	b.n	800221e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800221e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	807b      	strh	r3, [r7, #2]
 8002236:	4613      	mov	r3, r2
 8002238:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800223a:	787b      	ldrb	r3, [r7, #1]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002240:	887a      	ldrh	r2, [r7, #2]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002246:	e003      	b.n	8002250 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002248:	887b      	ldrh	r3, [r7, #2]
 800224a:	041a      	lsls	r2, r3, #16
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	611a      	str	r2, [r3, #16]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800225a:	b480      	push	{r7}
 800225c:	b085      	sub	sp, #20
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	460b      	mov	r3, r1
 8002264:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800226c:	887a      	ldrh	r2, [r7, #2]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4013      	ands	r3, r2
 8002272:	041a      	lsls	r2, r3, #16
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	43d9      	mvns	r1, r3
 8002278:	887b      	ldrh	r3, [r7, #2]
 800227a:	400b      	ands	r3, r1
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	611a      	str	r2, [r3, #16]
}
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr

0800228c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e12b      	b.n	80024f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff fbb4 	bl	8001a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2224      	movs	r2, #36	; 0x24
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022f0:	f000 ffea 	bl	80032c8 <HAL_RCC_GetPCLK1Freq>
 80022f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4a81      	ldr	r2, [pc, #516]	; (8002500 <HAL_I2C_Init+0x274>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d807      	bhi.n	8002310 <HAL_I2C_Init+0x84>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4a80      	ldr	r2, [pc, #512]	; (8002504 <HAL_I2C_Init+0x278>)
 8002304:	4293      	cmp	r3, r2
 8002306:	bf94      	ite	ls
 8002308:	2301      	movls	r3, #1
 800230a:	2300      	movhi	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	e006      	b.n	800231e <HAL_I2C_Init+0x92>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4a7d      	ldr	r2, [pc, #500]	; (8002508 <HAL_I2C_Init+0x27c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	bf94      	ite	ls
 8002318:	2301      	movls	r3, #1
 800231a:	2300      	movhi	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e0e7      	b.n	80024f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4a78      	ldr	r2, [pc, #480]	; (800250c <HAL_I2C_Init+0x280>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	0c9b      	lsrs	r3, r3, #18
 8002330:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	430a      	orrs	r2, r1
 8002344:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4a6a      	ldr	r2, [pc, #424]	; (8002500 <HAL_I2C_Init+0x274>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d802      	bhi.n	8002360 <HAL_I2C_Init+0xd4>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	3301      	adds	r3, #1
 800235e:	e009      	b.n	8002374 <HAL_I2C_Init+0xe8>
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002366:	fb02 f303 	mul.w	r3, r2, r3
 800236a:	4a69      	ldr	r2, [pc, #420]	; (8002510 <HAL_I2C_Init+0x284>)
 800236c:	fba2 2303 	umull	r2, r3, r2, r3
 8002370:	099b      	lsrs	r3, r3, #6
 8002372:	3301      	adds	r3, #1
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	430b      	orrs	r3, r1
 800237a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002386:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	495c      	ldr	r1, [pc, #368]	; (8002500 <HAL_I2C_Init+0x274>)
 8002390:	428b      	cmp	r3, r1
 8002392:	d819      	bhi.n	80023c8 <HAL_I2C_Init+0x13c>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1e59      	subs	r1, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	fbb1 f3f3 	udiv	r3, r1, r3
 80023a2:	1c59      	adds	r1, r3, #1
 80023a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023a8:	400b      	ands	r3, r1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <HAL_I2C_Init+0x138>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1e59      	subs	r1, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023bc:	3301      	adds	r3, #1
 80023be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c2:	e051      	b.n	8002468 <HAL_I2C_Init+0x1dc>
 80023c4:	2304      	movs	r3, #4
 80023c6:	e04f      	b.n	8002468 <HAL_I2C_Init+0x1dc>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d111      	bne.n	80023f4 <HAL_I2C_Init+0x168>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1e58      	subs	r0, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6859      	ldr	r1, [r3, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	440b      	add	r3, r1
 80023de:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e2:	3301      	adds	r3, #1
 80023e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bf0c      	ite	eq
 80023ec:	2301      	moveq	r3, #1
 80023ee:	2300      	movne	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	e012      	b.n	800241a <HAL_I2C_Init+0x18e>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1e58      	subs	r0, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6859      	ldr	r1, [r3, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	0099      	lsls	r1, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	fbb0 f3f3 	udiv	r3, r0, r3
 800240a:	3301      	adds	r3, #1
 800240c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002410:	2b00      	cmp	r3, #0
 8002412:	bf0c      	ite	eq
 8002414:	2301      	moveq	r3, #1
 8002416:	2300      	movne	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_I2C_Init+0x196>
 800241e:	2301      	movs	r3, #1
 8002420:	e022      	b.n	8002468 <HAL_I2C_Init+0x1dc>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10e      	bne.n	8002448 <HAL_I2C_Init+0x1bc>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1e58      	subs	r0, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6859      	ldr	r1, [r3, #4]
 8002432:	460b      	mov	r3, r1
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	440b      	add	r3, r1
 8002438:	fbb0 f3f3 	udiv	r3, r0, r3
 800243c:	3301      	adds	r3, #1
 800243e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002446:	e00f      	b.n	8002468 <HAL_I2C_Init+0x1dc>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1e58      	subs	r0, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6859      	ldr	r1, [r3, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	0099      	lsls	r1, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	fbb0 f3f3 	udiv	r3, r0, r3
 800245e:	3301      	adds	r3, #1
 8002460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002464:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	6809      	ldr	r1, [r1, #0]
 800246c:	4313      	orrs	r3, r2
 800246e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69da      	ldr	r2, [r3, #28]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002496:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6911      	ldr	r1, [r2, #16]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68d2      	ldr	r2, [r2, #12]
 80024a2:	4311      	orrs	r1, r2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	430b      	orrs	r3, r1
 80024aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695a      	ldr	r2, [r3, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2220      	movs	r2, #32
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	000186a0 	.word	0x000186a0
 8002504:	001e847f 	.word	0x001e847f
 8002508:	003d08ff 	.word	0x003d08ff
 800250c:	431bde83 	.word	0x431bde83
 8002510:	10624dd3 	.word	0x10624dd3

08002514 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af02      	add	r7, sp, #8
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	461a      	mov	r2, r3
 8002520:	460b      	mov	r3, r1
 8002522:	817b      	strh	r3, [r7, #10]
 8002524:	4613      	mov	r3, r2
 8002526:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002528:	f7ff fbd2 	bl	8001cd0 <HAL_GetTick>
 800252c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b20      	cmp	r3, #32
 8002538:	f040 80e0 	bne.w	80026fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	2319      	movs	r3, #25
 8002542:	2201      	movs	r2, #1
 8002544:	4970      	ldr	r1, [pc, #448]	; (8002708 <HAL_I2C_Master_Transmit+0x1f4>)
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 f964 	bl	8002814 <I2C_WaitOnFlagUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002552:	2302      	movs	r3, #2
 8002554:	e0d3      	b.n	80026fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_I2C_Master_Transmit+0x50>
 8002560:	2302      	movs	r3, #2
 8002562:	e0cc      	b.n	80026fe <HAL_I2C_Master_Transmit+0x1ea>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b01      	cmp	r3, #1
 8002578:	d007      	beq.n	800258a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0201 	orr.w	r2, r2, #1
 8002588:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002598:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2221      	movs	r2, #33	; 0x21
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2210      	movs	r2, #16
 80025a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	893a      	ldrh	r2, [r7, #8]
 80025ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4a50      	ldr	r2, [pc, #320]	; (800270c <HAL_I2C_Master_Transmit+0x1f8>)
 80025ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025cc:	8979      	ldrh	r1, [r7, #10]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	6a3a      	ldr	r2, [r7, #32]
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f89c 	bl	8002710 <I2C_MasterRequestWrite>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e08d      	b.n	80026fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025f8:	e066      	b.n	80026c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	6a39      	ldr	r1, [r7, #32]
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 f9de 	bl	80029c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00d      	beq.n	8002626 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	2b04      	cmp	r3, #4
 8002610:	d107      	bne.n	8002622 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002620:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e06b      	b.n	80026fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	781a      	ldrb	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b04      	cmp	r3, #4
 8002662:	d11b      	bne.n	800269c <HAL_I2C_Master_Transmit+0x188>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002668:	2b00      	cmp	r3, #0
 800266a:	d017      	beq.n	800269c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	781a      	ldrb	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	6a39      	ldr	r1, [r7, #32]
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f9ce 	bl	8002a42 <I2C_WaitOnBTFFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00d      	beq.n	80026c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d107      	bne.n	80026c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e01a      	b.n	80026fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d194      	bne.n	80025fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	e000      	b.n	80026fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026fc:	2302      	movs	r3, #2
  }
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	00100002 	.word	0x00100002
 800270c:	ffff0000 	.word	0xffff0000

08002710 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af02      	add	r7, sp, #8
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	460b      	mov	r3, r1
 800271e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2b08      	cmp	r3, #8
 800272a:	d006      	beq.n	800273a <I2C_MasterRequestWrite+0x2a>
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d003      	beq.n	800273a <I2C_MasterRequestWrite+0x2a>
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002738:	d108      	bne.n	800274c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e00b      	b.n	8002764 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	2b12      	cmp	r3, #18
 8002752:	d107      	bne.n	8002764 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002762:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 f84f 	bl	8002814 <I2C_WaitOnFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00d      	beq.n	8002798 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800278a:	d103      	bne.n	8002794 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002792:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e035      	b.n	8002804 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027a0:	d108      	bne.n	80027b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027a2:	897b      	ldrh	r3, [r7, #10]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027b0:	611a      	str	r2, [r3, #16]
 80027b2:	e01b      	b.n	80027ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027b4:	897b      	ldrh	r3, [r7, #10]
 80027b6:	11db      	asrs	r3, r3, #7
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	f003 0306 	and.w	r3, r3, #6
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f063 030f 	orn	r3, r3, #15
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	490e      	ldr	r1, [pc, #56]	; (800280c <I2C_MasterRequestWrite+0xfc>)
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f875 	bl	80028c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e010      	b.n	8002804 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027e2:	897b      	ldrh	r3, [r7, #10]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	4907      	ldr	r1, [pc, #28]	; (8002810 <I2C_MasterRequestWrite+0x100>)
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 f865 	bl	80028c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	00010008 	.word	0x00010008
 8002810:	00010002 	.word	0x00010002

08002814 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	4613      	mov	r3, r2
 8002822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002824:	e025      	b.n	8002872 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d021      	beq.n	8002872 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282e:	f7ff fa4f 	bl	8001cd0 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d302      	bcc.n	8002844 <I2C_WaitOnFlagUntilTimeout+0x30>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d116      	bne.n	8002872 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f043 0220 	orr.w	r2, r3, #32
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e023      	b.n	80028ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	0c1b      	lsrs	r3, r3, #16
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b01      	cmp	r3, #1
 800287a:	d10d      	bne.n	8002898 <I2C_WaitOnFlagUntilTimeout+0x84>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	43da      	mvns	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4013      	ands	r3, r2
 8002888:	b29b      	uxth	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	bf0c      	ite	eq
 800288e:	2301      	moveq	r3, #1
 8002890:	2300      	movne	r3, #0
 8002892:	b2db      	uxtb	r3, r3
 8002894:	461a      	mov	r2, r3
 8002896:	e00c      	b.n	80028b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	43da      	mvns	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	4013      	ands	r3, r2
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	bf0c      	ite	eq
 80028aa:	2301      	moveq	r3, #1
 80028ac:	2300      	movne	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d0b6      	beq.n	8002826 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028d0:	e051      	b.n	8002976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e0:	d123      	bne.n	800292a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f043 0204 	orr.w	r2, r3, #4
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e046      	b.n	80029b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002930:	d021      	beq.n	8002976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002932:	f7ff f9cd 	bl	8001cd0 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	429a      	cmp	r2, r3
 8002940:	d302      	bcc.n	8002948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d116      	bne.n	8002976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f043 0220 	orr.w	r2, r3, #32
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e020      	b.n	80029b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	0c1b      	lsrs	r3, r3, #16
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b01      	cmp	r3, #1
 800297e:	d10c      	bne.n	800299a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	43da      	mvns	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4013      	ands	r3, r2
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	bf14      	ite	ne
 8002992:	2301      	movne	r3, #1
 8002994:	2300      	moveq	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	e00b      	b.n	80029b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	43da      	mvns	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	4013      	ands	r3, r2
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf14      	ite	ne
 80029ac:	2301      	movne	r3, #1
 80029ae:	2300      	moveq	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d18d      	bne.n	80028d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029cc:	e02d      	b.n	8002a2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f878 	bl	8002ac4 <I2C_IsAcknowledgeFailed>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e02d      	b.n	8002a3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e4:	d021      	beq.n	8002a2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e6:	f7ff f973 	bl	8001cd0 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d302      	bcc.n	80029fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d116      	bne.n	8002a2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f043 0220 	orr.w	r2, r3, #32
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e007      	b.n	8002a3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a34:	2b80      	cmp	r3, #128	; 0x80
 8002a36:	d1ca      	bne.n	80029ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a4e:	e02d      	b.n	8002aac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f837 	bl	8002ac4 <I2C_IsAcknowledgeFailed>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e02d      	b.n	8002abc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a66:	d021      	beq.n	8002aac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a68:	f7ff f932 	bl	8001cd0 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d302      	bcc.n	8002a7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d116      	bne.n	8002aac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	f043 0220 	orr.w	r2, r3, #32
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e007      	b.n	8002abc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d1ca      	bne.n	8002a50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ada:	d11b      	bne.n	8002b14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ae4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	f043 0204 	orr.w	r2, r3, #4
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e272      	b.n	8003018 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 8087 	beq.w	8002c4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b40:	4b92      	ldr	r3, [pc, #584]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 030c 	and.w	r3, r3, #12
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d00c      	beq.n	8002b66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b4c:	4b8f      	ldr	r3, [pc, #572]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 030c 	and.w	r3, r3, #12
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d112      	bne.n	8002b7e <HAL_RCC_OscConfig+0x5e>
 8002b58:	4b8c      	ldr	r3, [pc, #560]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b64:	d10b      	bne.n	8002b7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b66:	4b89      	ldr	r3, [pc, #548]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d06c      	beq.n	8002c4c <HAL_RCC_OscConfig+0x12c>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d168      	bne.n	8002c4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e24c      	b.n	8003018 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b86:	d106      	bne.n	8002b96 <HAL_RCC_OscConfig+0x76>
 8002b88:	4b80      	ldr	r3, [pc, #512]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a7f      	ldr	r2, [pc, #508]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	e02e      	b.n	8002bf4 <HAL_RCC_OscConfig+0xd4>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x98>
 8002b9e:	4b7b      	ldr	r3, [pc, #492]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a7a      	ldr	r2, [pc, #488]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	4b78      	ldr	r3, [pc, #480]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a77      	ldr	r2, [pc, #476]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	e01d      	b.n	8002bf4 <HAL_RCC_OscConfig+0xd4>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bc0:	d10c      	bne.n	8002bdc <HAL_RCC_OscConfig+0xbc>
 8002bc2:	4b72      	ldr	r3, [pc, #456]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a71      	ldr	r2, [pc, #452]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	4b6f      	ldr	r3, [pc, #444]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a6e      	ldr	r2, [pc, #440]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	e00b      	b.n	8002bf4 <HAL_RCC_OscConfig+0xd4>
 8002bdc:	4b6b      	ldr	r3, [pc, #428]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a6a      	ldr	r2, [pc, #424]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	4b68      	ldr	r3, [pc, #416]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a67      	ldr	r2, [pc, #412]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d013      	beq.n	8002c24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7ff f868 	bl	8001cd0 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c04:	f7ff f864 	bl	8001cd0 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	; 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e200      	b.n	8003018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c16:	4b5d      	ldr	r3, [pc, #372]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0xe4>
 8002c22:	e014      	b.n	8002c4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c24:	f7ff f854 	bl	8001cd0 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c2c:	f7ff f850 	bl	8001cd0 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	; 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e1ec      	b.n	8003018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3e:	4b53      	ldr	r3, [pc, #332]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x10c>
 8002c4a:	e000      	b.n	8002c4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d063      	beq.n	8002d22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c5a:	4b4c      	ldr	r3, [pc, #304]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00b      	beq.n	8002c7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c66:	4b49      	ldr	r3, [pc, #292]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d11c      	bne.n	8002cac <HAL_RCC_OscConfig+0x18c>
 8002c72:	4b46      	ldr	r3, [pc, #280]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d116      	bne.n	8002cac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7e:	4b43      	ldr	r3, [pc, #268]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <HAL_RCC_OscConfig+0x176>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d001      	beq.n	8002c96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e1c0      	b.n	8003018 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c96:	4b3d      	ldr	r3, [pc, #244]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4939      	ldr	r1, [pc, #228]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002caa:	e03a      	b.n	8002d22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d020      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb4:	4b36      	ldr	r3, [pc, #216]	; (8002d90 <HAL_RCC_OscConfig+0x270>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cba:	f7ff f809 	bl	8001cd0 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc2:	f7ff f805 	bl	8001cd0 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e1a1      	b.n	8003018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd4:	4b2d      	ldr	r3, [pc, #180]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce0:	4b2a      	ldr	r3, [pc, #168]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4927      	ldr	r1, [pc, #156]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	600b      	str	r3, [r1, #0]
 8002cf4:	e015      	b.n	8002d22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf6:	4b26      	ldr	r3, [pc, #152]	; (8002d90 <HAL_RCC_OscConfig+0x270>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7fe ffe8 	bl	8001cd0 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d04:	f7fe ffe4 	bl	8001cd0 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e180      	b.n	8003018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d16:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d03a      	beq.n	8002da4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d019      	beq.n	8002d6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d36:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3c:	f7fe ffc8 	bl	8001cd0 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d44:	f7fe ffc4 	bl	8001cd0 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e160      	b.n	8003018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d56:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d62:	2001      	movs	r0, #1
 8002d64:	f000 fac4 	bl	80032f0 <RCC_Delay>
 8002d68:	e01c      	b.n	8002da4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d70:	f7fe ffae 	bl	8001cd0 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d76:	e00f      	b.n	8002d98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d78:	f7fe ffaa 	bl	8001cd0 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d908      	bls.n	8002d98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e146      	b.n	8003018 <HAL_RCC_OscConfig+0x4f8>
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	42420000 	.word	0x42420000
 8002d94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d98:	4b92      	ldr	r3, [pc, #584]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e9      	bne.n	8002d78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80a6 	beq.w	8002efe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002db2:	2300      	movs	r3, #0
 8002db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db6:	4b8b      	ldr	r3, [pc, #556]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10d      	bne.n	8002dde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc2:	4b88      	ldr	r3, [pc, #544]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	4a87      	ldr	r2, [pc, #540]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	61d3      	str	r3, [r2, #28]
 8002dce:	4b85      	ldr	r3, [pc, #532]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dde:	4b82      	ldr	r3, [pc, #520]	; (8002fe8 <HAL_RCC_OscConfig+0x4c8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d118      	bne.n	8002e1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dea:	4b7f      	ldr	r3, [pc, #508]	; (8002fe8 <HAL_RCC_OscConfig+0x4c8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a7e      	ldr	r2, [pc, #504]	; (8002fe8 <HAL_RCC_OscConfig+0x4c8>)
 8002df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df6:	f7fe ff6b 	bl	8001cd0 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfe:	f7fe ff67 	bl	8001cd0 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b64      	cmp	r3, #100	; 0x64
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e103      	b.n	8003018 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	4b75      	ldr	r3, [pc, #468]	; (8002fe8 <HAL_RCC_OscConfig+0x4c8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d106      	bne.n	8002e32 <HAL_RCC_OscConfig+0x312>
 8002e24:	4b6f      	ldr	r3, [pc, #444]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	4a6e      	ldr	r2, [pc, #440]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6213      	str	r3, [r2, #32]
 8002e30:	e02d      	b.n	8002e8e <HAL_RCC_OscConfig+0x36e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x334>
 8002e3a:	4b6a      	ldr	r3, [pc, #424]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	4a69      	ldr	r2, [pc, #420]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	6213      	str	r3, [r2, #32]
 8002e46:	4b67      	ldr	r3, [pc, #412]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	4a66      	ldr	r2, [pc, #408]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	f023 0304 	bic.w	r3, r3, #4
 8002e50:	6213      	str	r3, [r2, #32]
 8002e52:	e01c      	b.n	8002e8e <HAL_RCC_OscConfig+0x36e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	d10c      	bne.n	8002e76 <HAL_RCC_OscConfig+0x356>
 8002e5c:	4b61      	ldr	r3, [pc, #388]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	4a60      	ldr	r2, [pc, #384]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002e62:	f043 0304 	orr.w	r3, r3, #4
 8002e66:	6213      	str	r3, [r2, #32]
 8002e68:	4b5e      	ldr	r3, [pc, #376]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	4a5d      	ldr	r2, [pc, #372]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	6213      	str	r3, [r2, #32]
 8002e74:	e00b      	b.n	8002e8e <HAL_RCC_OscConfig+0x36e>
 8002e76:	4b5b      	ldr	r3, [pc, #364]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	4a5a      	ldr	r2, [pc, #360]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	6213      	str	r3, [r2, #32]
 8002e82:	4b58      	ldr	r3, [pc, #352]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	4a57      	ldr	r2, [pc, #348]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	f023 0304 	bic.w	r3, r3, #4
 8002e8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d015      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e96:	f7fe ff1b 	bl	8001cd0 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9e:	f7fe ff17 	bl	8001cd0 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e0b1      	b.n	8003018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb4:	4b4b      	ldr	r3, [pc, #300]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0ee      	beq.n	8002e9e <HAL_RCC_OscConfig+0x37e>
 8002ec0:	e014      	b.n	8002eec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec2:	f7fe ff05 	bl	8001cd0 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec8:	e00a      	b.n	8002ee0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eca:	f7fe ff01 	bl	8001cd0 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e09b      	b.n	8003018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee0:	4b40      	ldr	r3, [pc, #256]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1ee      	bne.n	8002eca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d105      	bne.n	8002efe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef2:	4b3c      	ldr	r3, [pc, #240]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	4a3b      	ldr	r2, [pc, #236]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002efc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 8087 	beq.w	8003016 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f08:	4b36      	ldr	r3, [pc, #216]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 030c 	and.w	r3, r3, #12
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d061      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d146      	bne.n	8002faa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1c:	4b33      	ldr	r3, [pc, #204]	; (8002fec <HAL_RCC_OscConfig+0x4cc>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f22:	f7fe fed5 	bl	8001cd0 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2a:	f7fe fed1 	bl	8001cd0 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e06d      	b.n	8003018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f3c:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f0      	bne.n	8002f2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f50:	d108      	bne.n	8002f64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f52:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	4921      	ldr	r1, [pc, #132]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f64:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a19      	ldr	r1, [r3, #32]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	430b      	orrs	r3, r1
 8002f76:	491b      	ldr	r1, [pc, #108]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f7c:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <HAL_RCC_OscConfig+0x4cc>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7fe fea5 	bl	8001cd0 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8a:	f7fe fea1 	bl	8001cd0 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e03d      	b.n	8003018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x46a>
 8002fa8:	e035      	b.n	8003016 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <HAL_RCC_OscConfig+0x4cc>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fe8e 	bl	8001cd0 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb8:	f7fe fe8a 	bl	8001cd0 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e026      	b.n	8003018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x498>
 8002fd6:	e01e      	b.n	8003016 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d107      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e019      	b.n	8003018 <HAL_RCC_OscConfig+0x4f8>
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_OscConfig+0x500>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	429a      	cmp	r2, r3
 8003002:	d106      	bne.n	8003012 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300e:	429a      	cmp	r2, r3
 8003010:	d001      	beq.n	8003016 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40021000 	.word	0x40021000

08003024 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0d0      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003038:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d910      	bls.n	8003068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b67      	ldr	r3, [pc, #412]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 0207 	bic.w	r2, r3, #7
 800304e:	4965      	ldr	r1, [pc, #404]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003056:	4b63      	ldr	r3, [pc, #396]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0b8      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d020      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003080:	4b59      	ldr	r3, [pc, #356]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4a58      	ldr	r2, [pc, #352]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800308a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003098:	4b53      	ldr	r3, [pc, #332]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4a52      	ldr	r2, [pc, #328]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a4:	4b50      	ldr	r3, [pc, #320]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	494d      	ldr	r1, [pc, #308]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d040      	beq.n	8003144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d107      	bne.n	80030da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	4b47      	ldr	r3, [pc, #284]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d115      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e07f      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d107      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e2:	4b41      	ldr	r3, [pc, #260]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e073      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f2:	4b3d      	ldr	r3, [pc, #244]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e06b      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003102:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f023 0203 	bic.w	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4936      	ldr	r1, [pc, #216]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	4313      	orrs	r3, r2
 8003112:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003114:	f7fe fddc 	bl	8001cd0 <HAL_GetTick>
 8003118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311a:	e00a      	b.n	8003132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311c:	f7fe fdd8 	bl	8001cd0 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	; 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e053      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	4b2d      	ldr	r3, [pc, #180]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 020c 	and.w	r2, r3, #12
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	429a      	cmp	r2, r3
 8003142:	d1eb      	bne.n	800311c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003144:	4b27      	ldr	r3, [pc, #156]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d210      	bcs.n	8003174 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 0207 	bic.w	r2, r3, #7
 800315a:	4922      	ldr	r1, [pc, #136]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e032      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003180:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4916      	ldr	r1, [pc, #88]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 800318e:	4313      	orrs	r3, r2
 8003190:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d009      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	490e      	ldr	r1, [pc, #56]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031b2:	f000 f821 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80031b6:	4602      	mov	r2, r0
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	490a      	ldr	r1, [pc, #40]	; (80031ec <HAL_RCC_ClockConfig+0x1c8>)
 80031c4:	5ccb      	ldrb	r3, [r1, r3]
 80031c6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ca:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <HAL_RCC_ClockConfig+0x1cc>)
 80031cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCC_ClockConfig+0x1d0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fe fd3a 	bl	8001c4c <HAL_InitTick>

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40022000 	.word	0x40022000
 80031e8:	40021000 	.word	0x40021000
 80031ec:	08004664 	.word	0x08004664
 80031f0:	20000010 	.word	0x20000010
 80031f4:	20000014 	.word	0x20000014

080031f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f8:	b490      	push	{r4, r7}
 80031fa:	b08a      	sub	sp, #40	; 0x28
 80031fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031fe:	4b29      	ldr	r3, [pc, #164]	; (80032a4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003200:	1d3c      	adds	r4, r7, #4
 8003202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003208:	f240 2301 	movw	r3, #513	; 0x201
 800320c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
 8003216:	2300      	movs	r3, #0
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003222:	4b21      	ldr	r3, [pc, #132]	; (80032a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b04      	cmp	r3, #4
 8003230:	d002      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x40>
 8003232:	2b08      	cmp	r3, #8
 8003234:	d003      	beq.n	800323e <HAL_RCC_GetSysClockFreq+0x46>
 8003236:	e02b      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003238:	4b1c      	ldr	r3, [pc, #112]	; (80032ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800323a:	623b      	str	r3, [r7, #32]
      break;
 800323c:	e02b      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	0c9b      	lsrs	r3, r3, #18
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	3328      	adds	r3, #40	; 0x28
 8003248:	443b      	add	r3, r7
 800324a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800324e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d012      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800325a:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	0c5b      	lsrs	r3, r3, #17
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	3328      	adds	r3, #40	; 0x28
 8003266:	443b      	add	r3, r7
 8003268:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800326c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	4a0e      	ldr	r2, [pc, #56]	; (80032ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003272:	fb03 f202 	mul.w	r2, r3, r2
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
 800327e:	e004      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	4a0b      	ldr	r2, [pc, #44]	; (80032b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003284:	fb02 f303 	mul.w	r3, r2, r3
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	623b      	str	r3, [r7, #32]
      break;
 800328e:	e002      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003292:	623b      	str	r3, [r7, #32]
      break;
 8003294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003296:	6a3b      	ldr	r3, [r7, #32]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3728      	adds	r7, #40	; 0x28
 800329c:	46bd      	mov	sp, r7
 800329e:	bc90      	pop	{r4, r7}
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	08004654 	.word	0x08004654
 80032a8:	40021000 	.word	0x40021000
 80032ac:	007a1200 	.word	0x007a1200
 80032b0:	003d0900 	.word	0x003d0900

080032b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b8:	4b02      	ldr	r3, [pc, #8]	; (80032c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80032ba:	681b      	ldr	r3, [r3, #0]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr
 80032c4:	20000010 	.word	0x20000010

080032c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032cc:	f7ff fff2 	bl	80032b4 <HAL_RCC_GetHCLKFreq>
 80032d0:	4602      	mov	r2, r0
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	0a1b      	lsrs	r3, r3, #8
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	4903      	ldr	r1, [pc, #12]	; (80032ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80032de:	5ccb      	ldrb	r3, [r1, r3]
 80032e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40021000 	.word	0x40021000
 80032ec:	08004674 	.word	0x08004674

080032f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032f8:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <RCC_Delay+0x34>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0a      	ldr	r2, [pc, #40]	; (8003328 <RCC_Delay+0x38>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	0a5b      	lsrs	r3, r3, #9
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	fb02 f303 	mul.w	r3, r2, r3
 800330a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800330c:	bf00      	nop
  }
  while (Delay --);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1e5a      	subs	r2, r3, #1
 8003312:	60fa      	str	r2, [r7, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f9      	bne.n	800330c <RCC_Delay+0x1c>
}
 8003318:	bf00      	nop
 800331a:	bf00      	nop
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	20000010 	.word	0x20000010
 8003328:	10624dd3 	.word	0x10624dd3

0800332c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e093      	b.n	8003468 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d106      	bne.n	800335a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7fe fbcf 	bl	8001af8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2202      	movs	r2, #2
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003370:	f023 0307 	bic.w	r3, r3, #7
 8003374:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3304      	adds	r3, #4
 800337e:	4619      	mov	r1, r3
 8003380:	4610      	mov	r0, r2
 8003382:	f000 f903 	bl	800358c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ae:	f023 0303 	bic.w	r3, r3, #3
 80033b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	4313      	orrs	r3, r2
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80033cc:	f023 030c 	bic.w	r3, r3, #12
 80033d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	4313      	orrs	r3, r2
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	011a      	lsls	r2, r3, #4
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	031b      	lsls	r3, r3, #12
 80033fc:	4313      	orrs	r3, r2
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800340a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	4313      	orrs	r3, r2
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003480:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003488:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003490:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003498:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d110      	bne.n	80034c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d102      	bne.n	80034ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80034a6:	7b7b      	ldrb	r3, [r7, #13]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d001      	beq.n	80034b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e069      	b.n	8003584 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034c0:	e031      	b.n	8003526 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d110      	bne.n	80034ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034c8:	7bbb      	ldrb	r3, [r7, #14]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d102      	bne.n	80034d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034ce:	7b3b      	ldrb	r3, [r7, #12]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d001      	beq.n	80034d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e055      	b.n	8003584 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034e8:	e01d      	b.n	8003526 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d108      	bne.n	8003502 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034f0:	7bbb      	ldrb	r3, [r7, #14]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d105      	bne.n	8003502 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034f6:	7b7b      	ldrb	r3, [r7, #13]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d102      	bne.n	8003502 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034fc:	7b3b      	ldrb	r3, [r7, #12]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d001      	beq.n	8003506 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e03e      	b.n	8003584 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2202      	movs	r2, #2
 800350a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2202      	movs	r2, #2
 800351a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2202      	movs	r2, #2
 8003522:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_TIM_Encoder_Start+0xc4>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b04      	cmp	r3, #4
 8003530:	d008      	beq.n	8003544 <HAL_TIM_Encoder_Start+0xd4>
 8003532:	e00f      	b.n	8003554 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2201      	movs	r2, #1
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f000 f887 	bl	8003650 <TIM_CCxChannelCmd>
      break;
 8003542:	e016      	b.n	8003572 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2201      	movs	r2, #1
 800354a:	2104      	movs	r1, #4
 800354c:	4618      	mov	r0, r3
 800354e:	f000 f87f 	bl	8003650 <TIM_CCxChannelCmd>
      break;
 8003552:	e00e      	b.n	8003572 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2201      	movs	r2, #1
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f000 f877 	bl	8003650 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2201      	movs	r2, #1
 8003568:	2104      	movs	r1, #4
 800356a:	4618      	mov	r0, r3
 800356c:	f000 f870 	bl	8003650 <TIM_CCxChannelCmd>
      break;
 8003570:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0201 	orr.w	r2, r2, #1
 8003580:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a29      	ldr	r2, [pc, #164]	; (8003644 <TIM_Base_SetConfig+0xb8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00b      	beq.n	80035bc <TIM_Base_SetConfig+0x30>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035aa:	d007      	beq.n	80035bc <TIM_Base_SetConfig+0x30>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a26      	ldr	r2, [pc, #152]	; (8003648 <TIM_Base_SetConfig+0xbc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <TIM_Base_SetConfig+0x30>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a25      	ldr	r2, [pc, #148]	; (800364c <TIM_Base_SetConfig+0xc0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d108      	bne.n	80035ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a1c      	ldr	r2, [pc, #112]	; (8003644 <TIM_Base_SetConfig+0xb8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00b      	beq.n	80035ee <TIM_Base_SetConfig+0x62>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035dc:	d007      	beq.n	80035ee <TIM_Base_SetConfig+0x62>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a19      	ldr	r2, [pc, #100]	; (8003648 <TIM_Base_SetConfig+0xbc>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d003      	beq.n	80035ee <TIM_Base_SetConfig+0x62>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a18      	ldr	r2, [pc, #96]	; (800364c <TIM_Base_SetConfig+0xc0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d108      	bne.n	8003600 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a07      	ldr	r2, [pc, #28]	; (8003644 <TIM_Base_SetConfig+0xb8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d103      	bne.n	8003634 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	615a      	str	r2, [r3, #20]
}
 800363a:	bf00      	nop
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr
 8003644:	40012c00 	.word	0x40012c00
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800

08003650 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	2201      	movs	r2, #1
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a1a      	ldr	r2, [r3, #32]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	43db      	mvns	r3, r3
 8003672:	401a      	ands	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a1a      	ldr	r2, [r3, #32]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	fa01 f303 	lsl.w	r3, r1, r3
 8003688:	431a      	orrs	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	621a      	str	r2, [r3, #32]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr

08003698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e046      	b.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a16      	ldr	r2, [pc, #88]	; (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00e      	beq.n	8003712 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fc:	d009      	beq.n	8003712 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a12      	ldr	r2, [pc, #72]	; (800374c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d004      	beq.n	8003712 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a10      	ldr	r2, [pc, #64]	; (8003750 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d10c      	bne.n	800372c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003718:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	4313      	orrs	r3, r2
 8003722:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr
 8003748:	40012c00 	.word	0x40012c00
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800

08003754 <__errno>:
 8003754:	4b01      	ldr	r3, [pc, #4]	; (800375c <__errno+0x8>)
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	2000001c 	.word	0x2000001c

08003760 <__libc_init_array>:
 8003760:	b570      	push	{r4, r5, r6, lr}
 8003762:	2600      	movs	r6, #0
 8003764:	4d0c      	ldr	r5, [pc, #48]	; (8003798 <__libc_init_array+0x38>)
 8003766:	4c0d      	ldr	r4, [pc, #52]	; (800379c <__libc_init_array+0x3c>)
 8003768:	1b64      	subs	r4, r4, r5
 800376a:	10a4      	asrs	r4, r4, #2
 800376c:	42a6      	cmp	r6, r4
 800376e:	d109      	bne.n	8003784 <__libc_init_array+0x24>
 8003770:	f000 ff60 	bl	8004634 <_init>
 8003774:	2600      	movs	r6, #0
 8003776:	4d0a      	ldr	r5, [pc, #40]	; (80037a0 <__libc_init_array+0x40>)
 8003778:	4c0a      	ldr	r4, [pc, #40]	; (80037a4 <__libc_init_array+0x44>)
 800377a:	1b64      	subs	r4, r4, r5
 800377c:	10a4      	asrs	r4, r4, #2
 800377e:	42a6      	cmp	r6, r4
 8003780:	d105      	bne.n	800378e <__libc_init_array+0x2e>
 8003782:	bd70      	pop	{r4, r5, r6, pc}
 8003784:	f855 3b04 	ldr.w	r3, [r5], #4
 8003788:	4798      	blx	r3
 800378a:	3601      	adds	r6, #1
 800378c:	e7ee      	b.n	800376c <__libc_init_array+0xc>
 800378e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003792:	4798      	blx	r3
 8003794:	3601      	adds	r6, #1
 8003796:	e7f2      	b.n	800377e <__libc_init_array+0x1e>
 8003798:	080046d8 	.word	0x080046d8
 800379c:	080046d8 	.word	0x080046d8
 80037a0:	080046d8 	.word	0x080046d8
 80037a4:	080046dc 	.word	0x080046dc

080037a8 <__itoa>:
 80037a8:	1e93      	subs	r3, r2, #2
 80037aa:	2b22      	cmp	r3, #34	; 0x22
 80037ac:	b510      	push	{r4, lr}
 80037ae:	460c      	mov	r4, r1
 80037b0:	d904      	bls.n	80037bc <__itoa+0x14>
 80037b2:	2300      	movs	r3, #0
 80037b4:	461c      	mov	r4, r3
 80037b6:	700b      	strb	r3, [r1, #0]
 80037b8:	4620      	mov	r0, r4
 80037ba:	bd10      	pop	{r4, pc}
 80037bc:	2a0a      	cmp	r2, #10
 80037be:	d109      	bne.n	80037d4 <__itoa+0x2c>
 80037c0:	2800      	cmp	r0, #0
 80037c2:	da07      	bge.n	80037d4 <__itoa+0x2c>
 80037c4:	232d      	movs	r3, #45	; 0x2d
 80037c6:	700b      	strb	r3, [r1, #0]
 80037c8:	2101      	movs	r1, #1
 80037ca:	4240      	negs	r0, r0
 80037cc:	4421      	add	r1, r4
 80037ce:	f000 f80d 	bl	80037ec <__utoa>
 80037d2:	e7f1      	b.n	80037b8 <__itoa+0x10>
 80037d4:	2100      	movs	r1, #0
 80037d6:	e7f9      	b.n	80037cc <__itoa+0x24>

080037d8 <itoa>:
 80037d8:	f7ff bfe6 	b.w	80037a8 <__itoa>

080037dc <memset>:
 80037dc:	4603      	mov	r3, r0
 80037de:	4402      	add	r2, r0
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d100      	bne.n	80037e6 <memset+0xa>
 80037e4:	4770      	bx	lr
 80037e6:	f803 1b01 	strb.w	r1, [r3], #1
 80037ea:	e7f9      	b.n	80037e0 <memset+0x4>

080037ec <__utoa>:
 80037ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ee:	b08b      	sub	sp, #44	; 0x2c
 80037f0:	4605      	mov	r5, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	466e      	mov	r6, sp
 80037f6:	4c1d      	ldr	r4, [pc, #116]	; (800386c <__utoa+0x80>)
 80037f8:	f104 0c20 	add.w	ip, r4, #32
 80037fc:	4637      	mov	r7, r6
 80037fe:	6820      	ldr	r0, [r4, #0]
 8003800:	6861      	ldr	r1, [r4, #4]
 8003802:	3408      	adds	r4, #8
 8003804:	c703      	stmia	r7!, {r0, r1}
 8003806:	4564      	cmp	r4, ip
 8003808:	463e      	mov	r6, r7
 800380a:	d1f7      	bne.n	80037fc <__utoa+0x10>
 800380c:	7921      	ldrb	r1, [r4, #4]
 800380e:	6820      	ldr	r0, [r4, #0]
 8003810:	7139      	strb	r1, [r7, #4]
 8003812:	1e91      	subs	r1, r2, #2
 8003814:	2922      	cmp	r1, #34	; 0x22
 8003816:	6038      	str	r0, [r7, #0]
 8003818:	f04f 0100 	mov.w	r1, #0
 800381c:	d904      	bls.n	8003828 <__utoa+0x3c>
 800381e:	7019      	strb	r1, [r3, #0]
 8003820:	460b      	mov	r3, r1
 8003822:	4618      	mov	r0, r3
 8003824:	b00b      	add	sp, #44	; 0x2c
 8003826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003828:	1e58      	subs	r0, r3, #1
 800382a:	4684      	mov	ip, r0
 800382c:	fbb5 f7f2 	udiv	r7, r5, r2
 8003830:	fb02 5617 	mls	r6, r2, r7, r5
 8003834:	3628      	adds	r6, #40	; 0x28
 8003836:	446e      	add	r6, sp
 8003838:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800383c:	460c      	mov	r4, r1
 800383e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003842:	462e      	mov	r6, r5
 8003844:	42b2      	cmp	r2, r6
 8003846:	463d      	mov	r5, r7
 8003848:	f101 0101 	add.w	r1, r1, #1
 800384c:	d9ee      	bls.n	800382c <__utoa+0x40>
 800384e:	2200      	movs	r2, #0
 8003850:	545a      	strb	r2, [r3, r1]
 8003852:	1919      	adds	r1, r3, r4
 8003854:	1aa5      	subs	r5, r4, r2
 8003856:	42aa      	cmp	r2, r5
 8003858:	dae3      	bge.n	8003822 <__utoa+0x36>
 800385a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800385e:	780e      	ldrb	r6, [r1, #0]
 8003860:	3201      	adds	r2, #1
 8003862:	7006      	strb	r6, [r0, #0]
 8003864:	f801 5901 	strb.w	r5, [r1], #-1
 8003868:	e7f4      	b.n	8003854 <__utoa+0x68>
 800386a:	bf00      	nop
 800386c:	0800467c 	.word	0x0800467c

08003870 <pow>:
 8003870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003874:	4614      	mov	r4, r2
 8003876:	461d      	mov	r5, r3
 8003878:	4680      	mov	r8, r0
 800387a:	4689      	mov	r9, r1
 800387c:	f000 f860 	bl	8003940 <__ieee754_pow>
 8003880:	4622      	mov	r2, r4
 8003882:	4606      	mov	r6, r0
 8003884:	460f      	mov	r7, r1
 8003886:	462b      	mov	r3, r5
 8003888:	4620      	mov	r0, r4
 800388a:	4629      	mov	r1, r5
 800388c:	f7fd f8b6 	bl	80009fc <__aeabi_dcmpun>
 8003890:	bbc8      	cbnz	r0, 8003906 <pow+0x96>
 8003892:	2200      	movs	r2, #0
 8003894:	2300      	movs	r3, #0
 8003896:	4640      	mov	r0, r8
 8003898:	4649      	mov	r1, r9
 800389a:	f7fd f87d 	bl	8000998 <__aeabi_dcmpeq>
 800389e:	b1b8      	cbz	r0, 80038d0 <pow+0x60>
 80038a0:	2200      	movs	r2, #0
 80038a2:	2300      	movs	r3, #0
 80038a4:	4620      	mov	r0, r4
 80038a6:	4629      	mov	r1, r5
 80038a8:	f7fd f876 	bl	8000998 <__aeabi_dcmpeq>
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d141      	bne.n	8003934 <pow+0xc4>
 80038b0:	4620      	mov	r0, r4
 80038b2:	4629      	mov	r1, r5
 80038b4:	f000 fe39 	bl	800452a <finite>
 80038b8:	b328      	cbz	r0, 8003906 <pow+0x96>
 80038ba:	2200      	movs	r2, #0
 80038bc:	2300      	movs	r3, #0
 80038be:	4620      	mov	r0, r4
 80038c0:	4629      	mov	r1, r5
 80038c2:	f7fd f873 	bl	80009ac <__aeabi_dcmplt>
 80038c6:	b1f0      	cbz	r0, 8003906 <pow+0x96>
 80038c8:	f7ff ff44 	bl	8003754 <__errno>
 80038cc:	2322      	movs	r3, #34	; 0x22
 80038ce:	e019      	b.n	8003904 <pow+0x94>
 80038d0:	4630      	mov	r0, r6
 80038d2:	4639      	mov	r1, r7
 80038d4:	f000 fe29 	bl	800452a <finite>
 80038d8:	b9c8      	cbnz	r0, 800390e <pow+0x9e>
 80038da:	4640      	mov	r0, r8
 80038dc:	4649      	mov	r1, r9
 80038de:	f000 fe24 	bl	800452a <finite>
 80038e2:	b1a0      	cbz	r0, 800390e <pow+0x9e>
 80038e4:	4620      	mov	r0, r4
 80038e6:	4629      	mov	r1, r5
 80038e8:	f000 fe1f 	bl	800452a <finite>
 80038ec:	b178      	cbz	r0, 800390e <pow+0x9e>
 80038ee:	4632      	mov	r2, r6
 80038f0:	463b      	mov	r3, r7
 80038f2:	4630      	mov	r0, r6
 80038f4:	4639      	mov	r1, r7
 80038f6:	f7fd f881 	bl	80009fc <__aeabi_dcmpun>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	d0e4      	beq.n	80038c8 <pow+0x58>
 80038fe:	f7ff ff29 	bl	8003754 <__errno>
 8003902:	2321      	movs	r3, #33	; 0x21
 8003904:	6003      	str	r3, [r0, #0]
 8003906:	4630      	mov	r0, r6
 8003908:	4639      	mov	r1, r7
 800390a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800390e:	2200      	movs	r2, #0
 8003910:	2300      	movs	r3, #0
 8003912:	4630      	mov	r0, r6
 8003914:	4639      	mov	r1, r7
 8003916:	f7fd f83f 	bl	8000998 <__aeabi_dcmpeq>
 800391a:	2800      	cmp	r0, #0
 800391c:	d0f3      	beq.n	8003906 <pow+0x96>
 800391e:	4640      	mov	r0, r8
 8003920:	4649      	mov	r1, r9
 8003922:	f000 fe02 	bl	800452a <finite>
 8003926:	2800      	cmp	r0, #0
 8003928:	d0ed      	beq.n	8003906 <pow+0x96>
 800392a:	4620      	mov	r0, r4
 800392c:	4629      	mov	r1, r5
 800392e:	f000 fdfc 	bl	800452a <finite>
 8003932:	e7c8      	b.n	80038c6 <pow+0x56>
 8003934:	2600      	movs	r6, #0
 8003936:	4f01      	ldr	r7, [pc, #4]	; (800393c <pow+0xcc>)
 8003938:	e7e5      	b.n	8003906 <pow+0x96>
 800393a:	bf00      	nop
 800393c:	3ff00000 	.word	0x3ff00000

08003940 <__ieee754_pow>:
 8003940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003944:	b093      	sub	sp, #76	; 0x4c
 8003946:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800394a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800394e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8003952:	4689      	mov	r9, r1
 8003954:	ea56 0102 	orrs.w	r1, r6, r2
 8003958:	4680      	mov	r8, r0
 800395a:	d111      	bne.n	8003980 <__ieee754_pow+0x40>
 800395c:	1803      	adds	r3, r0, r0
 800395e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8003962:	4152      	adcs	r2, r2
 8003964:	4299      	cmp	r1, r3
 8003966:	4b82      	ldr	r3, [pc, #520]	; (8003b70 <__ieee754_pow+0x230>)
 8003968:	4193      	sbcs	r3, r2
 800396a:	f080 84b9 	bcs.w	80042e0 <__ieee754_pow+0x9a0>
 800396e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003972:	4640      	mov	r0, r8
 8003974:	4649      	mov	r1, r9
 8003976:	f7fc fbf1 	bl	800015c <__adddf3>
 800397a:	4683      	mov	fp, r0
 800397c:	468c      	mov	ip, r1
 800397e:	e06f      	b.n	8003a60 <__ieee754_pow+0x120>
 8003980:	4b7c      	ldr	r3, [pc, #496]	; (8003b74 <__ieee754_pow+0x234>)
 8003982:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8003986:	429c      	cmp	r4, r3
 8003988:	464d      	mov	r5, r9
 800398a:	4682      	mov	sl, r0
 800398c:	dc06      	bgt.n	800399c <__ieee754_pow+0x5c>
 800398e:	d101      	bne.n	8003994 <__ieee754_pow+0x54>
 8003990:	2800      	cmp	r0, #0
 8003992:	d1ec      	bne.n	800396e <__ieee754_pow+0x2e>
 8003994:	429e      	cmp	r6, r3
 8003996:	dc01      	bgt.n	800399c <__ieee754_pow+0x5c>
 8003998:	d10f      	bne.n	80039ba <__ieee754_pow+0x7a>
 800399a:	b172      	cbz	r2, 80039ba <__ieee754_pow+0x7a>
 800399c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80039a0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80039a4:	ea55 050a 	orrs.w	r5, r5, sl
 80039a8:	d1e1      	bne.n	800396e <__ieee754_pow+0x2e>
 80039aa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80039ae:	18db      	adds	r3, r3, r3
 80039b0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80039b4:	4152      	adcs	r2, r2
 80039b6:	429d      	cmp	r5, r3
 80039b8:	e7d5      	b.n	8003966 <__ieee754_pow+0x26>
 80039ba:	2d00      	cmp	r5, #0
 80039bc:	da39      	bge.n	8003a32 <__ieee754_pow+0xf2>
 80039be:	4b6e      	ldr	r3, [pc, #440]	; (8003b78 <__ieee754_pow+0x238>)
 80039c0:	429e      	cmp	r6, r3
 80039c2:	dc52      	bgt.n	8003a6a <__ieee754_pow+0x12a>
 80039c4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80039c8:	429e      	cmp	r6, r3
 80039ca:	f340 849c 	ble.w	8004306 <__ieee754_pow+0x9c6>
 80039ce:	1533      	asrs	r3, r6, #20
 80039d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80039d4:	2b14      	cmp	r3, #20
 80039d6:	dd0f      	ble.n	80039f8 <__ieee754_pow+0xb8>
 80039d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80039dc:	fa22 f103 	lsr.w	r1, r2, r3
 80039e0:	fa01 f303 	lsl.w	r3, r1, r3
 80039e4:	4293      	cmp	r3, r2
 80039e6:	f040 848e 	bne.w	8004306 <__ieee754_pow+0x9c6>
 80039ea:	f001 0101 	and.w	r1, r1, #1
 80039ee:	f1c1 0302 	rsb	r3, r1, #2
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	b182      	cbz	r2, 8003a18 <__ieee754_pow+0xd8>
 80039f6:	e05d      	b.n	8003ab4 <__ieee754_pow+0x174>
 80039f8:	2a00      	cmp	r2, #0
 80039fa:	d159      	bne.n	8003ab0 <__ieee754_pow+0x170>
 80039fc:	f1c3 0314 	rsb	r3, r3, #20
 8003a00:	fa46 f103 	asr.w	r1, r6, r3
 8003a04:	fa01 f303 	lsl.w	r3, r1, r3
 8003a08:	42b3      	cmp	r3, r6
 8003a0a:	f040 8479 	bne.w	8004300 <__ieee754_pow+0x9c0>
 8003a0e:	f001 0101 	and.w	r1, r1, #1
 8003a12:	f1c1 0302 	rsb	r3, r1, #2
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	4b58      	ldr	r3, [pc, #352]	; (8003b7c <__ieee754_pow+0x23c>)
 8003a1a:	429e      	cmp	r6, r3
 8003a1c:	d132      	bne.n	8003a84 <__ieee754_pow+0x144>
 8003a1e:	2f00      	cmp	r7, #0
 8003a20:	f280 846a 	bge.w	80042f8 <__ieee754_pow+0x9b8>
 8003a24:	4642      	mov	r2, r8
 8003a26:	464b      	mov	r3, r9
 8003a28:	2000      	movs	r0, #0
 8003a2a:	4954      	ldr	r1, [pc, #336]	; (8003b7c <__ieee754_pow+0x23c>)
 8003a2c:	f7fc fe76 	bl	800071c <__aeabi_ddiv>
 8003a30:	e7a3      	b.n	800397a <__ieee754_pow+0x3a>
 8003a32:	2300      	movs	r3, #0
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	2a00      	cmp	r2, #0
 8003a38:	d13c      	bne.n	8003ab4 <__ieee754_pow+0x174>
 8003a3a:	4b4e      	ldr	r3, [pc, #312]	; (8003b74 <__ieee754_pow+0x234>)
 8003a3c:	429e      	cmp	r6, r3
 8003a3e:	d1eb      	bne.n	8003a18 <__ieee754_pow+0xd8>
 8003a40:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003a44:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003a48:	ea53 030a 	orrs.w	r3, r3, sl
 8003a4c:	f000 8448 	beq.w	80042e0 <__ieee754_pow+0x9a0>
 8003a50:	4b4b      	ldr	r3, [pc, #300]	; (8003b80 <__ieee754_pow+0x240>)
 8003a52:	429c      	cmp	r4, r3
 8003a54:	dd0b      	ble.n	8003a6e <__ieee754_pow+0x12e>
 8003a56:	2f00      	cmp	r7, #0
 8003a58:	f2c0 8448 	blt.w	80042ec <__ieee754_pow+0x9ac>
 8003a5c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8003a60:	4658      	mov	r0, fp
 8003a62:	4661      	mov	r1, ip
 8003a64:	b013      	add	sp, #76	; 0x4c
 8003a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e7e2      	b.n	8003a34 <__ieee754_pow+0xf4>
 8003a6e:	2f00      	cmp	r7, #0
 8003a70:	f04f 0b00 	mov.w	fp, #0
 8003a74:	f04f 0c00 	mov.w	ip, #0
 8003a78:	daf2      	bge.n	8003a60 <__ieee754_pow+0x120>
 8003a7a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003a7e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003a82:	e7ed      	b.n	8003a60 <__ieee754_pow+0x120>
 8003a84:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8003a88:	d106      	bne.n	8003a98 <__ieee754_pow+0x158>
 8003a8a:	4642      	mov	r2, r8
 8003a8c:	464b      	mov	r3, r9
 8003a8e:	4640      	mov	r0, r8
 8003a90:	4649      	mov	r1, r9
 8003a92:	f7fc fd19 	bl	80004c8 <__aeabi_dmul>
 8003a96:	e770      	b.n	800397a <__ieee754_pow+0x3a>
 8003a98:	4b3a      	ldr	r3, [pc, #232]	; (8003b84 <__ieee754_pow+0x244>)
 8003a9a:	429f      	cmp	r7, r3
 8003a9c:	d10a      	bne.n	8003ab4 <__ieee754_pow+0x174>
 8003a9e:	2d00      	cmp	r5, #0
 8003aa0:	db08      	blt.n	8003ab4 <__ieee754_pow+0x174>
 8003aa2:	4640      	mov	r0, r8
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	b013      	add	sp, #76	; 0x4c
 8003aa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aac:	f000 bc5e 	b.w	800436c <__ieee754_sqrt>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	4640      	mov	r0, r8
 8003ab6:	4649      	mov	r1, r9
 8003ab8:	f000 fd34 	bl	8004524 <fabs>
 8003abc:	4683      	mov	fp, r0
 8003abe:	468c      	mov	ip, r1
 8003ac0:	f1ba 0f00 	cmp.w	sl, #0
 8003ac4:	d128      	bne.n	8003b18 <__ieee754_pow+0x1d8>
 8003ac6:	b124      	cbz	r4, 8003ad2 <__ieee754_pow+0x192>
 8003ac8:	4b2c      	ldr	r3, [pc, #176]	; (8003b7c <__ieee754_pow+0x23c>)
 8003aca:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d122      	bne.n	8003b18 <__ieee754_pow+0x1d8>
 8003ad2:	2f00      	cmp	r7, #0
 8003ad4:	da07      	bge.n	8003ae6 <__ieee754_pow+0x1a6>
 8003ad6:	465a      	mov	r2, fp
 8003ad8:	4663      	mov	r3, ip
 8003ada:	2000      	movs	r0, #0
 8003adc:	4927      	ldr	r1, [pc, #156]	; (8003b7c <__ieee754_pow+0x23c>)
 8003ade:	f7fc fe1d 	bl	800071c <__aeabi_ddiv>
 8003ae2:	4683      	mov	fp, r0
 8003ae4:	468c      	mov	ip, r1
 8003ae6:	2d00      	cmp	r5, #0
 8003ae8:	daba      	bge.n	8003a60 <__ieee754_pow+0x120>
 8003aea:	9b00      	ldr	r3, [sp, #0]
 8003aec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003af0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003af4:	4323      	orrs	r3, r4
 8003af6:	d108      	bne.n	8003b0a <__ieee754_pow+0x1ca>
 8003af8:	465a      	mov	r2, fp
 8003afa:	4663      	mov	r3, ip
 8003afc:	4658      	mov	r0, fp
 8003afe:	4661      	mov	r1, ip
 8003b00:	f7fc fb2a 	bl	8000158 <__aeabi_dsub>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	e790      	b.n	8003a2c <__ieee754_pow+0xec>
 8003b0a:	9b00      	ldr	r3, [sp, #0]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d1a7      	bne.n	8003a60 <__ieee754_pow+0x120>
 8003b10:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8003b14:	469c      	mov	ip, r3
 8003b16:	e7a3      	b.n	8003a60 <__ieee754_pow+0x120>
 8003b18:	0feb      	lsrs	r3, r5, #31
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	930c      	str	r3, [sp, #48]	; 0x30
 8003b1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b20:	9b00      	ldr	r3, [sp, #0]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	d104      	bne.n	8003b30 <__ieee754_pow+0x1f0>
 8003b26:	4642      	mov	r2, r8
 8003b28:	464b      	mov	r3, r9
 8003b2a:	4640      	mov	r0, r8
 8003b2c:	4649      	mov	r1, r9
 8003b2e:	e7e7      	b.n	8003b00 <__ieee754_pow+0x1c0>
 8003b30:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <__ieee754_pow+0x248>)
 8003b32:	429e      	cmp	r6, r3
 8003b34:	f340 80f6 	ble.w	8003d24 <__ieee754_pow+0x3e4>
 8003b38:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003b3c:	429e      	cmp	r6, r3
 8003b3e:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <__ieee754_pow+0x240>)
 8003b40:	dd09      	ble.n	8003b56 <__ieee754_pow+0x216>
 8003b42:	429c      	cmp	r4, r3
 8003b44:	dc0c      	bgt.n	8003b60 <__ieee754_pow+0x220>
 8003b46:	2f00      	cmp	r7, #0
 8003b48:	da0c      	bge.n	8003b64 <__ieee754_pow+0x224>
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	b013      	add	sp, #76	; 0x4c
 8003b4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b52:	f000 bce2 	b.w	800451a <__math_oflow>
 8003b56:	429c      	cmp	r4, r3
 8003b58:	dbf5      	blt.n	8003b46 <__ieee754_pow+0x206>
 8003b5a:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <__ieee754_pow+0x23c>)
 8003b5c:	429c      	cmp	r4, r3
 8003b5e:	dd15      	ble.n	8003b8c <__ieee754_pow+0x24c>
 8003b60:	2f00      	cmp	r7, #0
 8003b62:	dcf2      	bgt.n	8003b4a <__ieee754_pow+0x20a>
 8003b64:	2000      	movs	r0, #0
 8003b66:	b013      	add	sp, #76	; 0x4c
 8003b68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b6c:	f000 bcd0 	b.w	8004510 <__math_uflow>
 8003b70:	fff00000 	.word	0xfff00000
 8003b74:	7ff00000 	.word	0x7ff00000
 8003b78:	433fffff 	.word	0x433fffff
 8003b7c:	3ff00000 	.word	0x3ff00000
 8003b80:	3fefffff 	.word	0x3fefffff
 8003b84:	3fe00000 	.word	0x3fe00000
 8003b88:	41e00000 	.word	0x41e00000
 8003b8c:	4661      	mov	r1, ip
 8003b8e:	2200      	movs	r2, #0
 8003b90:	4658      	mov	r0, fp
 8003b92:	4b5f      	ldr	r3, [pc, #380]	; (8003d10 <__ieee754_pow+0x3d0>)
 8003b94:	f7fc fae0 	bl	8000158 <__aeabi_dsub>
 8003b98:	a355      	add	r3, pc, #340	; (adr r3, 8003cf0 <__ieee754_pow+0x3b0>)
 8003b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	460d      	mov	r5, r1
 8003ba2:	f7fc fc91 	bl	80004c8 <__aeabi_dmul>
 8003ba6:	a354      	add	r3, pc, #336	; (adr r3, 8003cf8 <__ieee754_pow+0x3b8>)
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	4606      	mov	r6, r0
 8003bae:	460f      	mov	r7, r1
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	f7fc fc88 	bl	80004c8 <__aeabi_dmul>
 8003bb8:	2200      	movs	r2, #0
 8003bba:	4682      	mov	sl, r0
 8003bbc:	468b      	mov	fp, r1
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	4b54      	ldr	r3, [pc, #336]	; (8003d14 <__ieee754_pow+0x3d4>)
 8003bc4:	f7fc fc80 	bl	80004c8 <__aeabi_dmul>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	a14c      	add	r1, pc, #304	; (adr r1, 8003d00 <__ieee754_pow+0x3c0>)
 8003bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bd2:	f7fc fac1 	bl	8000158 <__aeabi_dsub>
 8003bd6:	4622      	mov	r2, r4
 8003bd8:	462b      	mov	r3, r5
 8003bda:	f7fc fc75 	bl	80004c8 <__aeabi_dmul>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	2000      	movs	r0, #0
 8003be4:	494c      	ldr	r1, [pc, #304]	; (8003d18 <__ieee754_pow+0x3d8>)
 8003be6:	f7fc fab7 	bl	8000158 <__aeabi_dsub>
 8003bea:	4622      	mov	r2, r4
 8003bec:	462b      	mov	r3, r5
 8003bee:	4680      	mov	r8, r0
 8003bf0:	4689      	mov	r9, r1
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	f7fc fc67 	bl	80004c8 <__aeabi_dmul>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4640      	mov	r0, r8
 8003c00:	4649      	mov	r1, r9
 8003c02:	f7fc fc61 	bl	80004c8 <__aeabi_dmul>
 8003c06:	a340      	add	r3, pc, #256	; (adr r3, 8003d08 <__ieee754_pow+0x3c8>)
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	f7fc fc5c 	bl	80004c8 <__aeabi_dmul>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4650      	mov	r0, sl
 8003c16:	4659      	mov	r1, fp
 8003c18:	f7fc fa9e 	bl	8000158 <__aeabi_dsub>
 8003c1c:	f04f 0a00 	mov.w	sl, #0
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4604      	mov	r4, r0
 8003c26:	460d      	mov	r5, r1
 8003c28:	4630      	mov	r0, r6
 8003c2a:	4639      	mov	r1, r7
 8003c2c:	f7fc fa96 	bl	800015c <__adddf3>
 8003c30:	4632      	mov	r2, r6
 8003c32:	463b      	mov	r3, r7
 8003c34:	4650      	mov	r0, sl
 8003c36:	468b      	mov	fp, r1
 8003c38:	f7fc fa8e 	bl	8000158 <__aeabi_dsub>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4620      	mov	r0, r4
 8003c42:	4629      	mov	r1, r5
 8003c44:	f7fc fa88 	bl	8000158 <__aeabi_dsub>
 8003c48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003c4c:	9b00      	ldr	r3, [sp, #0]
 8003c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c50:	3b01      	subs	r3, #1
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f04f 0600 	mov.w	r6, #0
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	bf0c      	ite	eq
 8003c5e:	4b2f      	ldreq	r3, [pc, #188]	; (8003d1c <__ieee754_pow+0x3dc>)
 8003c60:	4b2b      	ldrne	r3, [pc, #172]	; (8003d10 <__ieee754_pow+0x3d0>)
 8003c62:	4604      	mov	r4, r0
 8003c64:	460d      	mov	r5, r1
 8003c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c6a:	e9cd 2300 	strd	r2, r3, [sp]
 8003c6e:	4632      	mov	r2, r6
 8003c70:	463b      	mov	r3, r7
 8003c72:	f7fc fa71 	bl	8000158 <__aeabi_dsub>
 8003c76:	4652      	mov	r2, sl
 8003c78:	465b      	mov	r3, fp
 8003c7a:	f7fc fc25 	bl	80004c8 <__aeabi_dmul>
 8003c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c82:	4680      	mov	r8, r0
 8003c84:	4689      	mov	r9, r1
 8003c86:	4620      	mov	r0, r4
 8003c88:	4629      	mov	r1, r5
 8003c8a:	f7fc fc1d 	bl	80004c8 <__aeabi_dmul>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4640      	mov	r0, r8
 8003c94:	4649      	mov	r1, r9
 8003c96:	f7fc fa61 	bl	800015c <__adddf3>
 8003c9a:	4632      	mov	r2, r6
 8003c9c:	463b      	mov	r3, r7
 8003c9e:	4680      	mov	r8, r0
 8003ca0:	4689      	mov	r9, r1
 8003ca2:	4650      	mov	r0, sl
 8003ca4:	4659      	mov	r1, fp
 8003ca6:	f7fc fc0f 	bl	80004c8 <__aeabi_dmul>
 8003caa:	4604      	mov	r4, r0
 8003cac:	460d      	mov	r5, r1
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	4649      	mov	r1, r9
 8003cb4:	4640      	mov	r0, r8
 8003cb6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003cba:	f7fc fa4f 	bl	800015c <__adddf3>
 8003cbe:	4b18      	ldr	r3, [pc, #96]	; (8003d20 <__ieee754_pow+0x3e0>)
 8003cc0:	4682      	mov	sl, r0
 8003cc2:	4299      	cmp	r1, r3
 8003cc4:	460f      	mov	r7, r1
 8003cc6:	460e      	mov	r6, r1
 8003cc8:	f340 82e5 	ble.w	8004296 <__ieee754_pow+0x956>
 8003ccc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003cd0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003cd4:	4303      	orrs	r3, r0
 8003cd6:	f000 81df 	beq.w	8004098 <__ieee754_pow+0x758>
 8003cda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f7fc fe63 	bl	80009ac <__aeabi_dcmplt>
 8003ce6:	3800      	subs	r0, #0
 8003ce8:	bf18      	it	ne
 8003cea:	2001      	movne	r0, #1
 8003cec:	e72e      	b.n	8003b4c <__ieee754_pow+0x20c>
 8003cee:	bf00      	nop
 8003cf0:	60000000 	.word	0x60000000
 8003cf4:	3ff71547 	.word	0x3ff71547
 8003cf8:	f85ddf44 	.word	0xf85ddf44
 8003cfc:	3e54ae0b 	.word	0x3e54ae0b
 8003d00:	55555555 	.word	0x55555555
 8003d04:	3fd55555 	.word	0x3fd55555
 8003d08:	652b82fe 	.word	0x652b82fe
 8003d0c:	3ff71547 	.word	0x3ff71547
 8003d10:	3ff00000 	.word	0x3ff00000
 8003d14:	3fd00000 	.word	0x3fd00000
 8003d18:	3fe00000 	.word	0x3fe00000
 8003d1c:	bff00000 	.word	0xbff00000
 8003d20:	408fffff 	.word	0x408fffff
 8003d24:	4bd2      	ldr	r3, [pc, #840]	; (8004070 <__ieee754_pow+0x730>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	402b      	ands	r3, r5
 8003d2a:	b943      	cbnz	r3, 8003d3e <__ieee754_pow+0x3fe>
 8003d2c:	4658      	mov	r0, fp
 8003d2e:	4661      	mov	r1, ip
 8003d30:	4bd0      	ldr	r3, [pc, #832]	; (8004074 <__ieee754_pow+0x734>)
 8003d32:	f7fc fbc9 	bl	80004c8 <__aeabi_dmul>
 8003d36:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003d3a:	4683      	mov	fp, r0
 8003d3c:	460c      	mov	r4, r1
 8003d3e:	1523      	asrs	r3, r4, #20
 8003d40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003d44:	4413      	add	r3, r2
 8003d46:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d48:	4bcb      	ldr	r3, [pc, #812]	; (8004078 <__ieee754_pow+0x738>)
 8003d4a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003d4e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003d52:	429c      	cmp	r4, r3
 8003d54:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003d58:	dd08      	ble.n	8003d6c <__ieee754_pow+0x42c>
 8003d5a:	4bc8      	ldr	r3, [pc, #800]	; (800407c <__ieee754_pow+0x73c>)
 8003d5c:	429c      	cmp	r4, r3
 8003d5e:	f340 8199 	ble.w	8004094 <__ieee754_pow+0x754>
 8003d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d64:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003d68:	3301      	adds	r3, #1
 8003d6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d6c:	2600      	movs	r6, #0
 8003d6e:	00f3      	lsls	r3, r6, #3
 8003d70:	930d      	str	r3, [sp, #52]	; 0x34
 8003d72:	4bc3      	ldr	r3, [pc, #780]	; (8004080 <__ieee754_pow+0x740>)
 8003d74:	4658      	mov	r0, fp
 8003d76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003d7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d7e:	4629      	mov	r1, r5
 8003d80:	461a      	mov	r2, r3
 8003d82:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8003d86:	4623      	mov	r3, r4
 8003d88:	f7fc f9e6 	bl	8000158 <__aeabi_dsub>
 8003d8c:	46da      	mov	sl, fp
 8003d8e:	462b      	mov	r3, r5
 8003d90:	4652      	mov	r2, sl
 8003d92:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003d96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003d9a:	f7fc f9df 	bl	800015c <__adddf3>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	2000      	movs	r0, #0
 8003da4:	49b7      	ldr	r1, [pc, #732]	; (8004084 <__ieee754_pow+0x744>)
 8003da6:	f7fc fcb9 	bl	800071c <__aeabi_ddiv>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003db2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003db6:	f7fc fb87 	bl	80004c8 <__aeabi_dmul>
 8003dba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003dbe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8003dc2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	2200      	movs	r2, #0
 8003dca:	46ab      	mov	fp, r5
 8003dcc:	106d      	asrs	r5, r5, #1
 8003dce:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003dd2:	9304      	str	r3, [sp, #16]
 8003dd4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003dd8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003ddc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8003de0:	4640      	mov	r0, r8
 8003de2:	4649      	mov	r1, r9
 8003de4:	4614      	mov	r4, r2
 8003de6:	461d      	mov	r5, r3
 8003de8:	f7fc fb6e 	bl	80004c8 <__aeabi_dmul>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003df4:	f7fc f9b0 	bl	8000158 <__aeabi_dsub>
 8003df8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003dfc:	4606      	mov	r6, r0
 8003dfe:	460f      	mov	r7, r1
 8003e00:	4620      	mov	r0, r4
 8003e02:	4629      	mov	r1, r5
 8003e04:	f7fc f9a8 	bl	8000158 <__aeabi_dsub>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4650      	mov	r0, sl
 8003e0e:	4659      	mov	r1, fp
 8003e10:	f7fc f9a2 	bl	8000158 <__aeabi_dsub>
 8003e14:	4642      	mov	r2, r8
 8003e16:	464b      	mov	r3, r9
 8003e18:	f7fc fb56 	bl	80004c8 <__aeabi_dmul>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4630      	mov	r0, r6
 8003e22:	4639      	mov	r1, r7
 8003e24:	f7fc f998 	bl	8000158 <__aeabi_dsub>
 8003e28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003e2c:	f7fc fb4c 	bl	80004c8 <__aeabi_dmul>
 8003e30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003e34:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003e38:	4610      	mov	r0, r2
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	f7fc fb44 	bl	80004c8 <__aeabi_dmul>
 8003e40:	a379      	add	r3, pc, #484	; (adr r3, 8004028 <__ieee754_pow+0x6e8>)
 8003e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e46:	4604      	mov	r4, r0
 8003e48:	460d      	mov	r5, r1
 8003e4a:	f7fc fb3d 	bl	80004c8 <__aeabi_dmul>
 8003e4e:	a378      	add	r3, pc, #480	; (adr r3, 8004030 <__ieee754_pow+0x6f0>)
 8003e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e54:	f7fc f982 	bl	800015c <__adddf3>
 8003e58:	4622      	mov	r2, r4
 8003e5a:	462b      	mov	r3, r5
 8003e5c:	f7fc fb34 	bl	80004c8 <__aeabi_dmul>
 8003e60:	a375      	add	r3, pc, #468	; (adr r3, 8004038 <__ieee754_pow+0x6f8>)
 8003e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e66:	f7fc f979 	bl	800015c <__adddf3>
 8003e6a:	4622      	mov	r2, r4
 8003e6c:	462b      	mov	r3, r5
 8003e6e:	f7fc fb2b 	bl	80004c8 <__aeabi_dmul>
 8003e72:	a373      	add	r3, pc, #460	; (adr r3, 8004040 <__ieee754_pow+0x700>)
 8003e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e78:	f7fc f970 	bl	800015c <__adddf3>
 8003e7c:	4622      	mov	r2, r4
 8003e7e:	462b      	mov	r3, r5
 8003e80:	f7fc fb22 	bl	80004c8 <__aeabi_dmul>
 8003e84:	a370      	add	r3, pc, #448	; (adr r3, 8004048 <__ieee754_pow+0x708>)
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	f7fc f967 	bl	800015c <__adddf3>
 8003e8e:	4622      	mov	r2, r4
 8003e90:	462b      	mov	r3, r5
 8003e92:	f7fc fb19 	bl	80004c8 <__aeabi_dmul>
 8003e96:	a36e      	add	r3, pc, #440	; (adr r3, 8004050 <__ieee754_pow+0x710>)
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	f7fc f95e 	bl	800015c <__adddf3>
 8003ea0:	4622      	mov	r2, r4
 8003ea2:	4606      	mov	r6, r0
 8003ea4:	460f      	mov	r7, r1
 8003ea6:	462b      	mov	r3, r5
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	4629      	mov	r1, r5
 8003eac:	f7fc fb0c 	bl	80004c8 <__aeabi_dmul>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	4639      	mov	r1, r7
 8003eb8:	f7fc fb06 	bl	80004c8 <__aeabi_dmul>
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	460d      	mov	r5, r1
 8003ec0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ec4:	4642      	mov	r2, r8
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	f7fc f948 	bl	800015c <__adddf3>
 8003ecc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ed0:	f7fc fafa 	bl	80004c8 <__aeabi_dmul>
 8003ed4:	4622      	mov	r2, r4
 8003ed6:	462b      	mov	r3, r5
 8003ed8:	f7fc f940 	bl	800015c <__adddf3>
 8003edc:	4642      	mov	r2, r8
 8003ede:	4606      	mov	r6, r0
 8003ee0:	460f      	mov	r7, r1
 8003ee2:	464b      	mov	r3, r9
 8003ee4:	4640      	mov	r0, r8
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	f7fc faee 	bl	80004c8 <__aeabi_dmul>
 8003eec:	2200      	movs	r2, #0
 8003eee:	4b66      	ldr	r3, [pc, #408]	; (8004088 <__ieee754_pow+0x748>)
 8003ef0:	4682      	mov	sl, r0
 8003ef2:	468b      	mov	fp, r1
 8003ef4:	f7fc f932 	bl	800015c <__adddf3>
 8003ef8:	4632      	mov	r2, r6
 8003efa:	463b      	mov	r3, r7
 8003efc:	f7fc f92e 	bl	800015c <__adddf3>
 8003f00:	2400      	movs	r4, #0
 8003f02:	460d      	mov	r5, r1
 8003f04:	4622      	mov	r2, r4
 8003f06:	460b      	mov	r3, r1
 8003f08:	4640      	mov	r0, r8
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	f7fc fadc 	bl	80004c8 <__aeabi_dmul>
 8003f10:	2200      	movs	r2, #0
 8003f12:	4680      	mov	r8, r0
 8003f14:	4689      	mov	r9, r1
 8003f16:	4620      	mov	r0, r4
 8003f18:	4629      	mov	r1, r5
 8003f1a:	4b5b      	ldr	r3, [pc, #364]	; (8004088 <__ieee754_pow+0x748>)
 8003f1c:	f7fc f91c 	bl	8000158 <__aeabi_dsub>
 8003f20:	4652      	mov	r2, sl
 8003f22:	465b      	mov	r3, fp
 8003f24:	f7fc f918 	bl	8000158 <__aeabi_dsub>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4630      	mov	r0, r6
 8003f2e:	4639      	mov	r1, r7
 8003f30:	f7fc f912 	bl	8000158 <__aeabi_dsub>
 8003f34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f38:	f7fc fac6 	bl	80004c8 <__aeabi_dmul>
 8003f3c:	4622      	mov	r2, r4
 8003f3e:	4606      	mov	r6, r0
 8003f40:	460f      	mov	r7, r1
 8003f42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003f46:	462b      	mov	r3, r5
 8003f48:	f7fc fabe 	bl	80004c8 <__aeabi_dmul>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4630      	mov	r0, r6
 8003f52:	4639      	mov	r1, r7
 8003f54:	f7fc f902 	bl	800015c <__adddf3>
 8003f58:	2400      	movs	r4, #0
 8003f5a:	4606      	mov	r6, r0
 8003f5c:	460f      	mov	r7, r1
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4640      	mov	r0, r8
 8003f64:	4649      	mov	r1, r9
 8003f66:	f7fc f8f9 	bl	800015c <__adddf3>
 8003f6a:	a33b      	add	r3, pc, #236	; (adr r3, 8004058 <__ieee754_pow+0x718>)
 8003f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f70:	4620      	mov	r0, r4
 8003f72:	460d      	mov	r5, r1
 8003f74:	f7fc faa8 	bl	80004c8 <__aeabi_dmul>
 8003f78:	4642      	mov	r2, r8
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003f80:	4620      	mov	r0, r4
 8003f82:	4629      	mov	r1, r5
 8003f84:	f7fc f8e8 	bl	8000158 <__aeabi_dsub>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	4639      	mov	r1, r7
 8003f90:	f7fc f8e2 	bl	8000158 <__aeabi_dsub>
 8003f94:	a332      	add	r3, pc, #200	; (adr r3, 8004060 <__ieee754_pow+0x720>)
 8003f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9a:	f7fc fa95 	bl	80004c8 <__aeabi_dmul>
 8003f9e:	a332      	add	r3, pc, #200	; (adr r3, 8004068 <__ieee754_pow+0x728>)
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	4606      	mov	r6, r0
 8003fa6:	460f      	mov	r7, r1
 8003fa8:	4620      	mov	r0, r4
 8003faa:	4629      	mov	r1, r5
 8003fac:	f7fc fa8c 	bl	80004c8 <__aeabi_dmul>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4630      	mov	r0, r6
 8003fb6:	4639      	mov	r1, r7
 8003fb8:	f7fc f8d0 	bl	800015c <__adddf3>
 8003fbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003fbe:	4b33      	ldr	r3, [pc, #204]	; (800408c <__ieee754_pow+0x74c>)
 8003fc0:	f04f 0a00 	mov.w	sl, #0
 8003fc4:	4413      	add	r3, r2
 8003fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fca:	f7fc f8c7 	bl	800015c <__adddf3>
 8003fce:	4680      	mov	r8, r0
 8003fd0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003fd2:	4689      	mov	r9, r1
 8003fd4:	f7fc fa0e 	bl	80003f4 <__aeabi_i2d>
 8003fd8:	4604      	mov	r4, r0
 8003fda:	460d      	mov	r5, r1
 8003fdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003fde:	4b2c      	ldr	r3, [pc, #176]	; (8004090 <__ieee754_pow+0x750>)
 8003fe0:	4413      	add	r3, r2
 8003fe2:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003fe6:	4642      	mov	r2, r8
 8003fe8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fec:	464b      	mov	r3, r9
 8003fee:	f7fc f8b5 	bl	800015c <__adddf3>
 8003ff2:	4632      	mov	r2, r6
 8003ff4:	463b      	mov	r3, r7
 8003ff6:	f7fc f8b1 	bl	800015c <__adddf3>
 8003ffa:	4622      	mov	r2, r4
 8003ffc:	462b      	mov	r3, r5
 8003ffe:	f7fc f8ad 	bl	800015c <__adddf3>
 8004002:	4622      	mov	r2, r4
 8004004:	462b      	mov	r3, r5
 8004006:	4650      	mov	r0, sl
 8004008:	468b      	mov	fp, r1
 800400a:	f7fc f8a5 	bl	8000158 <__aeabi_dsub>
 800400e:	4632      	mov	r2, r6
 8004010:	463b      	mov	r3, r7
 8004012:	f7fc f8a1 	bl	8000158 <__aeabi_dsub>
 8004016:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800401a:	f7fc f89d 	bl	8000158 <__aeabi_dsub>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4640      	mov	r0, r8
 8004024:	4649      	mov	r1, r9
 8004026:	e60d      	b.n	8003c44 <__ieee754_pow+0x304>
 8004028:	4a454eef 	.word	0x4a454eef
 800402c:	3fca7e28 	.word	0x3fca7e28
 8004030:	93c9db65 	.word	0x93c9db65
 8004034:	3fcd864a 	.word	0x3fcd864a
 8004038:	a91d4101 	.word	0xa91d4101
 800403c:	3fd17460 	.word	0x3fd17460
 8004040:	518f264d 	.word	0x518f264d
 8004044:	3fd55555 	.word	0x3fd55555
 8004048:	db6fabff 	.word	0xdb6fabff
 800404c:	3fdb6db6 	.word	0x3fdb6db6
 8004050:	33333303 	.word	0x33333303
 8004054:	3fe33333 	.word	0x3fe33333
 8004058:	e0000000 	.word	0xe0000000
 800405c:	3feec709 	.word	0x3feec709
 8004060:	dc3a03fd 	.word	0xdc3a03fd
 8004064:	3feec709 	.word	0x3feec709
 8004068:	145b01f5 	.word	0x145b01f5
 800406c:	be3e2fe0 	.word	0xbe3e2fe0
 8004070:	7ff00000 	.word	0x7ff00000
 8004074:	43400000 	.word	0x43400000
 8004078:	0003988e 	.word	0x0003988e
 800407c:	000bb679 	.word	0x000bb679
 8004080:	080046a8 	.word	0x080046a8
 8004084:	3ff00000 	.word	0x3ff00000
 8004088:	40080000 	.word	0x40080000
 800408c:	080046c8 	.word	0x080046c8
 8004090:	080046b8 	.word	0x080046b8
 8004094:	2601      	movs	r6, #1
 8004096:	e66a      	b.n	8003d6e <__ieee754_pow+0x42e>
 8004098:	a39d      	add	r3, pc, #628	; (adr r3, 8004310 <__ieee754_pow+0x9d0>)
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	4640      	mov	r0, r8
 80040a0:	4649      	mov	r1, r9
 80040a2:	f7fc f85b 	bl	800015c <__adddf3>
 80040a6:	4622      	mov	r2, r4
 80040a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040ac:	462b      	mov	r3, r5
 80040ae:	4650      	mov	r0, sl
 80040b0:	4639      	mov	r1, r7
 80040b2:	f7fc f851 	bl	8000158 <__aeabi_dsub>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040be:	f7fc fc93 	bl	80009e8 <__aeabi_dcmpgt>
 80040c2:	2800      	cmp	r0, #0
 80040c4:	f47f ae09 	bne.w	8003cda <__ieee754_pow+0x39a>
 80040c8:	4aa3      	ldr	r2, [pc, #652]	; (8004358 <__ieee754_pow+0xa18>)
 80040ca:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80040ce:	4293      	cmp	r3, r2
 80040d0:	f340 8101 	ble.w	80042d6 <__ieee754_pow+0x996>
 80040d4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80040d8:	2000      	movs	r0, #0
 80040da:	151b      	asrs	r3, r3, #20
 80040dc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80040e0:	fa4a f303 	asr.w	r3, sl, r3
 80040e4:	4433      	add	r3, r6
 80040e6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80040ea:	4f9c      	ldr	r7, [pc, #624]	; (800435c <__ieee754_pow+0xa1c>)
 80040ec:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80040f0:	4117      	asrs	r7, r2
 80040f2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80040f6:	ea23 0107 	bic.w	r1, r3, r7
 80040fa:	f1c2 0214 	rsb	r2, r2, #20
 80040fe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004102:	460b      	mov	r3, r1
 8004104:	fa4a fa02 	asr.w	sl, sl, r2
 8004108:	2e00      	cmp	r6, #0
 800410a:	4602      	mov	r2, r0
 800410c:	4629      	mov	r1, r5
 800410e:	4620      	mov	r0, r4
 8004110:	bfb8      	it	lt
 8004112:	f1ca 0a00 	rsblt	sl, sl, #0
 8004116:	f7fc f81f 	bl	8000158 <__aeabi_dsub>
 800411a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800411e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004122:	2400      	movs	r4, #0
 8004124:	4642      	mov	r2, r8
 8004126:	464b      	mov	r3, r9
 8004128:	f7fc f818 	bl	800015c <__adddf3>
 800412c:	a37a      	add	r3, pc, #488	; (adr r3, 8004318 <__ieee754_pow+0x9d8>)
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	4620      	mov	r0, r4
 8004134:	460d      	mov	r5, r1
 8004136:	f7fc f9c7 	bl	80004c8 <__aeabi_dmul>
 800413a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800413e:	4606      	mov	r6, r0
 8004140:	460f      	mov	r7, r1
 8004142:	4620      	mov	r0, r4
 8004144:	4629      	mov	r1, r5
 8004146:	f7fc f807 	bl	8000158 <__aeabi_dsub>
 800414a:	4602      	mov	r2, r0
 800414c:	460b      	mov	r3, r1
 800414e:	4640      	mov	r0, r8
 8004150:	4649      	mov	r1, r9
 8004152:	f7fc f801 	bl	8000158 <__aeabi_dsub>
 8004156:	a372      	add	r3, pc, #456	; (adr r3, 8004320 <__ieee754_pow+0x9e0>)
 8004158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415c:	f7fc f9b4 	bl	80004c8 <__aeabi_dmul>
 8004160:	a371      	add	r3, pc, #452	; (adr r3, 8004328 <__ieee754_pow+0x9e8>)
 8004162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004166:	4680      	mov	r8, r0
 8004168:	4689      	mov	r9, r1
 800416a:	4620      	mov	r0, r4
 800416c:	4629      	mov	r1, r5
 800416e:	f7fc f9ab 	bl	80004c8 <__aeabi_dmul>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4640      	mov	r0, r8
 8004178:	4649      	mov	r1, r9
 800417a:	f7fb ffef 	bl	800015c <__adddf3>
 800417e:	4604      	mov	r4, r0
 8004180:	460d      	mov	r5, r1
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4630      	mov	r0, r6
 8004188:	4639      	mov	r1, r7
 800418a:	f7fb ffe7 	bl	800015c <__adddf3>
 800418e:	4632      	mov	r2, r6
 8004190:	463b      	mov	r3, r7
 8004192:	4680      	mov	r8, r0
 8004194:	4689      	mov	r9, r1
 8004196:	f7fb ffdf 	bl	8000158 <__aeabi_dsub>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4620      	mov	r0, r4
 80041a0:	4629      	mov	r1, r5
 80041a2:	f7fb ffd9 	bl	8000158 <__aeabi_dsub>
 80041a6:	4642      	mov	r2, r8
 80041a8:	4606      	mov	r6, r0
 80041aa:	460f      	mov	r7, r1
 80041ac:	464b      	mov	r3, r9
 80041ae:	4640      	mov	r0, r8
 80041b0:	4649      	mov	r1, r9
 80041b2:	f7fc f989 	bl	80004c8 <__aeabi_dmul>
 80041b6:	a35e      	add	r3, pc, #376	; (adr r3, 8004330 <__ieee754_pow+0x9f0>)
 80041b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041bc:	4604      	mov	r4, r0
 80041be:	460d      	mov	r5, r1
 80041c0:	f7fc f982 	bl	80004c8 <__aeabi_dmul>
 80041c4:	a35c      	add	r3, pc, #368	; (adr r3, 8004338 <__ieee754_pow+0x9f8>)
 80041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ca:	f7fb ffc5 	bl	8000158 <__aeabi_dsub>
 80041ce:	4622      	mov	r2, r4
 80041d0:	462b      	mov	r3, r5
 80041d2:	f7fc f979 	bl	80004c8 <__aeabi_dmul>
 80041d6:	a35a      	add	r3, pc, #360	; (adr r3, 8004340 <__ieee754_pow+0xa00>)
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f7fb ffbe 	bl	800015c <__adddf3>
 80041e0:	4622      	mov	r2, r4
 80041e2:	462b      	mov	r3, r5
 80041e4:	f7fc f970 	bl	80004c8 <__aeabi_dmul>
 80041e8:	a357      	add	r3, pc, #348	; (adr r3, 8004348 <__ieee754_pow+0xa08>)
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	f7fb ffb3 	bl	8000158 <__aeabi_dsub>
 80041f2:	4622      	mov	r2, r4
 80041f4:	462b      	mov	r3, r5
 80041f6:	f7fc f967 	bl	80004c8 <__aeabi_dmul>
 80041fa:	a355      	add	r3, pc, #340	; (adr r3, 8004350 <__ieee754_pow+0xa10>)
 80041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004200:	f7fb ffac 	bl	800015c <__adddf3>
 8004204:	4622      	mov	r2, r4
 8004206:	462b      	mov	r3, r5
 8004208:	f7fc f95e 	bl	80004c8 <__aeabi_dmul>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4640      	mov	r0, r8
 8004212:	4649      	mov	r1, r9
 8004214:	f7fb ffa0 	bl	8000158 <__aeabi_dsub>
 8004218:	4604      	mov	r4, r0
 800421a:	460d      	mov	r5, r1
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4640      	mov	r0, r8
 8004222:	4649      	mov	r1, r9
 8004224:	f7fc f950 	bl	80004c8 <__aeabi_dmul>
 8004228:	2200      	movs	r2, #0
 800422a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800422e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004232:	4620      	mov	r0, r4
 8004234:	4629      	mov	r1, r5
 8004236:	f7fb ff8f 	bl	8000158 <__aeabi_dsub>
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004242:	f7fc fa6b 	bl	800071c <__aeabi_ddiv>
 8004246:	4632      	mov	r2, r6
 8004248:	4604      	mov	r4, r0
 800424a:	460d      	mov	r5, r1
 800424c:	463b      	mov	r3, r7
 800424e:	4640      	mov	r0, r8
 8004250:	4649      	mov	r1, r9
 8004252:	f7fc f939 	bl	80004c8 <__aeabi_dmul>
 8004256:	4632      	mov	r2, r6
 8004258:	463b      	mov	r3, r7
 800425a:	f7fb ff7f 	bl	800015c <__adddf3>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4620      	mov	r0, r4
 8004264:	4629      	mov	r1, r5
 8004266:	f7fb ff77 	bl	8000158 <__aeabi_dsub>
 800426a:	4642      	mov	r2, r8
 800426c:	464b      	mov	r3, r9
 800426e:	f7fb ff73 	bl	8000158 <__aeabi_dsub>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	2000      	movs	r0, #0
 8004278:	4939      	ldr	r1, [pc, #228]	; (8004360 <__ieee754_pow+0xa20>)
 800427a:	f7fb ff6d 	bl	8000158 <__aeabi_dsub>
 800427e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004282:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004286:	da29      	bge.n	80042dc <__ieee754_pow+0x99c>
 8004288:	4652      	mov	r2, sl
 800428a:	f000 f955 	bl	8004538 <scalbn>
 800428e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004292:	f7ff bbfe 	b.w	8003a92 <__ieee754_pow+0x152>
 8004296:	4b33      	ldr	r3, [pc, #204]	; (8004364 <__ieee754_pow+0xa24>)
 8004298:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800429c:	429f      	cmp	r7, r3
 800429e:	f77f af13 	ble.w	80040c8 <__ieee754_pow+0x788>
 80042a2:	4b31      	ldr	r3, [pc, #196]	; (8004368 <__ieee754_pow+0xa28>)
 80042a4:	440b      	add	r3, r1
 80042a6:	4303      	orrs	r3, r0
 80042a8:	d009      	beq.n	80042be <__ieee754_pow+0x97e>
 80042aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042ae:	2200      	movs	r2, #0
 80042b0:	2300      	movs	r3, #0
 80042b2:	f7fc fb7b 	bl	80009ac <__aeabi_dcmplt>
 80042b6:	3800      	subs	r0, #0
 80042b8:	bf18      	it	ne
 80042ba:	2001      	movne	r0, #1
 80042bc:	e453      	b.n	8003b66 <__ieee754_pow+0x226>
 80042be:	4622      	mov	r2, r4
 80042c0:	462b      	mov	r3, r5
 80042c2:	f7fb ff49 	bl	8000158 <__aeabi_dsub>
 80042c6:	4642      	mov	r2, r8
 80042c8:	464b      	mov	r3, r9
 80042ca:	f7fc fb83 	bl	80009d4 <__aeabi_dcmpge>
 80042ce:	2800      	cmp	r0, #0
 80042d0:	f43f aefa 	beq.w	80040c8 <__ieee754_pow+0x788>
 80042d4:	e7e9      	b.n	80042aa <__ieee754_pow+0x96a>
 80042d6:	f04f 0a00 	mov.w	sl, #0
 80042da:	e720      	b.n	800411e <__ieee754_pow+0x7de>
 80042dc:	4621      	mov	r1, r4
 80042de:	e7d6      	b.n	800428e <__ieee754_pow+0x94e>
 80042e0:	f04f 0b00 	mov.w	fp, #0
 80042e4:	f8df c078 	ldr.w	ip, [pc, #120]	; 8004360 <__ieee754_pow+0xa20>
 80042e8:	f7ff bbba 	b.w	8003a60 <__ieee754_pow+0x120>
 80042ec:	f04f 0b00 	mov.w	fp, #0
 80042f0:	f04f 0c00 	mov.w	ip, #0
 80042f4:	f7ff bbb4 	b.w	8003a60 <__ieee754_pow+0x120>
 80042f8:	4640      	mov	r0, r8
 80042fa:	4649      	mov	r1, r9
 80042fc:	f7ff bb3d 	b.w	800397a <__ieee754_pow+0x3a>
 8004300:	9200      	str	r2, [sp, #0]
 8004302:	f7ff bb89 	b.w	8003a18 <__ieee754_pow+0xd8>
 8004306:	2300      	movs	r3, #0
 8004308:	f7ff bb73 	b.w	80039f2 <__ieee754_pow+0xb2>
 800430c:	f3af 8000 	nop.w
 8004310:	652b82fe 	.word	0x652b82fe
 8004314:	3c971547 	.word	0x3c971547
 8004318:	00000000 	.word	0x00000000
 800431c:	3fe62e43 	.word	0x3fe62e43
 8004320:	fefa39ef 	.word	0xfefa39ef
 8004324:	3fe62e42 	.word	0x3fe62e42
 8004328:	0ca86c39 	.word	0x0ca86c39
 800432c:	be205c61 	.word	0xbe205c61
 8004330:	72bea4d0 	.word	0x72bea4d0
 8004334:	3e663769 	.word	0x3e663769
 8004338:	c5d26bf1 	.word	0xc5d26bf1
 800433c:	3ebbbd41 	.word	0x3ebbbd41
 8004340:	af25de2c 	.word	0xaf25de2c
 8004344:	3f11566a 	.word	0x3f11566a
 8004348:	16bebd93 	.word	0x16bebd93
 800434c:	3f66c16c 	.word	0x3f66c16c
 8004350:	5555553e 	.word	0x5555553e
 8004354:	3fc55555 	.word	0x3fc55555
 8004358:	3fe00000 	.word	0x3fe00000
 800435c:	000fffff 	.word	0x000fffff
 8004360:	3ff00000 	.word	0x3ff00000
 8004364:	4090cbff 	.word	0x4090cbff
 8004368:	3f6f3400 	.word	0x3f6f3400

0800436c <__ieee754_sqrt>:
 800436c:	f8df c158 	ldr.w	ip, [pc, #344]	; 80044c8 <__ieee754_sqrt+0x15c>
 8004370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004374:	ea3c 0c01 	bics.w	ip, ip, r1
 8004378:	4606      	mov	r6, r0
 800437a:	460d      	mov	r5, r1
 800437c:	460c      	mov	r4, r1
 800437e:	460a      	mov	r2, r1
 8004380:	4607      	mov	r7, r0
 8004382:	4603      	mov	r3, r0
 8004384:	d10f      	bne.n	80043a6 <__ieee754_sqrt+0x3a>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	f7fc f89d 	bl	80004c8 <__aeabi_dmul>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4630      	mov	r0, r6
 8004394:	4629      	mov	r1, r5
 8004396:	f7fb fee1 	bl	800015c <__adddf3>
 800439a:	4606      	mov	r6, r0
 800439c:	460d      	mov	r5, r1
 800439e:	4630      	mov	r0, r6
 80043a0:	4629      	mov	r1, r5
 80043a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043a6:	2900      	cmp	r1, #0
 80043a8:	dc0e      	bgt.n	80043c8 <__ieee754_sqrt+0x5c>
 80043aa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80043ae:	ea5c 0707 	orrs.w	r7, ip, r7
 80043b2:	d0f4      	beq.n	800439e <__ieee754_sqrt+0x32>
 80043b4:	b141      	cbz	r1, 80043c8 <__ieee754_sqrt+0x5c>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	f7fb fecd 	bl	8000158 <__aeabi_dsub>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	f7fc f9ab 	bl	800071c <__aeabi_ddiv>
 80043c6:	e7e8      	b.n	800439a <__ieee754_sqrt+0x2e>
 80043c8:	1521      	asrs	r1, r4, #20
 80043ca:	d075      	beq.n	80044b8 <__ieee754_sqrt+0x14c>
 80043cc:	07cc      	lsls	r4, r1, #31
 80043ce:	f04f 0400 	mov.w	r4, #0
 80043d2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80043d6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80043da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80043de:	bf5e      	ittt	pl
 80043e0:	0fd9      	lsrpl	r1, r3, #31
 80043e2:	005b      	lslpl	r3, r3, #1
 80043e4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80043e8:	0fd9      	lsrs	r1, r3, #31
 80043ea:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80043ee:	2516      	movs	r5, #22
 80043f0:	4620      	mov	r0, r4
 80043f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043f6:	107f      	asrs	r7, r7, #1
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	1846      	adds	r6, r0, r1
 80043fc:	4296      	cmp	r6, r2
 80043fe:	bfde      	ittt	le
 8004400:	1b92      	suble	r2, r2, r6
 8004402:	1870      	addle	r0, r6, r1
 8004404:	1864      	addle	r4, r4, r1
 8004406:	0052      	lsls	r2, r2, #1
 8004408:	3d01      	subs	r5, #1
 800440a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800440e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004412:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004416:	d1f0      	bne.n	80043fa <__ieee754_sqrt+0x8e>
 8004418:	4629      	mov	r1, r5
 800441a:	f04f 0e20 	mov.w	lr, #32
 800441e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004422:	4282      	cmp	r2, r0
 8004424:	eb06 0c05 	add.w	ip, r6, r5
 8004428:	dc02      	bgt.n	8004430 <__ieee754_sqrt+0xc4>
 800442a:	d113      	bne.n	8004454 <__ieee754_sqrt+0xe8>
 800442c:	459c      	cmp	ip, r3
 800442e:	d811      	bhi.n	8004454 <__ieee754_sqrt+0xe8>
 8004430:	f1bc 0f00 	cmp.w	ip, #0
 8004434:	eb0c 0506 	add.w	r5, ip, r6
 8004438:	da43      	bge.n	80044c2 <__ieee754_sqrt+0x156>
 800443a:	2d00      	cmp	r5, #0
 800443c:	db41      	blt.n	80044c2 <__ieee754_sqrt+0x156>
 800443e:	f100 0801 	add.w	r8, r0, #1
 8004442:	1a12      	subs	r2, r2, r0
 8004444:	4640      	mov	r0, r8
 8004446:	459c      	cmp	ip, r3
 8004448:	bf88      	it	hi
 800444a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800444e:	eba3 030c 	sub.w	r3, r3, ip
 8004452:	4431      	add	r1, r6
 8004454:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004458:	f1be 0e01 	subs.w	lr, lr, #1
 800445c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8004460:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004464:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004468:	d1db      	bne.n	8004422 <__ieee754_sqrt+0xb6>
 800446a:	4313      	orrs	r3, r2
 800446c:	d006      	beq.n	800447c <__ieee754_sqrt+0x110>
 800446e:	1c48      	adds	r0, r1, #1
 8004470:	bf0b      	itete	eq
 8004472:	4671      	moveq	r1, lr
 8004474:	3101      	addne	r1, #1
 8004476:	3401      	addeq	r4, #1
 8004478:	f021 0101 	bicne.w	r1, r1, #1
 800447c:	1063      	asrs	r3, r4, #1
 800447e:	0849      	lsrs	r1, r1, #1
 8004480:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004484:	07e2      	lsls	r2, r4, #31
 8004486:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800448a:	bf48      	it	mi
 800448c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8004490:	460e      	mov	r6, r1
 8004492:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004496:	e782      	b.n	800439e <__ieee754_sqrt+0x32>
 8004498:	0ada      	lsrs	r2, r3, #11
 800449a:	3815      	subs	r0, #21
 800449c:	055b      	lsls	r3, r3, #21
 800449e:	2a00      	cmp	r2, #0
 80044a0:	d0fa      	beq.n	8004498 <__ieee754_sqrt+0x12c>
 80044a2:	02d5      	lsls	r5, r2, #11
 80044a4:	d50a      	bpl.n	80044bc <__ieee754_sqrt+0x150>
 80044a6:	f1c1 0420 	rsb	r4, r1, #32
 80044aa:	fa23 f404 	lsr.w	r4, r3, r4
 80044ae:	1e4d      	subs	r5, r1, #1
 80044b0:	408b      	lsls	r3, r1
 80044b2:	4322      	orrs	r2, r4
 80044b4:	1b41      	subs	r1, r0, r5
 80044b6:	e789      	b.n	80043cc <__ieee754_sqrt+0x60>
 80044b8:	4608      	mov	r0, r1
 80044ba:	e7f0      	b.n	800449e <__ieee754_sqrt+0x132>
 80044bc:	0052      	lsls	r2, r2, #1
 80044be:	3101      	adds	r1, #1
 80044c0:	e7ef      	b.n	80044a2 <__ieee754_sqrt+0x136>
 80044c2:	4680      	mov	r8, r0
 80044c4:	e7bd      	b.n	8004442 <__ieee754_sqrt+0xd6>
 80044c6:	bf00      	nop
 80044c8:	7ff00000 	.word	0x7ff00000

080044cc <with_errno>:
 80044cc:	b570      	push	{r4, r5, r6, lr}
 80044ce:	4604      	mov	r4, r0
 80044d0:	460d      	mov	r5, r1
 80044d2:	4616      	mov	r6, r2
 80044d4:	f7ff f93e 	bl	8003754 <__errno>
 80044d8:	4629      	mov	r1, r5
 80044da:	6006      	str	r6, [r0, #0]
 80044dc:	4620      	mov	r0, r4
 80044de:	bd70      	pop	{r4, r5, r6, pc}

080044e0 <xflow>:
 80044e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044e2:	4615      	mov	r5, r2
 80044e4:	461c      	mov	r4, r3
 80044e6:	b180      	cbz	r0, 800450a <xflow+0x2a>
 80044e8:	4610      	mov	r0, r2
 80044ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80044ee:	e9cd 0100 	strd	r0, r1, [sp]
 80044f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044f6:	4628      	mov	r0, r5
 80044f8:	4621      	mov	r1, r4
 80044fa:	f7fb ffe5 	bl	80004c8 <__aeabi_dmul>
 80044fe:	2222      	movs	r2, #34	; 0x22
 8004500:	b003      	add	sp, #12
 8004502:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004506:	f7ff bfe1 	b.w	80044cc <with_errno>
 800450a:	4610      	mov	r0, r2
 800450c:	4619      	mov	r1, r3
 800450e:	e7ee      	b.n	80044ee <xflow+0xe>

08004510 <__math_uflow>:
 8004510:	2200      	movs	r2, #0
 8004512:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004516:	f7ff bfe3 	b.w	80044e0 <xflow>

0800451a <__math_oflow>:
 800451a:	2200      	movs	r2, #0
 800451c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004520:	f7ff bfde 	b.w	80044e0 <xflow>

08004524 <fabs>:
 8004524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004528:	4770      	bx	lr

0800452a <finite>:
 800452a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800452e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004532:	0fc0      	lsrs	r0, r0, #31
 8004534:	4770      	bx	lr
	...

08004538 <scalbn>:
 8004538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800453e:	4604      	mov	r4, r0
 8004540:	460d      	mov	r5, r1
 8004542:	4617      	mov	r7, r2
 8004544:	460b      	mov	r3, r1
 8004546:	b996      	cbnz	r6, 800456e <scalbn+0x36>
 8004548:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800454c:	4303      	orrs	r3, r0
 800454e:	d039      	beq.n	80045c4 <scalbn+0x8c>
 8004550:	4b33      	ldr	r3, [pc, #204]	; (8004620 <scalbn+0xe8>)
 8004552:	2200      	movs	r2, #0
 8004554:	f7fb ffb8 	bl	80004c8 <__aeabi_dmul>
 8004558:	4b32      	ldr	r3, [pc, #200]	; (8004624 <scalbn+0xec>)
 800455a:	4604      	mov	r4, r0
 800455c:	429f      	cmp	r7, r3
 800455e:	460d      	mov	r5, r1
 8004560:	da0f      	bge.n	8004582 <scalbn+0x4a>
 8004562:	a32b      	add	r3, pc, #172	; (adr r3, 8004610 <scalbn+0xd8>)
 8004564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004568:	f7fb ffae 	bl	80004c8 <__aeabi_dmul>
 800456c:	e006      	b.n	800457c <scalbn+0x44>
 800456e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004572:	4296      	cmp	r6, r2
 8004574:	d10a      	bne.n	800458c <scalbn+0x54>
 8004576:	4602      	mov	r2, r0
 8004578:	f7fb fdf0 	bl	800015c <__adddf3>
 800457c:	4604      	mov	r4, r0
 800457e:	460d      	mov	r5, r1
 8004580:	e020      	b.n	80045c4 <scalbn+0x8c>
 8004582:	460b      	mov	r3, r1
 8004584:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004588:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800458c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004590:	19b9      	adds	r1, r7, r6
 8004592:	4291      	cmp	r1, r2
 8004594:	dd0e      	ble.n	80045b4 <scalbn+0x7c>
 8004596:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800459a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800459e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80045a2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80045a6:	4820      	ldr	r0, [pc, #128]	; (8004628 <scalbn+0xf0>)
 80045a8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80045ac:	a31a      	add	r3, pc, #104	; (adr r3, 8004618 <scalbn+0xe0>)
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	e7d9      	b.n	8004568 <scalbn+0x30>
 80045b4:	2900      	cmp	r1, #0
 80045b6:	dd08      	ble.n	80045ca <scalbn+0x92>
 80045b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80045bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80045c0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80045c4:	4620      	mov	r0, r4
 80045c6:	4629      	mov	r1, r5
 80045c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ca:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80045ce:	da12      	bge.n	80045f6 <scalbn+0xbe>
 80045d0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80045d4:	429f      	cmp	r7, r3
 80045d6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80045da:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80045de:	dcdc      	bgt.n	800459a <scalbn+0x62>
 80045e0:	a30b      	add	r3, pc, #44	; (adr r3, 8004610 <scalbn+0xd8>)
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80045ea:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80045ee:	480f      	ldr	r0, [pc, #60]	; (800462c <scalbn+0xf4>)
 80045f0:	f041 011f 	orr.w	r1, r1, #31
 80045f4:	e7b8      	b.n	8004568 <scalbn+0x30>
 80045f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80045fa:	3136      	adds	r1, #54	; 0x36
 80045fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004600:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004604:	4620      	mov	r0, r4
 8004606:	4629      	mov	r1, r5
 8004608:	2200      	movs	r2, #0
 800460a:	4b09      	ldr	r3, [pc, #36]	; (8004630 <scalbn+0xf8>)
 800460c:	e7ac      	b.n	8004568 <scalbn+0x30>
 800460e:	bf00      	nop
 8004610:	c2f8f359 	.word	0xc2f8f359
 8004614:	01a56e1f 	.word	0x01a56e1f
 8004618:	8800759c 	.word	0x8800759c
 800461c:	7e37e43c 	.word	0x7e37e43c
 8004620:	43500000 	.word	0x43500000
 8004624:	ffff3cb0 	.word	0xffff3cb0
 8004628:	8800759c 	.word	0x8800759c
 800462c:	c2f8f359 	.word	0xc2f8f359
 8004630:	3c900000 	.word	0x3c900000

08004634 <_init>:
 8004634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004636:	bf00      	nop
 8004638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463a:	bc08      	pop	{r3}
 800463c:	469e      	mov	lr, r3
 800463e:	4770      	bx	lr

08004640 <_fini>:
 8004640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004642:	bf00      	nop
 8004644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004646:	bc08      	pop	{r3}
 8004648:	469e      	mov	lr, r3
 800464a:	4770      	bx	lr
