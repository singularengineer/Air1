
Air1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080045f0  080045f0  000145f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004678  08004678  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004678  08004678  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004678  08004678  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004678  08004678  00014678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800467c  0800467c  0001467c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000080  08004700  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08004700  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc3f  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc6  00000000  00000000  0002bce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  0002d8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  0002e558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018082  00000000  00000000  0002f140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e950  00000000  00000000  000471c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b1fa  00000000  00000000  00055b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0d0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a90  00000000  00000000  000e0d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	080045d4 	.word	0x080045d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	080045d4 	.word	0x080045d4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_frsub>:
 8000a68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a6c:	e002      	b.n	8000a74 <__addsf3>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_fsub>:
 8000a70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a74 <__addsf3>:
 8000a74:	0042      	lsls	r2, r0, #1
 8000a76:	bf1f      	itttt	ne
 8000a78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a7c:	ea92 0f03 	teqne	r2, r3
 8000a80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a88:	d06a      	beq.n	8000b60 <__addsf3+0xec>
 8000a8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a92:	bfc1      	itttt	gt
 8000a94:	18d2      	addgt	r2, r2, r3
 8000a96:	4041      	eorgt	r1, r0
 8000a98:	4048      	eorgt	r0, r1
 8000a9a:	4041      	eorgt	r1, r0
 8000a9c:	bfb8      	it	lt
 8000a9e:	425b      	neglt	r3, r3
 8000aa0:	2b19      	cmp	r3, #25
 8000aa2:	bf88      	it	hi
 8000aa4:	4770      	bxhi	lr
 8000aa6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ab2:	bf18      	it	ne
 8000ab4:	4240      	negne	r0, r0
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000abe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ac2:	bf18      	it	ne
 8000ac4:	4249      	negne	r1, r1
 8000ac6:	ea92 0f03 	teq	r2, r3
 8000aca:	d03f      	beq.n	8000b4c <__addsf3+0xd8>
 8000acc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ad0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad4:	eb10 000c 	adds.w	r0, r0, ip
 8000ad8:	f1c3 0320 	rsb	r3, r3, #32
 8000adc:	fa01 f103 	lsl.w	r1, r1, r3
 8000ae0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae4:	d502      	bpl.n	8000aec <__addsf3+0x78>
 8000ae6:	4249      	negs	r1, r1
 8000ae8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000af0:	d313      	bcc.n	8000b1a <__addsf3+0xa6>
 8000af2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000af6:	d306      	bcc.n	8000b06 <__addsf3+0x92>
 8000af8:	0840      	lsrs	r0, r0, #1
 8000afa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000afe:	f102 0201 	add.w	r2, r2, #1
 8000b02:	2afe      	cmp	r2, #254	; 0xfe
 8000b04:	d251      	bcs.n	8000baa <__addsf3+0x136>
 8000b06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b0e:	bf08      	it	eq
 8000b10:	f020 0001 	biceq.w	r0, r0, #1
 8000b14:	ea40 0003 	orr.w	r0, r0, r3
 8000b18:	4770      	bx	lr
 8000b1a:	0049      	lsls	r1, r1, #1
 8000b1c:	eb40 0000 	adc.w	r0, r0, r0
 8000b20:	3a01      	subs	r2, #1
 8000b22:	bf28      	it	cs
 8000b24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b28:	d2ed      	bcs.n	8000b06 <__addsf3+0x92>
 8000b2a:	fab0 fc80 	clz	ip, r0
 8000b2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b32:	ebb2 020c 	subs.w	r2, r2, ip
 8000b36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b3a:	bfaa      	itet	ge
 8000b3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b40:	4252      	neglt	r2, r2
 8000b42:	4318      	orrge	r0, r3
 8000b44:	bfbc      	itt	lt
 8000b46:	40d0      	lsrlt	r0, r2
 8000b48:	4318      	orrlt	r0, r3
 8000b4a:	4770      	bx	lr
 8000b4c:	f092 0f00 	teq	r2, #0
 8000b50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b54:	bf06      	itte	eq
 8000b56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b5a:	3201      	addeq	r2, #1
 8000b5c:	3b01      	subne	r3, #1
 8000b5e:	e7b5      	b.n	8000acc <__addsf3+0x58>
 8000b60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b68:	bf18      	it	ne
 8000b6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6e:	d021      	beq.n	8000bb4 <__addsf3+0x140>
 8000b70:	ea92 0f03 	teq	r2, r3
 8000b74:	d004      	beq.n	8000b80 <__addsf3+0x10c>
 8000b76:	f092 0f00 	teq	r2, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	4608      	moveq	r0, r1
 8000b7e:	4770      	bx	lr
 8000b80:	ea90 0f01 	teq	r0, r1
 8000b84:	bf1c      	itt	ne
 8000b86:	2000      	movne	r0, #0
 8000b88:	4770      	bxne	lr
 8000b8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b8e:	d104      	bne.n	8000b9a <__addsf3+0x126>
 8000b90:	0040      	lsls	r0, r0, #1
 8000b92:	bf28      	it	cs
 8000b94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b98:	4770      	bx	lr
 8000b9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b9e:	bf3c      	itt	cc
 8000ba0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bxcc	lr
 8000ba6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000baa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb2:	4770      	bx	lr
 8000bb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bb8:	bf16      	itet	ne
 8000bba:	4608      	movne	r0, r1
 8000bbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bc0:	4601      	movne	r1, r0
 8000bc2:	0242      	lsls	r2, r0, #9
 8000bc4:	bf06      	itte	eq
 8000bc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bca:	ea90 0f01 	teqeq	r0, r1
 8000bce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bd2:	4770      	bx	lr

08000bd4 <__aeabi_ui2f>:
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	e004      	b.n	8000be4 <__aeabi_i2f+0x8>
 8000bda:	bf00      	nop

08000bdc <__aeabi_i2f>:
 8000bdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	bf48      	it	mi
 8000be2:	4240      	negmi	r0, r0
 8000be4:	ea5f 0c00 	movs.w	ip, r0
 8000be8:	bf08      	it	eq
 8000bea:	4770      	bxeq	lr
 8000bec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bf0:	4601      	mov	r1, r0
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	e01c      	b.n	8000c32 <__aeabi_l2f+0x2a>

08000bf8 <__aeabi_ul2f>:
 8000bf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bfc:	bf08      	it	eq
 8000bfe:	4770      	bxeq	lr
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e00a      	b.n	8000c1c <__aeabi_l2f+0x14>
 8000c06:	bf00      	nop

08000c08 <__aeabi_l2f>:
 8000c08:	ea50 0201 	orrs.w	r2, r0, r1
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__aeabi_l2f+0x14>
 8000c16:	4240      	negs	r0, r0
 8000c18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c1c:	ea5f 0c01 	movs.w	ip, r1
 8000c20:	bf02      	ittt	eq
 8000c22:	4684      	moveq	ip, r0
 8000c24:	4601      	moveq	r1, r0
 8000c26:	2000      	moveq	r0, #0
 8000c28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c2c:	bf08      	it	eq
 8000c2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c36:	fabc f28c 	clz	r2, ip
 8000c3a:	3a08      	subs	r2, #8
 8000c3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c40:	db10      	blt.n	8000c64 <__aeabi_l2f+0x5c>
 8000c42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c46:	4463      	add	r3, ip
 8000c48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c4c:	f1c2 0220 	rsb	r2, r2, #32
 8000c50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c54:	fa20 f202 	lsr.w	r2, r0, r2
 8000c58:	eb43 0002 	adc.w	r0, r3, r2
 8000c5c:	bf08      	it	eq
 8000c5e:	f020 0001 	biceq.w	r0, r0, #1
 8000c62:	4770      	bx	lr
 8000c64:	f102 0220 	add.w	r2, r2, #32
 8000c68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c74:	fa21 f202 	lsr.w	r2, r1, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_fmul>:
 8000c84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c92:	ea92 0f0c 	teqne	r2, ip
 8000c96:	ea93 0f0c 	teqne	r3, ip
 8000c9a:	d06f      	beq.n	8000d7c <__aeabi_fmul+0xf8>
 8000c9c:	441a      	add	r2, r3
 8000c9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000ca2:	0240      	lsls	r0, r0, #9
 8000ca4:	bf18      	it	ne
 8000ca6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000caa:	d01e      	beq.n	8000cea <__aeabi_fmul+0x66>
 8000cac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cb0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cb4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cb8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cc4:	bf3e      	ittt	cc
 8000cc6:	0049      	lslcc	r1, r1, #1
 8000cc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ccc:	005b      	lslcc	r3, r3, #1
 8000cce:	ea40 0001 	orr.w	r0, r0, r1
 8000cd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cd6:	2afd      	cmp	r2, #253	; 0xfd
 8000cd8:	d81d      	bhi.n	8000d16 <__aeabi_fmul+0x92>
 8000cda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce2:	bf08      	it	eq
 8000ce4:	f020 0001 	biceq.w	r0, r0, #1
 8000ce8:	4770      	bx	lr
 8000cea:	f090 0f00 	teq	r0, #0
 8000cee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cf2:	bf08      	it	eq
 8000cf4:	0249      	lsleq	r1, r1, #9
 8000cf6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cfe:	3a7f      	subs	r2, #127	; 0x7f
 8000d00:	bfc2      	ittt	gt
 8000d02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d0a:	4770      	bxgt	lr
 8000d0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	3a01      	subs	r2, #1
 8000d16:	dc5d      	bgt.n	8000dd4 <__aeabi_fmul+0x150>
 8000d18:	f112 0f19 	cmn.w	r2, #25
 8000d1c:	bfdc      	itt	le
 8000d1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d22:	4770      	bxle	lr
 8000d24:	f1c2 0200 	rsb	r2, r2, #0
 8000d28:	0041      	lsls	r1, r0, #1
 8000d2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d2e:	f1c2 0220 	rsb	r2, r2, #32
 8000d32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d3a:	f140 0000 	adc.w	r0, r0, #0
 8000d3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d42:	bf08      	it	eq
 8000d44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d48:	4770      	bx	lr
 8000d4a:	f092 0f00 	teq	r2, #0
 8000d4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d52:	bf02      	ittt	eq
 8000d54:	0040      	lsleq	r0, r0, #1
 8000d56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d5a:	3a01      	subeq	r2, #1
 8000d5c:	d0f9      	beq.n	8000d52 <__aeabi_fmul+0xce>
 8000d5e:	ea40 000c 	orr.w	r0, r0, ip
 8000d62:	f093 0f00 	teq	r3, #0
 8000d66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0049      	lsleq	r1, r1, #1
 8000d6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d72:	3b01      	subeq	r3, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fmul+0xe6>
 8000d76:	ea41 010c 	orr.w	r1, r1, ip
 8000d7a:	e78f      	b.n	8000c9c <__aeabi_fmul+0x18>
 8000d7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d80:	ea92 0f0c 	teq	r2, ip
 8000d84:	bf18      	it	ne
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d00a      	beq.n	8000da2 <__aeabi_fmul+0x11e>
 8000d8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d90:	bf18      	it	ne
 8000d92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d96:	d1d8      	bne.n	8000d4a <__aeabi_fmul+0xc6>
 8000d98:	ea80 0001 	eor.w	r0, r0, r1
 8000d9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000da0:	4770      	bx	lr
 8000da2:	f090 0f00 	teq	r0, #0
 8000da6:	bf17      	itett	ne
 8000da8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dac:	4608      	moveq	r0, r1
 8000dae:	f091 0f00 	teqne	r1, #0
 8000db2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000db6:	d014      	beq.n	8000de2 <__aeabi_fmul+0x15e>
 8000db8:	ea92 0f0c 	teq	r2, ip
 8000dbc:	d101      	bne.n	8000dc2 <__aeabi_fmul+0x13e>
 8000dbe:	0242      	lsls	r2, r0, #9
 8000dc0:	d10f      	bne.n	8000de2 <__aeabi_fmul+0x15e>
 8000dc2:	ea93 0f0c 	teq	r3, ip
 8000dc6:	d103      	bne.n	8000dd0 <__aeabi_fmul+0x14c>
 8000dc8:	024b      	lsls	r3, r1, #9
 8000dca:	bf18      	it	ne
 8000dcc:	4608      	movne	r0, r1
 8000dce:	d108      	bne.n	8000de2 <__aeabi_fmul+0x15e>
 8000dd0:	ea80 0001 	eor.w	r0, r0, r1
 8000dd4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ddc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de0:	4770      	bx	lr
 8000de2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dea:	4770      	bx	lr

08000dec <__aeabi_fdiv>:
 8000dec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000df0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df4:	bf1e      	ittt	ne
 8000df6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dfa:	ea92 0f0c 	teqne	r2, ip
 8000dfe:	ea93 0f0c 	teqne	r3, ip
 8000e02:	d069      	beq.n	8000ed8 <__aeabi_fdiv+0xec>
 8000e04:	eba2 0203 	sub.w	r2, r2, r3
 8000e08:	ea80 0c01 	eor.w	ip, r0, r1
 8000e0c:	0249      	lsls	r1, r1, #9
 8000e0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e12:	d037      	beq.n	8000e84 <__aeabi_fdiv+0x98>
 8000e14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e24:	428b      	cmp	r3, r1
 8000e26:	bf38      	it	cc
 8000e28:	005b      	lslcc	r3, r3, #1
 8000e2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e32:	428b      	cmp	r3, r1
 8000e34:	bf24      	itt	cs
 8000e36:	1a5b      	subcs	r3, r3, r1
 8000e38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e40:	bf24      	itt	cs
 8000e42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e4e:	bf24      	itt	cs
 8000e50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e5c:	bf24      	itt	cs
 8000e5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	bf18      	it	ne
 8000e6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e6e:	d1e0      	bne.n	8000e32 <__aeabi_fdiv+0x46>
 8000e70:	2afd      	cmp	r2, #253	; 0xfd
 8000e72:	f63f af50 	bhi.w	8000d16 <__aeabi_fmul+0x92>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8c:	327f      	adds	r2, #127	; 0x7f
 8000e8e:	bfc2      	ittt	gt
 8000e90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e98:	4770      	bxgt	lr
 8000e9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9e:	f04f 0300 	mov.w	r3, #0
 8000ea2:	3a01      	subs	r2, #1
 8000ea4:	e737      	b.n	8000d16 <__aeabi_fmul+0x92>
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0040      	lsleq	r0, r0, #1
 8000eb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb6:	3a01      	subeq	r2, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fdiv+0xc2>
 8000eba:	ea40 000c 	orr.w	r0, r0, ip
 8000ebe:	f093 0f00 	teq	r3, #0
 8000ec2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0049      	lsleq	r1, r1, #1
 8000eca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ece:	3b01      	subeq	r3, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fdiv+0xda>
 8000ed2:	ea41 010c 	orr.w	r1, r1, ip
 8000ed6:	e795      	b.n	8000e04 <__aeabi_fdiv+0x18>
 8000ed8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000edc:	ea92 0f0c 	teq	r2, ip
 8000ee0:	d108      	bne.n	8000ef4 <__aeabi_fdiv+0x108>
 8000ee2:	0242      	lsls	r2, r0, #9
 8000ee4:	f47f af7d 	bne.w	8000de2 <__aeabi_fmul+0x15e>
 8000ee8:	ea93 0f0c 	teq	r3, ip
 8000eec:	f47f af70 	bne.w	8000dd0 <__aeabi_fmul+0x14c>
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	e776      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000ef4:	ea93 0f0c 	teq	r3, ip
 8000ef8:	d104      	bne.n	8000f04 <__aeabi_fdiv+0x118>
 8000efa:	024b      	lsls	r3, r1, #9
 8000efc:	f43f af4c 	beq.w	8000d98 <__aeabi_fmul+0x114>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e76e      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000f04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f08:	bf18      	it	ne
 8000f0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f0e:	d1ca      	bne.n	8000ea6 <__aeabi_fdiv+0xba>
 8000f10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f14:	f47f af5c 	bne.w	8000dd0 <__aeabi_fmul+0x14c>
 8000f18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f1c:	f47f af3c 	bne.w	8000d98 <__aeabi_fmul+0x114>
 8000f20:	e75f      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000f22:	bf00      	nop

08000f24 <__aeabi_f2uiz>:
 8000f24:	0042      	lsls	r2, r0, #1
 8000f26:	d20e      	bcs.n	8000f46 <__aeabi_f2uiz+0x22>
 8000f28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f2c:	d30b      	bcc.n	8000f46 <__aeabi_f2uiz+0x22>
 8000f2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f36:	d409      	bmi.n	8000f4c <__aeabi_f2uiz+0x28>
 8000f38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f40:	fa23 f002 	lsr.w	r0, r3, r2
 8000f44:	4770      	bx	lr
 8000f46:	f04f 0000 	mov.w	r0, #0
 8000f4a:	4770      	bx	lr
 8000f4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f50:	d101      	bne.n	8000f56 <__aeabi_f2uiz+0x32>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	d102      	bne.n	8000f5c <__aeabi_f2uiz+0x38>
 8000f56:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5a:	4770      	bx	lr
 8000f5c:	f04f 0000 	mov.w	r0, #0
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <Air1APP>:
uint32_t IncFactor = 1;
char lcd_buff[16];
char *lcd_ptr;

void Air1APP()
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_HB_GPIO_Port, LED_HB_Pin);
 8000f68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f6c:	480a      	ldr	r0, [pc, #40]	; (8000f98 <Air1APP+0x34>)
 8000f6e:	f001 f944 	bl	80021fa <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8000f72:	20c8      	movs	r0, #200	; 0xc8
 8000f74:	f000 fe86 	bl	8001c84 <HAL_Delay>
	if(HAL_GPIO_ReadPin(ENC_SW_GPIO_Port, ENC_SW_Pin) ==  GPIO_PIN_RESET)
 8000f78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7c:	4807      	ldr	r0, [pc, #28]	; (8000f9c <Air1APP+0x38>)
 8000f7e:	f001 f90d 	bl	800219c <HAL_GPIO_ReadPin>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <Air1APP+0x2a>
		UpdateCursor();
 8000f88:	f000 f80a 	bl	8000fa0 <UpdateCursor>
	else
		UpdateFreqency();

}
 8000f8c:	e001      	b.n	8000f92 <Air1APP+0x2e>
		UpdateFreqency();
 8000f8e:	f000 f84b 	bl	8001028 <UpdateFreqency>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40011000 	.word	0x40011000
 8000f9c:	40010800 	.word	0x40010800

08000fa0 <UpdateCursor>:

void UpdateCursor()
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
	LCD_Command(0x0E);
 8000fa6:	200e      	movs	r0, #14
 8000fa8:	f000 f8c8 	bl	800113c <LCD_Command>
	int8_t cursor_update =  Encoder_Diff();
 8000fac:	f000 f8a2 	bl	80010f4 <Encoder_Diff>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	71fb      	strb	r3, [r7, #7]
	int8_t cursor_temp = cursor_current + cursor_update;
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <UpdateCursor+0x7c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	71bb      	strb	r3, [r7, #6]
	if((cursor_temp >= 0 ) && (cursor_temp < 7))
 8000fc2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db24      	blt.n	8001014 <UpdateCursor+0x74>
 8000fca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	dc20      	bgt.n	8001014 <UpdateCursor+0x74>
	{
		LCD_MoveCursor(0,cursor_temp);
 8000fd2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f000 f94d 	bl	8001278 <LCD_MoveCursor>
		cursor_current = cursor_temp;
 8000fde:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <UpdateCursor+0x7c>)
 8000fe4:	6013      	str	r3, [r2, #0]
		IncFactor = pow(10,6 - cursor_current);
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <UpdateCursor+0x7c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f1c3 0306 	rsb	r3, r3, #6
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fa00 	bl	80003f4 <__aeabi_i2d>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	f04f 0000 	mov.w	r0, #0
 8000ffc:	4908      	ldr	r1, [pc, #32]	; (8001020 <UpdateCursor+0x80>)
 8000ffe:	f002 fc07 	bl	8003810 <pow>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	f7ff fd0d 	bl	8000a28 <__aeabi_d2uiz>
 800100e:	4603      	mov	r3, r0
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <UpdateCursor+0x84>)
 8001012:	6013      	str	r3, [r2, #0]
	}
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200000a0 	.word	0x200000a0
 8001020:	40240000 	.word	0x40240000
 8001024:	2000000c 	.word	0x2000000c

08001028 <UpdateFreqency>:

void UpdateFreqency()
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	//uint8_t len = 0;
	int16_t freq_diff = Encoder_Diff();
 800102e:	f000 f861 	bl	80010f4 <Encoder_Diff>
 8001032:	4603      	mov	r3, r0
 8001034:	807b      	strh	r3, [r7, #2]
	uint32_t freq_temp = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]

	if(freq_diff == 0)
 800103a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d046      	beq.n	80010d0 <UpdateFreqency+0xa8>
		return;

	if(freq_diff > 0)
 8001042:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001046:	2b00      	cmp	r3, #0
 8001048:	dd05      	ble.n	8001056 <UpdateFreqency+0x2e>
		freq_temp = freqency_current + IncFactor;
 800104a:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <UpdateFreqency+0xb0>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4b23      	ldr	r3, [pc, #140]	; (80010dc <UpdateFreqency+0xb4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	607b      	str	r3, [r7, #4]
	if(freq_diff < 0)
 8001056:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800105a:	2b00      	cmp	r3, #0
 800105c:	da05      	bge.n	800106a <UpdateFreqency+0x42>
		freq_temp = freqency_current - IncFactor;
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <UpdateFreqency+0xb0>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <UpdateFreqency+0xb4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	607b      	str	r3, [r7, #4]

	if((freq_temp <= M40_MAX) && (freq_temp >= M40_MIN))
 800106a:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <UpdateFreqency+0xb8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	d82e      	bhi.n	80010d2 <UpdateFreqency+0xaa>
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <UpdateFreqency+0xbc>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	429a      	cmp	r2, r3
 800107c:	d329      	bcc.n	80010d2 <UpdateFreqency+0xaa>
	{
		LCD_MoveCursor(0,0);
 800107e:	2100      	movs	r1, #0
 8001080:	2000      	movs	r0, #0
 8001082:	f000 f8f9 	bl	8001278 <LCD_MoveCursor>
		lcd_ptr = itoa(freq_temp,(char *)lcd_buff,10);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	220a      	movs	r2, #10
 800108a:	4917      	ldr	r1, [pc, #92]	; (80010e8 <UpdateFreqency+0xc0>)
 800108c:	4618      	mov	r0, r3
 800108e:	f002 fb73 	bl	8003778 <itoa>
 8001092:	4603      	mov	r3, r0
 8001094:	4a15      	ldr	r2, [pc, #84]	; (80010ec <UpdateFreqency+0xc4>)
 8001096:	6013      	str	r3, [r2, #0]
		SI5351_SetFrequency(freq_temp);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 fa59 	bl	8001550 <SI5351_SetFrequency>

		while(*lcd_ptr)
 800109e:	e008      	b.n	80010b2 <UpdateFreqency+0x8a>
			LCD_Data(*lcd_ptr++);
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <UpdateFreqency+0xc4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	4911      	ldr	r1, [pc, #68]	; (80010ec <UpdateFreqency+0xc4>)
 80010a8:	600a      	str	r2, [r1, #0]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f875 	bl	800119c <LCD_Data>
		while(*lcd_ptr)
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <UpdateFreqency+0xc4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f1      	bne.n	80010a0 <UpdateFreqency+0x78>
		LCD_MoveCursor(0,cursor_current);
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <UpdateFreqency+0xc8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	2000      	movs	r0, #0
 80010c4:	f000 f8d8 	bl	8001278 <LCD_MoveCursor>
		freqency_current = freq_temp;
 80010c8:	4a03      	ldr	r2, [pc, #12]	; (80010d8 <UpdateFreqency+0xb0>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e000      	b.n	80010d2 <UpdateFreqency+0xaa>
		return;
 80010d0:	bf00      	nop
	}
}
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000008 	.word	0x20000008
 80010dc:	2000000c 	.word	0x2000000c
 80010e0:	20000004 	.word	0x20000004
 80010e4:	20000000 	.word	0x20000000
 80010e8:	200000a4 	.word	0x200000a4
 80010ec:	200000b4 	.word	0x200000b4
 80010f0:	200000a0 	.word	0x200000a0

080010f4 <Encoder_Diff>:

int16_t Encoder_Diff()
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
	int16_t diff = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	80fb      	strh	r3, [r7, #6]
	uint32_t encoder_new = TIM1->CNT>>2; // Divide by 2 as a filter
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <Encoder_Diff+0x40>)
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	603b      	str	r3, [r7, #0]

	if(encoder != encoder_new)
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <Encoder_Diff+0x44>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d00a      	beq.n	8001126 <Encoder_Diff+0x32>
	{
		diff = encoder_new - encoder;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b29a      	uxth	r2, r3
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <Encoder_Diff+0x44>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	b29b      	uxth	r3, r3
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	b29b      	uxth	r3, r3
 800111e:	80fb      	strh	r3, [r7, #6]
		encoder = encoder_new;
 8001120:	4a05      	ldr	r2, [pc, #20]	; (8001138 <Encoder_Diff+0x44>)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	6013      	str	r3, [r2, #0]
	}
	return diff;
 8001126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	40012c00 	.word	0x40012c00
 8001138:	2000009c 	.word	0x2000009c

0800113c <LCD_Command>:
#include "LCD_I2C.h"

I2C_HandleTypeDef *_i2c;

void LCD_Command(char cmd)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af02      	add	r7, sp, #8
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	char i2cBuff[4];
	char data_H, data_L;
	data_H = cmd & 0xF0;
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f023 030f 	bic.w	r3, r3, #15
 800114c:	73fb      	strb	r3, [r7, #15]
	data_L = (cmd & 0x0F) << 4;
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	73bb      	strb	r3, [r7, #14]

	i2cBuff[0] = data_H | En; //load new command byte with En high
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	f043 030c 	orr.w	r3, r3, #12
 800115a:	b2db      	uxtb	r3, r3
 800115c:	723b      	strb	r3, [r7, #8]
	i2cBuff[1] = data_H | LCD_BACKLIGHT; //update command while keeping backlight on
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	b2db      	uxtb	r3, r3
 8001166:	727b      	strb	r3, [r7, #9]
	i2cBuff[2] = data_L | En; //load new command byte with En high
 8001168:	7bbb      	ldrb	r3, [r7, #14]
 800116a:	f043 030c 	orr.w	r3, r3, #12
 800116e:	b2db      	uxtb	r3, r3
 8001170:	72bb      	strb	r3, [r7, #10]
	i2cBuff[3] = data_L | LCD_BACKLIGHT; //update command while keeping backlight on
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	b2db      	uxtb	r3, r3
 800117a:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit (_i2c, LCD_ADDRESS,(uint8_t *) i2cBuff, 4, 100);
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <LCD_Command+0x5c>)
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	f107 0208 	add.w	r2, r7, #8
 8001184:	2364      	movs	r3, #100	; 0x64
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2304      	movs	r3, #4
 800118a:	214e      	movs	r1, #78	; 0x4e
 800118c:	f001 f992 	bl	80024b4 <HAL_I2C_Master_Transmit>
}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200000b8 	.word	0x200000b8

0800119c <LCD_Data>:

void LCD_Data(char data)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]

	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	f023 030f 	bic.w	r3, r3, #15
 80011ac:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	f043 030d 	orr.w	r3, r3, #13
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	f043 0309 	orr.w	r3, r3, #9
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80011c8:	7bbb      	ldrb	r3, [r7, #14]
 80011ca:	f043 030d 	orr.w	r3, r3, #13
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80011d2:	7bbb      	ldrb	r3, [r7, #14]
 80011d4:	f043 0309 	orr.w	r3, r3, #9
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (_i2c, LCD_ADDRESS,(uint8_t *) data_t, 4, 100);
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <LCD_Data+0x5c>)
 80011de:	6818      	ldr	r0, [r3, #0]
 80011e0:	f107 0208 	add.w	r2, r7, #8
 80011e4:	2364      	movs	r3, #100	; 0x64
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2304      	movs	r3, #4
 80011ea:	214e      	movs	r1, #78	; 0x4e
 80011ec:	f001 f962 	bl	80024b4 <HAL_I2C_Master_Transmit>
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200000b8 	.word	0x200000b8

080011fc <LCD_Init>:

void LCD_Init(I2C_HandleTypeDef *i2c)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	_i2c = i2c;
 8001204:	4a1b      	ldr	r2, [pc, #108]	; (8001274 <LCD_Init+0x78>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6013      	str	r3, [r2, #0]
	LCD_Command (0x30);
 800120a:	2030      	movs	r0, #48	; 0x30
 800120c:	f7ff ff96 	bl	800113c <LCD_Command>
	HAL_Delay(50);
 8001210:	2032      	movs	r0, #50	; 0x32
 8001212:	f000 fd37 	bl	8001c84 <HAL_Delay>
	LCD_Command (0x30);
 8001216:	2030      	movs	r0, #48	; 0x30
 8001218:	f7ff ff90 	bl	800113c <LCD_Command>
	HAL_Delay(5);
 800121c:	2005      	movs	r0, #5
 800121e:	f000 fd31 	bl	8001c84 <HAL_Delay>
	LCD_Command (0x20);
 8001222:	2020      	movs	r0, #32
 8001224:	f7ff ff8a 	bl	800113c <LCD_Command>
	HAL_Delay(10);
 8001228:	200a      	movs	r0, #10
 800122a:	f000 fd2b 	bl	8001c84 <HAL_Delay>

  	LCD_Command (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800122e:	2028      	movs	r0, #40	; 0x28
 8001230:	f7ff ff84 	bl	800113c <LCD_Command>
	HAL_Delay(2);
 8001234:	2002      	movs	r0, #2
 8001236:	f000 fd25 	bl	8001c84 <HAL_Delay>
	LCD_Command (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800123a:	2008      	movs	r0, #8
 800123c:	f7ff ff7e 	bl	800113c <LCD_Command>
	HAL_Delay(2);
 8001240:	2002      	movs	r0, #2
 8001242:	f000 fd1f 	bl	8001c84 <HAL_Delay>
	LCD_Command (0x01);  // clear display
 8001246:	2001      	movs	r0, #1
 8001248:	f7ff ff78 	bl	800113c <LCD_Command>
	HAL_Delay(2);
 800124c:	2002      	movs	r0, #2
 800124e:	f000 fd19 	bl	8001c84 <HAL_Delay>
	LCD_Command (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001252:	2006      	movs	r0, #6
 8001254:	f7ff ff72 	bl	800113c <LCD_Command>
	HAL_Delay(2);
 8001258:	2002      	movs	r0, #2
 800125a:	f000 fd13 	bl	8001c84 <HAL_Delay>
	LCD_Command (0x0E); //Display on/off control --> D = 1, C =1 and B = 0. (Cursor and blink, last two bits)
 800125e:	200e      	movs	r0, #14
 8001260:	f7ff ff6c 	bl	800113c <LCD_Command>
	HAL_Delay(2);
 8001264:	2002      	movs	r0, #2
 8001266:	f000 fd0d 	bl	8001c84 <HAL_Delay>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200000b8 	.word	0x200000b8

08001278 <LCD_MoveCursor>:

void LCD_MoveCursor(int row, int col)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
	//sanity check for 16x2 display
	if(row > 1)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b01      	cmp	r3, #1
 8001286:	dd01      	ble.n	800128c <LCD_MoveCursor+0x14>
		row = 1;
 8001288:	2301      	movs	r3, #1
 800128a:	607b      	str	r3, [r7, #4]
	if(col > 15)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2b0f      	cmp	r3, #15
 8001290:	dd01      	ble.n	8001296 <LCD_MoveCursor+0x1e>
		col = 15;
 8001292:	230f      	movs	r3, #15
 8001294:	603b      	str	r3, [r7, #0]

	switch(row)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <LCD_MoveCursor+0x2c>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d005      	beq.n	80012ae <LCD_MoveCursor+0x36>
 80012a2:	e009      	b.n	80012b8 <LCD_MoveCursor+0x40>
	{
		case 0:
			col |= 0x80;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012aa:	603b      	str	r3, [r7, #0]
			break;
 80012ac:	e004      	b.n	80012b8 <LCD_MoveCursor+0x40>
		case 1:
			col |= 0xC0;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80012b4:	603b      	str	r3, [r7, #0]
			break;
 80012b6:	bf00      	nop
	}
	LCD_Command(col);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff3d 	bl	800113c <LCD_Command>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <SI5351_Init>:
#include "SI5351.h"

I2C_HandleTypeDef* i2c_si5351;

void SI5351_Init(I2C_HandleTypeDef *i2c)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	i2c_si5351 = i2c;
 80012d4:	4a03      	ldr	r2, [pc, #12]	; (80012e4 <SI5351_Init+0x18>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	200000bc 	.word	0x200000bc

080012e8 <SI5351_WriteRegister>:

uint8_t SI5351_WriteRegister(uint8_t reg, uint8_t data)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	4603      	mov	r3, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	4613      	mov	r3, r2
 80012f6:	71bb      	strb	r3, [r7, #6]
	uint8_t txbuff[2];
	txbuff[0] = reg;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	733b      	strb	r3, [r7, #12]
	txbuff[1] = data;
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit (i2c_si5351, SI5351_ADDR,(uint8_t *) txbuff, 2, 100);
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <SI5351_WriteRegister+0x38>)
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	f107 020c 	add.w	r2, r7, #12
 8001308:	2364      	movs	r3, #100	; 0x64
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2302      	movs	r3, #2
 800130e:	21c0      	movs	r1, #192	; 0xc0
 8001310:	f001 f8d0 	bl	80024b4 <HAL_I2C_Master_Transmit>
	return 0;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200000bc 	.word	0x200000bc

08001324 <SetPLL>:
 * num is 0..1,048,575 (0xFFFFF)
 * denom is 0..1,048,575 (0xFFFFF)
 *
*/
void SetPLL(uint8_t pll, uint8_t mult, uint32_t num, uint32_t denom)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60ba      	str	r2, [r7, #8]
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4603      	mov	r3, r0
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	460b      	mov	r3, r1
 8001334:	73bb      	strb	r3, [r7, #14]
	uint32_t P1;					// PLL config register P1
	uint32_t P2;					// PLL config register P2
	uint32_t P3;					// PLL config register P3

	P1 = (uint32_t)(128 * ((float)num / (float)denom));
 8001336:	68b8      	ldr	r0, [r7, #8]
 8001338:	f7ff fc4c 	bl	8000bd4 <__aeabi_ui2f>
 800133c:	4604      	mov	r4, r0
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fc48 	bl	8000bd4 <__aeabi_ui2f>
 8001344:	4603      	mov	r3, r0
 8001346:	4619      	mov	r1, r3
 8001348:	4620      	mov	r0, r4
 800134a:	f7ff fd4f 	bl	8000dec <__aeabi_fdiv>
 800134e:	4603      	mov	r3, r0
 8001350:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fc95 	bl	8000c84 <__aeabi_fmul>
 800135a:	4603      	mov	r3, r0
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fde1 	bl	8000f24 <__aeabi_f2uiz>
 8001362:	4603      	mov	r3, r0
 8001364:	61fb      	str	r3, [r7, #28]
	P1 = (uint32_t)(128 * (uint32_t)(mult) + P1 - 512);
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	01da      	lsls	r2, r3, #7
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	4413      	add	r3, r2
 800136e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001372:	61fb      	str	r3, [r7, #28]
	P2 = (uint32_t)(128 * ((float)num / (float)denom));
 8001374:	68b8      	ldr	r0, [r7, #8]
 8001376:	f7ff fc2d 	bl	8000bd4 <__aeabi_ui2f>
 800137a:	4604      	mov	r4, r0
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff fc29 	bl	8000bd4 <__aeabi_ui2f>
 8001382:	4603      	mov	r3, r0
 8001384:	4619      	mov	r1, r3
 8001386:	4620      	mov	r0, r4
 8001388:	f7ff fd30 	bl	8000dec <__aeabi_fdiv>
 800138c:	4603      	mov	r3, r0
 800138e:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fc76 	bl	8000c84 <__aeabi_fmul>
 8001398:	4603      	mov	r3, r0
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fdc2 	bl	8000f24 <__aeabi_f2uiz>
 80013a0:	4603      	mov	r3, r0
 80013a2:	61bb      	str	r3, [r7, #24]
	P2 = (uint32_t)(128 * num - denom * P2);
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	01da      	lsls	r2, r3, #7
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69b9      	ldr	r1, [r7, #24]
 80013ac:	fb01 f303 	mul.w	r3, r1, r3
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	61bb      	str	r3, [r7, #24]
	P3 = denom;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	617b      	str	r3, [r7, #20]

	SI5351_WriteRegister(pll + 0, (P3 & 0x0000FF00) >> 8);
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	0a1b      	lsrs	r3, r3, #8
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	4611      	mov	r1, r2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ff90 	bl	80012e8 <SI5351_WriteRegister>
	SI5351_WriteRegister(pll + 1, (P3 & 0x000000FF));
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	3301      	adds	r3, #1
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff87 	bl	80012e8 <SI5351_WriteRegister>
	SI5351_WriteRegister(pll + 2, (P1 & 0x00030000) >> 16);
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	3302      	adds	r3, #2
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	0c1b      	lsrs	r3, r3, #16
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	4619      	mov	r1, r3
 80013ee:	4610      	mov	r0, r2
 80013f0:	f7ff ff7a 	bl	80012e8 <SI5351_WriteRegister>
	SI5351_WriteRegister(pll + 3, (P1 & 0x0000FF00) >> 8);
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	3303      	adds	r3, #3
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	4619      	mov	r1, r3
 8001402:	4610      	mov	r0, r2
 8001404:	f7ff ff70 	bl	80012e8 <SI5351_WriteRegister>
	SI5351_WriteRegister(pll + 4, (P1 & 0x000000FF));
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	3304      	adds	r3, #4
 800140c:	b2db      	uxtb	r3, r3
 800140e:	69fa      	ldr	r2, [r7, #28]
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff67 	bl	80012e8 <SI5351_WriteRegister>
	SI5351_WriteRegister(pll + 5, ((P3 & 0x000F0000) >> 12) | ((P2 & 0x000F0000) >> 16));
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	3305      	adds	r3, #5
 800141e:	b2d8      	uxtb	r0, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	0b1b      	lsrs	r3, r3, #12
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f023 030f 	bic.w	r3, r3, #15
 800142a:	b2da      	uxtb	r2, r3
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	0c1b      	lsrs	r3, r3, #16
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	b2db      	uxtb	r3, r3
 8001438:	4313      	orrs	r3, r2
 800143a:	b2db      	uxtb	r3, r3
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff ff53 	bl	80012e8 <SI5351_WriteRegister>
	SI5351_WriteRegister(pll + 6, (P2 & 0x0000FF00) >> 8);
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	3306      	adds	r3, #6
 8001446:	b2da      	uxtb	r2, r3
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	0a1b      	lsrs	r3, r3, #8
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4619      	mov	r1, r3
 8001450:	4610      	mov	r0, r2
 8001452:	f7ff ff49 	bl	80012e8 <SI5351_WriteRegister>
	SI5351_WriteRegister(pll + 7, (P2 & 0x000000FF));
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	3307      	adds	r3, #7
 800145a:	b2db      	uxtb	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	4611      	mov	r1, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff40 	bl	80012e8 <SI5351_WriteRegister>
}
 8001468:	bf00      	nop
 800146a:	3724      	adds	r7, #36	; 0x24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd90      	pop	{r4, r7, pc}

08001470 <SetMultiSynth>:
/*
 * Set up MultiSynth with integer divider and R divider
 * R divider is the bit value which is OR'ed onto the appropriate register, it is a #define in si5351a.h
 */
void SetMultiSynth(uint8_t synth, uint32_t divider, uint8_t rDiv)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
 800147c:	4613      	mov	r3, r2
 800147e:	71bb      	strb	r3, [r7, #6]
	uint32_t P1;					// Synth config register P1
	uint32_t P2;					// Synth config register P2
	uint32_t P3;					// Synth config register P3

	P1 = 128 * divider - 512;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001486:	3b04      	subs	r3, #4
 8001488:	01db      	lsls	r3, r3, #7
 800148a:	617b      	str	r3, [r7, #20]
	P2 = 0;							// P2 = 0, P3 = 1 forces an integer value for the divider
 800148c:	2300      	movs	r3, #0
 800148e:	613b      	str	r3, [r7, #16]
	P3 = 1;
 8001490:	2301      	movs	r3, #1
 8001492:	60fb      	str	r3, [r7, #12]

	SI5351_WriteRegister(synth + 0,   (P3 & 0x0000FF00) >> 8);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b2da      	uxtb	r2, r3
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	4611      	mov	r1, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff22 	bl	80012e8 <SI5351_WriteRegister>
	SI5351_WriteRegister(synth + 1,   (P3 & 0x000000FF));
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	3301      	adds	r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff19 	bl	80012e8 <SI5351_WriteRegister>
	SI5351_WriteRegister(synth + 2,   ((P1 & 0x00030000) >> 16) | rDiv);
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	3302      	adds	r3, #2
 80014ba:	b2d8      	uxtb	r0, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	0c1b      	lsrs	r3, r3, #16
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	79bb      	ldrb	r3, [r7, #6]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff ff0a 	bl	80012e8 <SI5351_WriteRegister>
	SI5351_WriteRegister(synth + 3,   (P1 & 0x0000FF00) >> 8);
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	3303      	adds	r3, #3
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	4619      	mov	r1, r3
 80014e2:	4610      	mov	r0, r2
 80014e4:	f7ff ff00 	bl	80012e8 <SI5351_WriteRegister>
	SI5351_WriteRegister(synth + 4,   (P1 & 0x000000FF));
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	3304      	adds	r3, #4
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fef7 	bl	80012e8 <SI5351_WriteRegister>
	SI5351_WriteRegister(synth + 5,   ((P3 & 0x000F0000) >> 12) | ((P2 & 0x000F0000) >> 16));
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	3305      	adds	r3, #5
 80014fe:	b2d8      	uxtb	r0, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	0b1b      	lsrs	r3, r3, #12
 8001504:	b2db      	uxtb	r3, r3
 8001506:	f023 030f 	bic.w	r3, r3, #15
 800150a:	b2da      	uxtb	r2, r3
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	0c1b      	lsrs	r3, r3, #16
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	b2db      	uxtb	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b2db      	uxtb	r3, r3
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff fee3 	bl	80012e8 <SI5351_WriteRegister>
	SI5351_WriteRegister(synth + 6,   (P2 & 0x0000FF00) >> 8);
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	3306      	adds	r3, #6
 8001526:	b2da      	uxtb	r2, r3
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	0a1b      	lsrs	r3, r3, #8
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4619      	mov	r1, r3
 8001530:	4610      	mov	r0, r2
 8001532:	f7ff fed9 	bl	80012e8 <SI5351_WriteRegister>
	SI5351_WriteRegister(synth + 7,   (P2 & 0x000000FF));
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	3307      	adds	r3, #7
 800153a:	b2db      	uxtb	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fed0 	bl	80012e8 <SI5351_WriteRegister>
}
 8001548:	bf00      	nop
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <SI5351_SetFrequency>:
 * Set CLK0 output ON and to the specified frequency by the encoder
 * Frequency is in the range 1MHz to 150MHz
 */

void SI5351_SetFrequency(uint32_t frequency)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	uint32_t pllFreq;
	uint32_t xtalFreq = XTAL_FREQ;
 8001558:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <SI5351_SetFrequency+0xb4>)
 800155a:	623b      	str	r3, [r7, #32]
	uint8_t mult;
	uint32_t num;
	uint32_t denom;
	uint32_t divider;

	divider = 900000000 / frequency;// Calculate the division ratio. 900,000,000 is the maximum internal
 800155c:	4a2a      	ldr	r2, [pc, #168]	; (8001608 <SI5351_SetFrequency+0xb8>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	fbb2 f3f3 	udiv	r3, r2, r3
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
									// PLL frequency: 900MHz
	if (divider % 2) divider--;		// Ensure an even integer division ratio
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d002      	beq.n	8001576 <SI5351_SetFrequency+0x26>
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	3b01      	subs	r3, #1
 8001574:	627b      	str	r3, [r7, #36]	; 0x24

	pllFreq = divider * frequency;	// Calculate the pllFrequency: the divider * desired output frequency
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	fb02 f303 	mul.w	r3, r2, r3
 800157e:	61fb      	str	r3, [r7, #28]

	mult = pllFreq / xtalFreq;		// Determine the multiplier to get to the required pllFrequency
 8001580:	69fa      	ldr	r2, [r7, #28]
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	fbb2 f3f3 	udiv	r3, r2, r3
 8001588:	76fb      	strb	r3, [r7, #27]
	l = pllFreq % xtalFreq;			// It has three parts:
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	6a3a      	ldr	r2, [r7, #32]
 800158e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001592:	6a39      	ldr	r1, [r7, #32]
 8001594:	fb01 f202 	mul.w	r2, r1, r2
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	617b      	str	r3, [r7, #20]
	f = l;							// mult is an integer that must be in the range 15..90
 800159c:	6978      	ldr	r0, [r7, #20]
 800159e:	f7ff fb19 	bl	8000bd4 <__aeabi_ui2f>
 80015a2:	4603      	mov	r3, r0
 80015a4:	613b      	str	r3, [r7, #16]
	f *= 1048575;					// num and denom are the fractional parts, the numerator and denominator
 80015a6:	4919      	ldr	r1, [pc, #100]	; (800160c <SI5351_SetFrequency+0xbc>)
 80015a8:	6938      	ldr	r0, [r7, #16]
 80015aa:	f7ff fb6b 	bl	8000c84 <__aeabi_fmul>
 80015ae:	4603      	mov	r3, r0
 80015b0:	613b      	str	r3, [r7, #16]
	f /= xtalFreq;					// each is 20 bits (range 0..1048575)
 80015b2:	6a38      	ldr	r0, [r7, #32]
 80015b4:	f7ff fb0e 	bl	8000bd4 <__aeabi_ui2f>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4619      	mov	r1, r3
 80015bc:	6938      	ldr	r0, [r7, #16]
 80015be:	f7ff fc15 	bl	8000dec <__aeabi_fdiv>
 80015c2:	4603      	mov	r3, r0
 80015c4:	613b      	str	r3, [r7, #16]
	num = f;						// the actual multiplier is  mult + num / denom
 80015c6:	6938      	ldr	r0, [r7, #16]
 80015c8:	f7ff fcac 	bl	8000f24 <__aeabi_f2uiz>
 80015cc:	4603      	mov	r3, r0
 80015ce:	60fb      	str	r3, [r7, #12]
	denom = 1048575;				// For simplicity we set the denominator to the maximum 1048575
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <SI5351_SetFrequency+0xc0>)
 80015d2:	60bb      	str	r3, [r7, #8]

									// Set up PLL A with the calculated multiplication ratio
	SetPLL(SI_SYNTH_PLL_A, mult, num, denom);
 80015d4:	7ef9      	ldrb	r1, [r7, #27]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	201a      	movs	r0, #26
 80015dc:	f7ff fea2 	bl	8001324 <SetPLL>
									// Set up MultiSynth divider 0, with the calculated divider.
									// The final R division stage can divide by a power of two, from 1..128.
									// reprented by constants SI_R_DIV1 to SI_R_DIV128 (see si5351a.h header file)
									// If you want to output frequencies below 1MHz, you have to use the
									// final R division stage
	SetMultiSynth(SI_SYNTH_MS_0, divider, SI_R_DIV_1);
 80015e0:	2200      	movs	r2, #0
 80015e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015e4:	202a      	movs	r0, #42	; 0x2a
 80015e6:	f7ff ff43 	bl	8001470 <SetMultiSynth>
									// Reset the PLL. This causes a glitch in the output. For small changes to
									// the parameters, you don't need to reset the PLL, and there is no glitch
	SI5351_WriteRegister(SI_PLL_RESET, 0xA0);
 80015ea:	21a0      	movs	r1, #160	; 0xa0
 80015ec:	20b1      	movs	r0, #177	; 0xb1
 80015ee:	f7ff fe7b 	bl	80012e8 <SI5351_WriteRegister>
									// Finally switch on the CLK0 output (0x4F)
									// and set the MultiSynth0 input to be PLL A
	SI5351_WriteRegister(SI_CLK0_CONTROL, 0x4F | SI_CLK_SRC_PLL_A);
 80015f2:	214f      	movs	r1, #79	; 0x4f
 80015f4:	2010      	movs	r0, #16
 80015f6:	f7ff fe77 	bl	80012e8 <SI5351_WriteRegister>

}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	; 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	017d7840 	.word	0x017d7840
 8001608:	35a4e900 	.word	0x35a4e900
 800160c:	497ffff0 	.word	0x497ffff0
 8001610:	000fffff 	.word	0x000fffff

08001614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161a:	f000 fad1 	bl	8001bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161e:	f000 f837 	bl	8001690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001622:	f000 f92f 	bl	8001884 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001626:	f000 f879 	bl	800171c <MX_I2C1_Init>
  MX_TIM1_Init();
 800162a:	f000 f8d3 	bl	80017d4 <MX_TIM1_Init>
  MX_I2C2_Init();
 800162e:	f000 f8a3 	bl	8001778 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8001632:	213c      	movs	r1, #60	; 0x3c
 8001634:	4812      	ldr	r0, [pc, #72]	; (8001680 <main+0x6c>)
 8001636:	f001 feeb 	bl	8003410 <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(200);
 800163a:	20c8      	movs	r0, #200	; 0xc8
 800163c:	f000 fb22 	bl	8001c84 <HAL_Delay>

  LCD_Init(&hi2c1);
 8001640:	4810      	ldr	r0, [pc, #64]	; (8001684 <main+0x70>)
 8001642:	f7ff fddb 	bl	80011fc <LCD_Init>
  SI5351_Init(&hi2c2);
 8001646:	4810      	ldr	r0, [pc, #64]	; (8001688 <main+0x74>)
 8001648:	f7ff fe40 	bl	80012cc <SI5351_Init>

  char *str = "CW";
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <main+0x78>)
 800164e:	607b      	str	r3, [r7, #4]

  LCD_MoveCursor(0,14);
 8001650:	210e      	movs	r1, #14
 8001652:	2000      	movs	r0, #0
 8001654:	f7ff fe10 	bl	8001278 <LCD_MoveCursor>
  while(*str)
 8001658:	e006      	b.n	8001668 <main+0x54>
	  LCD_Data(*str++);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fd9a 	bl	800119c <LCD_Data>
  while(*str)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f4      	bne.n	800165a <main+0x46>
  HAL_Delay(200);
 8001670:	20c8      	movs	r0, #200	; 0xc8
 8001672:	f000 fb07 	bl	8001c84 <HAL_Delay>
  UpdateFreqency();
 8001676:	f7ff fcd7 	bl	8001028 <UpdateFreqency>

  while (1)
  {
	  Air1APP();
 800167a:	f7ff fc73 	bl	8000f64 <Air1APP>
 800167e:	e7fc      	b.n	800167a <main+0x66>
 8001680:	20000168 	.word	0x20000168
 8001684:	200000c0 	.word	0x200000c0
 8001688:	20000114 	.word	0x20000114
 800168c:	080045f0 	.word	0x080045f0

08001690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b090      	sub	sp, #64	; 0x40
 8001694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001696:	f107 0318 	add.w	r3, r7, #24
 800169a:	2228      	movs	r2, #40	; 0x28
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f002 f86c 	bl	800377c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016b2:	2301      	movs	r3, #1
 80016b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c0:	2301      	movs	r3, #1
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c4:	2302      	movs	r3, #2
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d4:	f107 0318 	add.w	r3, r7, #24
 80016d8:	4618      	mov	r0, r3
 80016da:	f001 f9f1 	bl	8002ac0 <HAL_RCC_OscConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016e4:	f000 f934 	bl	8001950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e8:	230f      	movs	r3, #15
 80016ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ec:	2302      	movs	r3, #2
 80016ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2102      	movs	r1, #2
 8001702:	4618      	mov	r0, r3
 8001704:	f001 fc5e 	bl	8002fc4 <HAL_RCC_ClockConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800170e:	f000 f91f 	bl	8001950 <Error_Handler>
  }
}
 8001712:	bf00      	nop
 8001714:	3740      	adds	r7, #64	; 0x40
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <MX_I2C1_Init+0x50>)
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <MX_I2C1_Init+0x54>)
 8001724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_I2C1_Init+0x50>)
 8001728:	4a12      	ldr	r2, [pc, #72]	; (8001774 <MX_I2C1_Init+0x58>)
 800172a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_I2C1_Init+0x50>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_I2C1_Init+0x50>)
 8001734:	2200      	movs	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_I2C1_Init+0x50>)
 800173a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800173e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <MX_I2C1_Init+0x50>)
 8001742:	2200      	movs	r2, #0
 8001744:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_I2C1_Init+0x50>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <MX_I2C1_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_I2C1_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <MX_I2C1_Init+0x50>)
 800175a:	f000 fd67 	bl	800222c <HAL_I2C_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001764:	f000 f8f4 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200000c0 	.word	0x200000c0
 8001770:	40005400 	.word	0x40005400
 8001774:	000186a0 	.word	0x000186a0

08001778 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <MX_I2C2_Init+0x50>)
 800177e:	4a13      	ldr	r2, [pc, #76]	; (80017cc <MX_I2C2_Init+0x54>)
 8001780:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_I2C2_Init+0x50>)
 8001784:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <MX_I2C2_Init+0x58>)
 8001786:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_I2C2_Init+0x50>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_I2C2_Init+0x50>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_I2C2_Init+0x50>)
 8001796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800179a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <MX_I2C2_Init+0x50>)
 800179e:	2200      	movs	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_I2C2_Init+0x50>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <MX_I2C2_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_I2C2_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_I2C2_Init+0x50>)
 80017b6:	f000 fd39 	bl	800222c <HAL_I2C_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017c0:	f000 f8c6 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000114 	.word	0x20000114
 80017cc:	40005800 	.word	0x40005800
 80017d0:	000186a0 	.word	0x000186a0

080017d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	; 0x30
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	2224      	movs	r2, #36	; 0x24
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f001 ffca 	bl	800377c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017f0:	4b22      	ldr	r3, [pc, #136]	; (800187c <MX_TIM1_Init+0xa8>)
 80017f2:	4a23      	ldr	r2, [pc, #140]	; (8001880 <MX_TIM1_Init+0xac>)
 80017f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <MX_TIM1_Init+0xa8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fc:	4b1f      	ldr	r3, [pc, #124]	; (800187c <MX_TIM1_Init+0xa8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001802:	4b1e      	ldr	r3, [pc, #120]	; (800187c <MX_TIM1_Init+0xa8>)
 8001804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001808:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180a:	4b1c      	ldr	r3, [pc, #112]	; (800187c <MX_TIM1_Init+0xa8>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <MX_TIM1_Init+0xa8>)
 8001812:	2200      	movs	r2, #0
 8001814:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <MX_TIM1_Init+0xa8>)
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800181c:	2303      	movs	r3, #3
 800181e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001824:	2301      	movs	r3, #1
 8001826:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 800182c:	2308      	movs	r3, #8
 800182e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001834:	2301      	movs	r3, #1
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001838:	2300      	movs	r3, #0
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 800183c:	2308      	movs	r3, #8
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	4619      	mov	r1, r3
 8001846:	480d      	ldr	r0, [pc, #52]	; (800187c <MX_TIM1_Init+0xa8>)
 8001848:	f001 fd40 	bl	80032cc <HAL_TIM_Encoder_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001852:	f000 f87d 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	4619      	mov	r1, r3
 8001862:	4806      	ldr	r0, [pc, #24]	; (800187c <MX_TIM1_Init+0xa8>)
 8001864:	f001 fee8 	bl	8003638 <HAL_TIMEx_MasterConfigSynchronization>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800186e:	f000 f86f 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	3730      	adds	r7, #48	; 0x30
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000168 	.word	0x20000168
 8001880:	40012c00 	.word	0x40012c00

08001884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188a:	f107 0310 	add.w	r3, r7, #16
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001898:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <MX_GPIO_Init+0xc0>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a29      	ldr	r2, [pc, #164]	; (8001944 <MX_GPIO_Init+0xc0>)
 800189e:	f043 0310 	orr.w	r3, r3, #16
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b27      	ldr	r3, [pc, #156]	; (8001944 <MX_GPIO_Init+0xc0>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b0:	4b24      	ldr	r3, [pc, #144]	; (8001944 <MX_GPIO_Init+0xc0>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a23      	ldr	r2, [pc, #140]	; (8001944 <MX_GPIO_Init+0xc0>)
 80018b6:	f043 0320 	orr.w	r3, r3, #32
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	4b21      	ldr	r3, [pc, #132]	; (8001944 <MX_GPIO_Init+0xc0>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0320 	and.w	r3, r3, #32
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c8:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <MX_GPIO_Init+0xc0>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a1d      	ldr	r2, [pc, #116]	; (8001944 <MX_GPIO_Init+0xc0>)
 80018ce:	f043 0308 	orr.w	r3, r3, #8
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <MX_GPIO_Init+0xc0>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e0:	4b18      	ldr	r3, [pc, #96]	; (8001944 <MX_GPIO_Init+0xc0>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	4a17      	ldr	r2, [pc, #92]	; (8001944 <MX_GPIO_Init+0xc0>)
 80018e6:	f043 0304 	orr.w	r3, r3, #4
 80018ea:	6193      	str	r3, [r2, #24]
 80018ec:	4b15      	ldr	r3, [pc, #84]	; (8001944 <MX_GPIO_Init+0xc0>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_HB_GPIO_Port, LED_HB_Pin, GPIO_PIN_RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018fe:	4812      	ldr	r0, [pc, #72]	; (8001948 <MX_GPIO_Init+0xc4>)
 8001900:	f000 fc63 	bl	80021ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_HB_Pin */
  GPIO_InitStruct.Pin = LED_HB_Pin;
 8001904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190a:	2301      	movs	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2302      	movs	r3, #2
 8001914:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_HB_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 0310 	add.w	r3, r7, #16
 800191a:	4619      	mov	r1, r3
 800191c:	480a      	ldr	r0, [pc, #40]	; (8001948 <MX_GPIO_Init+0xc4>)
 800191e:	f000 fab9 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_SW_Pin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 8001922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	4619      	mov	r1, r3
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_GPIO_Init+0xc8>)
 8001938:	f000 faac 	bl	8001e94 <HAL_GPIO_Init>

}
 800193c:	bf00      	nop
 800193e:	3720      	adds	r7, #32
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40021000 	.word	0x40021000
 8001948:	40011000 	.word	0x40011000
 800194c:	40010800 	.word	0x40010800

08001950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001954:	b672      	cpsid	i
}
 8001956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001958:	e7fe      	b.n	8001958 <Error_Handler+0x8>
	...

0800195c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_MspInit+0x5c>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <HAL_MspInit+0x5c>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6193      	str	r3, [r2, #24]
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_MspInit+0x5c>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <HAL_MspInit+0x5c>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <HAL_MspInit+0x5c>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	61d3      	str	r3, [r2, #28]
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <HAL_MspInit+0x5c>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_MspInit+0x60>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <HAL_MspInit+0x60>)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40010000 	.word	0x40010000

080019c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0318 	add.w	r3, r7, #24
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a2b      	ldr	r2, [pc, #172]	; (8001a88 <HAL_I2C_MspInit+0xc8>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d124      	bne.n	8001a2a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e0:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <HAL_I2C_MspInit+0xcc>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4a29      	ldr	r2, [pc, #164]	; (8001a8c <HAL_I2C_MspInit+0xcc>)
 80019e6:	f043 0308 	orr.w	r3, r3, #8
 80019ea:	6193      	str	r3, [r2, #24]
 80019ec:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <HAL_I2C_MspInit+0xcc>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019f8:	23c0      	movs	r3, #192	; 0xc0
 80019fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019fc:	2312      	movs	r3, #18
 80019fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a00:	2303      	movs	r3, #3
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a04:	f107 0318 	add.w	r3, r7, #24
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4821      	ldr	r0, [pc, #132]	; (8001a90 <HAL_I2C_MspInit+0xd0>)
 8001a0c:	f000 fa42 	bl	8001e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a10:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <HAL_I2C_MspInit+0xcc>)
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	4a1d      	ldr	r2, [pc, #116]	; (8001a8c <HAL_I2C_MspInit+0xcc>)
 8001a16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a1a:	61d3      	str	r3, [r2, #28]
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <HAL_I2C_MspInit+0xcc>)
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a28:	e029      	b.n	8001a7e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a19      	ldr	r2, [pc, #100]	; (8001a94 <HAL_I2C_MspInit+0xd4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d124      	bne.n	8001a7e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a34:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <HAL_I2C_MspInit+0xcc>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <HAL_I2C_MspInit+0xcc>)
 8001a3a:	f043 0308 	orr.w	r3, r3, #8
 8001a3e:	6193      	str	r3, [r2, #24]
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_I2C_MspInit+0xcc>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a4c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a52:	2312      	movs	r3, #18
 8001a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5a:	f107 0318 	add.w	r3, r7, #24
 8001a5e:	4619      	mov	r1, r3
 8001a60:	480b      	ldr	r0, [pc, #44]	; (8001a90 <HAL_I2C_MspInit+0xd0>)
 8001a62:	f000 fa17 	bl	8001e94 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_I2C_MspInit+0xcc>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <HAL_I2C_MspInit+0xcc>)
 8001a6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a70:	61d3      	str	r3, [r2, #28]
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_I2C_MspInit+0xcc>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
}
 8001a7e:	bf00      	nop
 8001a80:	3728      	adds	r7, #40	; 0x28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40005400 	.word	0x40005400
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010c00 	.word	0x40010c00
 8001a94:	40005800 	.word	0x40005800

08001a98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a16      	ldr	r2, [pc, #88]	; (8001b0c <HAL_TIM_Encoder_MspInit+0x74>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d124      	bne.n	8001b02 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ab8:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <HAL_TIM_Encoder_MspInit+0x78>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a14      	ldr	r2, [pc, #80]	; (8001b10 <HAL_TIM_Encoder_MspInit+0x78>)
 8001abe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_TIM_Encoder_MspInit+0x78>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <HAL_TIM_Encoder_MspInit+0x78>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <HAL_TIM_Encoder_MspInit+0x78>)
 8001ad6:	f043 0304 	orr.w	r3, r3, #4
 8001ada:	6193      	str	r3, [r2, #24]
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <HAL_TIM_Encoder_MspInit+0x78>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ae8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af6:	f107 0310 	add.w	r3, r7, #16
 8001afa:	4619      	mov	r1, r3
 8001afc:	4805      	ldr	r0, [pc, #20]	; (8001b14 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001afe:	f000 f9c9 	bl	8001e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b02:	bf00      	nop
 8001b04:	3720      	adds	r7, #32
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40012c00 	.word	0x40012c00
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40010800 	.word	0x40010800

08001b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <NMI_Handler+0x4>

08001b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <HardFault_Handler+0x4>

08001b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <MemManage_Handler+0x4>

08001b2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <BusFault_Handler+0x4>

08001b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <UsageFault_Handler+0x4>

08001b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr

08001b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b5e:	f000 f875 	bl	8001c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
	...

08001b74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b74:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b76:	490d      	ldr	r1, [pc, #52]	; (8001bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b78:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b7c:	e002      	b.n	8001b84 <LoopCopyDataInit>

08001b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b82:	3304      	adds	r3, #4

08001b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b88:	d3f9      	bcc.n	8001b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b8c:	4c0a      	ldr	r4, [pc, #40]	; (8001bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b90:	e001      	b.n	8001b96 <LoopFillZerobss>

08001b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b94:	3204      	adds	r2, #4

08001b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b98:	d3fb      	bcc.n	8001b92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b9a:	f7ff ffe4 	bl	8001b66 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b9e:	f001 fdaf 	bl	8003700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ba2:	f7ff fd37 	bl	8001614 <main>
  bx lr
 8001ba6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bac:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001bb0:	08004680 	.word	0x08004680
  ldr r2, =_sbss
 8001bb4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001bb8:	200001b4 	.word	0x200001b4

08001bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC1_2_IRQHandler>
	...

08001bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_Init+0x28>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <HAL_Init+0x28>)
 8001bca:	f043 0310 	orr.w	r3, r3, #16
 8001bce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	f000 f92b 	bl	8001e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd6:	200f      	movs	r0, #15
 8001bd8:	f000 f808 	bl	8001bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bdc:	f7ff febe 	bl	800195c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40022000 	.word	0x40022000

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_InitTick+0x54>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_InitTick+0x58>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f935 	bl	8001e7a <HAL_SYSTICK_Config>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00e      	b.n	8001c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b0f      	cmp	r3, #15
 8001c1e:	d80a      	bhi.n	8001c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c20:	2200      	movs	r2, #0
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f000 f90b 	bl	8001e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c2c:	4a06      	ldr	r2, [pc, #24]	; (8001c48 <HAL_InitTick+0x5c>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000010 	.word	0x20000010
 8001c44:	20000018 	.word	0x20000018
 8001c48:	20000014 	.word	0x20000014

08001c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_IncTick+0x1c>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_IncTick+0x20>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a03      	ldr	r2, [pc, #12]	; (8001c6c <HAL_IncTick+0x20>)
 8001c5e:	6013      	str	r3, [r2, #0]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	20000018 	.word	0x20000018
 8001c6c:	200001b0 	.word	0x200001b0

08001c70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return uwTick;
 8001c74:	4b02      	ldr	r3, [pc, #8]	; (8001c80 <HAL_GetTick+0x10>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	200001b0 	.word	0x200001b0

08001c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff fff0 	bl	8001c70 <HAL_GetTick>
 8001c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9c:	d005      	beq.n	8001caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_Delay+0x44>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001caa:	bf00      	nop
 8001cac:	f7ff ffe0 	bl	8001c70 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d8f7      	bhi.n	8001cac <HAL_Delay+0x28>
  {
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000018 	.word	0x20000018

08001ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	60d3      	str	r3, [r2, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <__NVIC_GetPriorityGrouping+0x18>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f003 0307 	and.w	r3, r3, #7
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	db0a      	blt.n	8001d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	490c      	ldr	r1, [pc, #48]	; (8001d7c <__NVIC_SetPriority+0x4c>)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	0112      	lsls	r2, r2, #4
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	440b      	add	r3, r1
 8001d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d58:	e00a      	b.n	8001d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4908      	ldr	r1, [pc, #32]	; (8001d80 <__NVIC_SetPriority+0x50>)
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	3b04      	subs	r3, #4
 8001d68:	0112      	lsls	r2, r2, #4
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	761a      	strb	r2, [r3, #24]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000e100 	.word	0xe000e100
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b089      	sub	sp, #36	; 0x24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f1c3 0307 	rsb	r3, r3, #7
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	bf28      	it	cs
 8001da2:	2304      	movcs	r3, #4
 8001da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3304      	adds	r3, #4
 8001daa:	2b06      	cmp	r3, #6
 8001dac:	d902      	bls.n	8001db4 <NVIC_EncodePriority+0x30>
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3b03      	subs	r3, #3
 8001db2:	e000      	b.n	8001db6 <NVIC_EncodePriority+0x32>
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd6:	43d9      	mvns	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	4313      	orrs	r3, r2
         );
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3724      	adds	r7, #36	; 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df8:	d301      	bcc.n	8001dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00f      	b.n	8001e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <SysTick_Config+0x40>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e06:	210f      	movs	r1, #15
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0c:	f7ff ff90 	bl	8001d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <SysTick_Config+0x40>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e16:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <SysTick_Config+0x40>)
 8001e18:	2207      	movs	r2, #7
 8001e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	e000e010 	.word	0xe000e010

08001e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ff49 	bl	8001ccc <__NVIC_SetPriorityGrouping>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
 8001e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e54:	f7ff ff5e 	bl	8001d14 <__NVIC_GetPriorityGrouping>
 8001e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	6978      	ldr	r0, [r7, #20]
 8001e60:	f7ff ff90 	bl	8001d84 <NVIC_EncodePriority>
 8001e64:	4602      	mov	r2, r0
 8001e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff5f 	bl	8001d30 <__NVIC_SetPriority>
}
 8001e72:	bf00      	nop
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ffb0 	bl	8001de8 <SysTick_Config>
 8001e88:	4603      	mov	r3, r0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b08b      	sub	sp, #44	; 0x2c
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea6:	e169      	b.n	800217c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	f040 8158 	bne.w	8002176 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4a9a      	ldr	r2, [pc, #616]	; (8002134 <HAL_GPIO_Init+0x2a0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d05e      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001ed0:	4a98      	ldr	r2, [pc, #608]	; (8002134 <HAL_GPIO_Init+0x2a0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d875      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001ed6:	4a98      	ldr	r2, [pc, #608]	; (8002138 <HAL_GPIO_Init+0x2a4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d058      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001edc:	4a96      	ldr	r2, [pc, #600]	; (8002138 <HAL_GPIO_Init+0x2a4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d86f      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001ee2:	4a96      	ldr	r2, [pc, #600]	; (800213c <HAL_GPIO_Init+0x2a8>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d052      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001ee8:	4a94      	ldr	r2, [pc, #592]	; (800213c <HAL_GPIO_Init+0x2a8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d869      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001eee:	4a94      	ldr	r2, [pc, #592]	; (8002140 <HAL_GPIO_Init+0x2ac>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d04c      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001ef4:	4a92      	ldr	r2, [pc, #584]	; (8002140 <HAL_GPIO_Init+0x2ac>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d863      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001efa:	4a92      	ldr	r2, [pc, #584]	; (8002144 <HAL_GPIO_Init+0x2b0>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d046      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001f00:	4a90      	ldr	r2, [pc, #576]	; (8002144 <HAL_GPIO_Init+0x2b0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d85d      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001f06:	2b12      	cmp	r3, #18
 8001f08:	d82a      	bhi.n	8001f60 <HAL_GPIO_Init+0xcc>
 8001f0a:	2b12      	cmp	r3, #18
 8001f0c:	d859      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001f0e:	a201      	add	r2, pc, #4	; (adr r2, 8001f14 <HAL_GPIO_Init+0x80>)
 8001f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f14:	08001f8f 	.word	0x08001f8f
 8001f18:	08001f69 	.word	0x08001f69
 8001f1c:	08001f7b 	.word	0x08001f7b
 8001f20:	08001fbd 	.word	0x08001fbd
 8001f24:	08001fc3 	.word	0x08001fc3
 8001f28:	08001fc3 	.word	0x08001fc3
 8001f2c:	08001fc3 	.word	0x08001fc3
 8001f30:	08001fc3 	.word	0x08001fc3
 8001f34:	08001fc3 	.word	0x08001fc3
 8001f38:	08001fc3 	.word	0x08001fc3
 8001f3c:	08001fc3 	.word	0x08001fc3
 8001f40:	08001fc3 	.word	0x08001fc3
 8001f44:	08001fc3 	.word	0x08001fc3
 8001f48:	08001fc3 	.word	0x08001fc3
 8001f4c:	08001fc3 	.word	0x08001fc3
 8001f50:	08001fc3 	.word	0x08001fc3
 8001f54:	08001fc3 	.word	0x08001fc3
 8001f58:	08001f71 	.word	0x08001f71
 8001f5c:	08001f85 	.word	0x08001f85
 8001f60:	4a79      	ldr	r2, [pc, #484]	; (8002148 <HAL_GPIO_Init+0x2b4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d013      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f66:	e02c      	b.n	8001fc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	623b      	str	r3, [r7, #32]
          break;
 8001f6e:	e029      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	3304      	adds	r3, #4
 8001f76:	623b      	str	r3, [r7, #32]
          break;
 8001f78:	e024      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	3308      	adds	r3, #8
 8001f80:	623b      	str	r3, [r7, #32]
          break;
 8001f82:	e01f      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	330c      	adds	r3, #12
 8001f8a:	623b      	str	r3, [r7, #32]
          break;
 8001f8c:	e01a      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f96:	2304      	movs	r3, #4
 8001f98:	623b      	str	r3, [r7, #32]
          break;
 8001f9a:	e013      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d105      	bne.n	8001fb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	611a      	str	r2, [r3, #16]
          break;
 8001fae:	e009      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	615a      	str	r2, [r3, #20]
          break;
 8001fba:	e003      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	623b      	str	r3, [r7, #32]
          break;
 8001fc0:	e000      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          break;
 8001fc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2bff      	cmp	r3, #255	; 0xff
 8001fc8:	d801      	bhi.n	8001fce <HAL_GPIO_Init+0x13a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	e001      	b.n	8001fd2 <HAL_GPIO_Init+0x13e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	2bff      	cmp	r3, #255	; 0xff
 8001fd8:	d802      	bhi.n	8001fe0 <HAL_GPIO_Init+0x14c>
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	e002      	b.n	8001fe6 <HAL_GPIO_Init+0x152>
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	3b08      	subs	r3, #8
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	210f      	movs	r1, #15
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	6a39      	ldr	r1, [r7, #32]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	431a      	orrs	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80b1 	beq.w	8002176 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002014:	4b4d      	ldr	r3, [pc, #308]	; (800214c <HAL_GPIO_Init+0x2b8>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	4a4c      	ldr	r2, [pc, #304]	; (800214c <HAL_GPIO_Init+0x2b8>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6193      	str	r3, [r2, #24]
 8002020:	4b4a      	ldr	r3, [pc, #296]	; (800214c <HAL_GPIO_Init+0x2b8>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800202c:	4a48      	ldr	r2, [pc, #288]	; (8002150 <HAL_GPIO_Init+0x2bc>)
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002038:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	220f      	movs	r2, #15
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4013      	ands	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a40      	ldr	r2, [pc, #256]	; (8002154 <HAL_GPIO_Init+0x2c0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d013      	beq.n	8002080 <HAL_GPIO_Init+0x1ec>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a3f      	ldr	r2, [pc, #252]	; (8002158 <HAL_GPIO_Init+0x2c4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d00d      	beq.n	800207c <HAL_GPIO_Init+0x1e8>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a3e      	ldr	r2, [pc, #248]	; (800215c <HAL_GPIO_Init+0x2c8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d007      	beq.n	8002078 <HAL_GPIO_Init+0x1e4>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a3d      	ldr	r2, [pc, #244]	; (8002160 <HAL_GPIO_Init+0x2cc>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d101      	bne.n	8002074 <HAL_GPIO_Init+0x1e0>
 8002070:	2303      	movs	r3, #3
 8002072:	e006      	b.n	8002082 <HAL_GPIO_Init+0x1ee>
 8002074:	2304      	movs	r3, #4
 8002076:	e004      	b.n	8002082 <HAL_GPIO_Init+0x1ee>
 8002078:	2302      	movs	r3, #2
 800207a:	e002      	b.n	8002082 <HAL_GPIO_Init+0x1ee>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_GPIO_Init+0x1ee>
 8002080:	2300      	movs	r3, #0
 8002082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002084:	f002 0203 	and.w	r2, r2, #3
 8002088:	0092      	lsls	r2, r2, #2
 800208a:	4093      	lsls	r3, r2
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002092:	492f      	ldr	r1, [pc, #188]	; (8002150 <HAL_GPIO_Init+0x2bc>)
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	3302      	adds	r3, #2
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d006      	beq.n	80020ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020ac:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	492c      	ldr	r1, [pc, #176]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]
 80020b8:	e006      	b.n	80020c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020ba:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	4928      	ldr	r1, [pc, #160]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020d4:	4b23      	ldr	r3, [pc, #140]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	4922      	ldr	r1, [pc, #136]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	491e      	ldr	r1, [pc, #120]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	4918      	ldr	r1, [pc, #96]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	608b      	str	r3, [r1, #8]
 8002108:	e006      	b.n	8002118 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800210a:	4b16      	ldr	r3, [pc, #88]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	43db      	mvns	r3, r3
 8002112:	4914      	ldr	r1, [pc, #80]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 8002114:	4013      	ands	r3, r2
 8002116:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d021      	beq.n	8002168 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002124:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	490e      	ldr	r1, [pc, #56]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	60cb      	str	r3, [r1, #12]
 8002130:	e021      	b.n	8002176 <HAL_GPIO_Init+0x2e2>
 8002132:	bf00      	nop
 8002134:	10320000 	.word	0x10320000
 8002138:	10310000 	.word	0x10310000
 800213c:	10220000 	.word	0x10220000
 8002140:	10210000 	.word	0x10210000
 8002144:	10120000 	.word	0x10120000
 8002148:	10110000 	.word	0x10110000
 800214c:	40021000 	.word	0x40021000
 8002150:	40010000 	.word	0x40010000
 8002154:	40010800 	.word	0x40010800
 8002158:	40010c00 	.word	0x40010c00
 800215c:	40011000 	.word	0x40011000
 8002160:	40011400 	.word	0x40011400
 8002164:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_GPIO_Init+0x304>)
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	43db      	mvns	r3, r3
 8002170:	4909      	ldr	r1, [pc, #36]	; (8002198 <HAL_GPIO_Init+0x304>)
 8002172:	4013      	ands	r3, r2
 8002174:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	3301      	adds	r3, #1
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	fa22 f303 	lsr.w	r3, r2, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	f47f ae8e 	bne.w	8001ea8 <HAL_GPIO_Init+0x14>
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	372c      	adds	r7, #44	; 0x2c
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	40010400 	.word	0x40010400

0800219c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	887b      	ldrh	r3, [r7, #2]
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
 80021b8:	e001      	b.n	80021be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	460b      	mov	r3, r1
 80021d4:	807b      	strh	r3, [r7, #2]
 80021d6:	4613      	mov	r3, r2
 80021d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021da:	787b      	ldrb	r3, [r7, #1]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e0:	887a      	ldrh	r2, [r7, #2]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021e6:	e003      	b.n	80021f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021e8:	887b      	ldrh	r3, [r7, #2]
 80021ea:	041a      	lsls	r2, r3, #16
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	611a      	str	r2, [r3, #16]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b085      	sub	sp, #20
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	460b      	mov	r3, r1
 8002204:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800220c:	887a      	ldrh	r2, [r7, #2]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	041a      	lsls	r2, r3, #16
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	43d9      	mvns	r1, r3
 8002218:	887b      	ldrh	r3, [r7, #2]
 800221a:	400b      	ands	r3, r1
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	611a      	str	r2, [r3, #16]
}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e12b      	b.n	8002496 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff fbb4 	bl	80019c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2224      	movs	r2, #36	; 0x24
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0201 	bic.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800227e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800228e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002290:	f000 ffea 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8002294:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4a81      	ldr	r2, [pc, #516]	; (80024a0 <HAL_I2C_Init+0x274>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d807      	bhi.n	80022b0 <HAL_I2C_Init+0x84>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4a80      	ldr	r2, [pc, #512]	; (80024a4 <HAL_I2C_Init+0x278>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	bf94      	ite	ls
 80022a8:	2301      	movls	r3, #1
 80022aa:	2300      	movhi	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	e006      	b.n	80022be <HAL_I2C_Init+0x92>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4a7d      	ldr	r2, [pc, #500]	; (80024a8 <HAL_I2C_Init+0x27c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	bf94      	ite	ls
 80022b8:	2301      	movls	r3, #1
 80022ba:	2300      	movhi	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e0e7      	b.n	8002496 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4a78      	ldr	r2, [pc, #480]	; (80024ac <HAL_I2C_Init+0x280>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	0c9b      	lsrs	r3, r3, #18
 80022d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4a6a      	ldr	r2, [pc, #424]	; (80024a0 <HAL_I2C_Init+0x274>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d802      	bhi.n	8002300 <HAL_I2C_Init+0xd4>
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	3301      	adds	r3, #1
 80022fe:	e009      	b.n	8002314 <HAL_I2C_Init+0xe8>
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	4a69      	ldr	r2, [pc, #420]	; (80024b0 <HAL_I2C_Init+0x284>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	099b      	lsrs	r3, r3, #6
 8002312:	3301      	adds	r3, #1
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	430b      	orrs	r3, r1
 800231a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002326:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	495c      	ldr	r1, [pc, #368]	; (80024a0 <HAL_I2C_Init+0x274>)
 8002330:	428b      	cmp	r3, r1
 8002332:	d819      	bhi.n	8002368 <HAL_I2C_Init+0x13c>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1e59      	subs	r1, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002342:	1c59      	adds	r1, r3, #1
 8002344:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002348:	400b      	ands	r3, r1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <HAL_I2C_Init+0x138>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1e59      	subs	r1, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	fbb1 f3f3 	udiv	r3, r1, r3
 800235c:	3301      	adds	r3, #1
 800235e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002362:	e051      	b.n	8002408 <HAL_I2C_Init+0x1dc>
 8002364:	2304      	movs	r3, #4
 8002366:	e04f      	b.n	8002408 <HAL_I2C_Init+0x1dc>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d111      	bne.n	8002394 <HAL_I2C_Init+0x168>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1e58      	subs	r0, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6859      	ldr	r1, [r3, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	440b      	add	r3, r1
 800237e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002382:	3301      	adds	r3, #1
 8002384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002388:	2b00      	cmp	r3, #0
 800238a:	bf0c      	ite	eq
 800238c:	2301      	moveq	r3, #1
 800238e:	2300      	movne	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	e012      	b.n	80023ba <HAL_I2C_Init+0x18e>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1e58      	subs	r0, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	0099      	lsls	r1, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023aa:	3301      	adds	r3, #1
 80023ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	bf0c      	ite	eq
 80023b4:	2301      	moveq	r3, #1
 80023b6:	2300      	movne	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_I2C_Init+0x196>
 80023be:	2301      	movs	r3, #1
 80023c0:	e022      	b.n	8002408 <HAL_I2C_Init+0x1dc>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10e      	bne.n	80023e8 <HAL_I2C_Init+0x1bc>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1e58      	subs	r0, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6859      	ldr	r1, [r3, #4]
 80023d2:	460b      	mov	r3, r1
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	440b      	add	r3, r1
 80023d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80023dc:	3301      	adds	r3, #1
 80023de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023e6:	e00f      	b.n	8002408 <HAL_I2C_Init+0x1dc>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	1e58      	subs	r0, r3, #1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6859      	ldr	r1, [r3, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	0099      	lsls	r1, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80023fe:	3301      	adds	r3, #1
 8002400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002404:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	6809      	ldr	r1, [r1, #0]
 800240c:	4313      	orrs	r3, r2
 800240e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69da      	ldr	r2, [r3, #28]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002436:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6911      	ldr	r1, [r2, #16]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68d2      	ldr	r2, [r2, #12]
 8002442:	4311      	orrs	r1, r2
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	430b      	orrs	r3, r1
 800244a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695a      	ldr	r2, [r3, #20]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	000186a0 	.word	0x000186a0
 80024a4:	001e847f 	.word	0x001e847f
 80024a8:	003d08ff 	.word	0x003d08ff
 80024ac:	431bde83 	.word	0x431bde83
 80024b0:	10624dd3 	.word	0x10624dd3

080024b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	461a      	mov	r2, r3
 80024c0:	460b      	mov	r3, r1
 80024c2:	817b      	strh	r3, [r7, #10]
 80024c4:	4613      	mov	r3, r2
 80024c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024c8:	f7ff fbd2 	bl	8001c70 <HAL_GetTick>
 80024cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	f040 80e0 	bne.w	800269c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	2319      	movs	r3, #25
 80024e2:	2201      	movs	r2, #1
 80024e4:	4970      	ldr	r1, [pc, #448]	; (80026a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f964 	bl	80027b4 <I2C_WaitOnFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024f2:	2302      	movs	r3, #2
 80024f4:	e0d3      	b.n	800269e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_I2C_Master_Transmit+0x50>
 8002500:	2302      	movs	r3, #2
 8002502:	e0cc      	b.n	800269e <HAL_I2C_Master_Transmit+0x1ea>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b01      	cmp	r3, #1
 8002518:	d007      	beq.n	800252a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002538:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2221      	movs	r2, #33	; 0x21
 800253e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2210      	movs	r2, #16
 8002546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	893a      	ldrh	r2, [r7, #8]
 800255a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4a50      	ldr	r2, [pc, #320]	; (80026ac <HAL_I2C_Master_Transmit+0x1f8>)
 800256a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800256c:	8979      	ldrh	r1, [r7, #10]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	6a3a      	ldr	r2, [r7, #32]
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f89c 	bl	80026b0 <I2C_MasterRequestWrite>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e08d      	b.n	800269e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002598:	e066      	b.n	8002668 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	6a39      	ldr	r1, [r7, #32]
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f9de 	bl	8002960 <I2C_WaitOnTXEFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00d      	beq.n	80025c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d107      	bne.n	80025c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e06b      	b.n	800269e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	781a      	ldrb	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b04      	cmp	r3, #4
 8002602:	d11b      	bne.n	800263c <HAL_I2C_Master_Transmit+0x188>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002608:	2b00      	cmp	r3, #0
 800260a:	d017      	beq.n	800263c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	781a      	ldrb	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	6a39      	ldr	r1, [r7, #32]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f9ce 	bl	80029e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00d      	beq.n	8002668 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	2b04      	cmp	r3, #4
 8002652:	d107      	bne.n	8002664 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002662:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e01a      	b.n	800269e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	2b00      	cmp	r3, #0
 800266e:	d194      	bne.n	800259a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	e000      	b.n	800269e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800269c:	2302      	movs	r3, #2
  }
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	00100002 	.word	0x00100002
 80026ac:	ffff0000 	.word	0xffff0000

080026b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	460b      	mov	r3, r1
 80026be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d006      	beq.n	80026da <I2C_MasterRequestWrite+0x2a>
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d003      	beq.n	80026da <I2C_MasterRequestWrite+0x2a>
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026d8:	d108      	bne.n	80026ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e00b      	b.n	8002704 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	2b12      	cmp	r3, #18
 80026f2:	d107      	bne.n	8002704 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002702:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f84f 	bl	80027b4 <I2C_WaitOnFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00d      	beq.n	8002738 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800272a:	d103      	bne.n	8002734 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002732:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e035      	b.n	80027a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002740:	d108      	bne.n	8002754 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002742:	897b      	ldrh	r3, [r7, #10]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002750:	611a      	str	r2, [r3, #16]
 8002752:	e01b      	b.n	800278c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002754:	897b      	ldrh	r3, [r7, #10]
 8002756:	11db      	asrs	r3, r3, #7
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f003 0306 	and.w	r3, r3, #6
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f063 030f 	orn	r3, r3, #15
 8002764:	b2da      	uxtb	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	490e      	ldr	r1, [pc, #56]	; (80027ac <I2C_MasterRequestWrite+0xfc>)
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f875 	bl	8002862 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e010      	b.n	80027a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002782:	897b      	ldrh	r3, [r7, #10]
 8002784:	b2da      	uxtb	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	4907      	ldr	r1, [pc, #28]	; (80027b0 <I2C_MasterRequestWrite+0x100>)
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f865 	bl	8002862 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	00010008 	.word	0x00010008
 80027b0:	00010002 	.word	0x00010002

080027b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	4613      	mov	r3, r2
 80027c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027c4:	e025      	b.n	8002812 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027cc:	d021      	beq.n	8002812 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ce:	f7ff fa4f 	bl	8001c70 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d302      	bcc.n	80027e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d116      	bne.n	8002812 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f043 0220 	orr.w	r2, r3, #32
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e023      	b.n	800285a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	0c1b      	lsrs	r3, r3, #16
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b01      	cmp	r3, #1
 800281a:	d10d      	bne.n	8002838 <I2C_WaitOnFlagUntilTimeout+0x84>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4013      	ands	r3, r2
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	bf0c      	ite	eq
 800282e:	2301      	moveq	r3, #1
 8002830:	2300      	movne	r3, #0
 8002832:	b2db      	uxtb	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	e00c      	b.n	8002852 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	43da      	mvns	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4013      	ands	r3, r2
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	bf0c      	ite	eq
 800284a:	2301      	moveq	r3, #1
 800284c:	2300      	movne	r3, #0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	461a      	mov	r2, r3
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	429a      	cmp	r2, r3
 8002856:	d0b6      	beq.n	80027c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002870:	e051      	b.n	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002880:	d123      	bne.n	80028ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002890:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800289a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f043 0204 	orr.w	r2, r3, #4
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e046      	b.n	8002958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d0:	d021      	beq.n	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d2:	f7ff f9cd 	bl	8001c70 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d302      	bcc.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d116      	bne.n	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2220      	movs	r2, #32
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f043 0220 	orr.w	r2, r3, #32
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e020      	b.n	8002958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	0c1b      	lsrs	r3, r3, #16
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d10c      	bne.n	800293a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	43da      	mvns	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4013      	ands	r3, r2
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	bf14      	ite	ne
 8002932:	2301      	movne	r3, #1
 8002934:	2300      	moveq	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	e00b      	b.n	8002952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	43da      	mvns	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	4013      	ands	r3, r2
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf14      	ite	ne
 800294c:	2301      	movne	r3, #1
 800294e:	2300      	moveq	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d18d      	bne.n	8002872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800296c:	e02d      	b.n	80029ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f878 	bl	8002a64 <I2C_IsAcknowledgeFailed>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e02d      	b.n	80029da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002984:	d021      	beq.n	80029ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002986:	f7ff f973 	bl	8001c70 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	429a      	cmp	r2, r3
 8002994:	d302      	bcc.n	800299c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d116      	bne.n	80029ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f043 0220 	orr.w	r2, r3, #32
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e007      	b.n	80029da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d4:	2b80      	cmp	r3, #128	; 0x80
 80029d6:	d1ca      	bne.n	800296e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029ee:	e02d      	b.n	8002a4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f837 	bl	8002a64 <I2C_IsAcknowledgeFailed>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e02d      	b.n	8002a5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a06:	d021      	beq.n	8002a4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a08:	f7ff f932 	bl	8001c70 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d302      	bcc.n	8002a1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d116      	bne.n	8002a4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	f043 0220 	orr.w	r2, r3, #32
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e007      	b.n	8002a5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d1ca      	bne.n	80029f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7a:	d11b      	bne.n	8002ab4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f043 0204 	orr.w	r2, r3, #4
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e272      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 8087 	beq.w	8002bee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ae0:	4b92      	ldr	r3, [pc, #584]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 030c 	and.w	r3, r3, #12
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d00c      	beq.n	8002b06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002aec:	4b8f      	ldr	r3, [pc, #572]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 030c 	and.w	r3, r3, #12
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d112      	bne.n	8002b1e <HAL_RCC_OscConfig+0x5e>
 8002af8:	4b8c      	ldr	r3, [pc, #560]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b04:	d10b      	bne.n	8002b1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b06:	4b89      	ldr	r3, [pc, #548]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d06c      	beq.n	8002bec <HAL_RCC_OscConfig+0x12c>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d168      	bne.n	8002bec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e24c      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b26:	d106      	bne.n	8002b36 <HAL_RCC_OscConfig+0x76>
 8002b28:	4b80      	ldr	r3, [pc, #512]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a7f      	ldr	r2, [pc, #508]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	e02e      	b.n	8002b94 <HAL_RCC_OscConfig+0xd4>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x98>
 8002b3e:	4b7b      	ldr	r3, [pc, #492]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a7a      	ldr	r2, [pc, #488]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	4b78      	ldr	r3, [pc, #480]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a77      	ldr	r2, [pc, #476]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002b50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e01d      	b.n	8002b94 <HAL_RCC_OscConfig+0xd4>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCC_OscConfig+0xbc>
 8002b62:	4b72      	ldr	r3, [pc, #456]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a71      	ldr	r2, [pc, #452]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	4b6f      	ldr	r3, [pc, #444]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a6e      	ldr	r2, [pc, #440]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	e00b      	b.n	8002b94 <HAL_RCC_OscConfig+0xd4>
 8002b7c:	4b6b      	ldr	r3, [pc, #428]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a6a      	ldr	r2, [pc, #424]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b68      	ldr	r3, [pc, #416]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a67      	ldr	r2, [pc, #412]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d013      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7ff f868 	bl	8001c70 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba4:	f7ff f864 	bl	8001c70 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b64      	cmp	r3, #100	; 0x64
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e200      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	4b5d      	ldr	r3, [pc, #372]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0xe4>
 8002bc2:	e014      	b.n	8002bee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7ff f854 	bl	8001c70 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bcc:	f7ff f850 	bl	8001c70 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	; 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e1ec      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bde:	4b53      	ldr	r3, [pc, #332]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x10c>
 8002bea:	e000      	b.n	8002bee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d063      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bfa:	4b4c      	ldr	r3, [pc, #304]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00b      	beq.n	8002c1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c06:	4b49      	ldr	r3, [pc, #292]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d11c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x18c>
 8002c12:	4b46      	ldr	r3, [pc, #280]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d116      	bne.n	8002c4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1e:	4b43      	ldr	r3, [pc, #268]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d005      	beq.n	8002c36 <HAL_RCC_OscConfig+0x176>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d001      	beq.n	8002c36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e1c0      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c36:	4b3d      	ldr	r3, [pc, #244]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4939      	ldr	r1, [pc, #228]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4a:	e03a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d020      	beq.n	8002c96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c54:	4b36      	ldr	r3, [pc, #216]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5a:	f7ff f809 	bl	8001c70 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c62:	f7ff f805 	bl	8001c70 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e1a1      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c74:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c80:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4927      	ldr	r1, [pc, #156]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	600b      	str	r3, [r1, #0]
 8002c94:	e015      	b.n	8002cc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c96:	4b26      	ldr	r3, [pc, #152]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7fe ffe8 	bl	8001c70 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca4:	f7fe ffe4 	bl	8001c70 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e180      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb6:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d03a      	beq.n	8002d44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d019      	beq.n	8002d0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd6:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <HAL_RCC_OscConfig+0x274>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cdc:	f7fe ffc8 	bl	8001c70 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce4:	f7fe ffc4 	bl	8001c70 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e160      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d02:	2001      	movs	r0, #1
 8002d04:	f000 fac4 	bl	8003290 <RCC_Delay>
 8002d08:	e01c      	b.n	8002d44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <HAL_RCC_OscConfig+0x274>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d10:	f7fe ffae 	bl	8001c70 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d16:	e00f      	b.n	8002d38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d18:	f7fe ffaa 	bl	8001c70 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d908      	bls.n	8002d38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e146      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4f8>
 8002d2a:	bf00      	nop
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	42420000 	.word	0x42420000
 8002d34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d38:	4b92      	ldr	r3, [pc, #584]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e9      	bne.n	8002d18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80a6 	beq.w	8002e9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d52:	2300      	movs	r3, #0
 8002d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d56:	4b8b      	ldr	r3, [pc, #556]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10d      	bne.n	8002d7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d62:	4b88      	ldr	r3, [pc, #544]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	4a87      	ldr	r2, [pc, #540]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	61d3      	str	r3, [r2, #28]
 8002d6e:	4b85      	ldr	r3, [pc, #532]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7e:	4b82      	ldr	r3, [pc, #520]	; (8002f88 <HAL_RCC_OscConfig+0x4c8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d118      	bne.n	8002dbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d8a:	4b7f      	ldr	r3, [pc, #508]	; (8002f88 <HAL_RCC_OscConfig+0x4c8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a7e      	ldr	r2, [pc, #504]	; (8002f88 <HAL_RCC_OscConfig+0x4c8>)
 8002d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d96:	f7fe ff6b 	bl	8001c70 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9e:	f7fe ff67 	bl	8001c70 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b64      	cmp	r3, #100	; 0x64
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e103      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db0:	4b75      	ldr	r3, [pc, #468]	; (8002f88 <HAL_RCC_OscConfig+0x4c8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d106      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x312>
 8002dc4:	4b6f      	ldr	r3, [pc, #444]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	4a6e      	ldr	r2, [pc, #440]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	6213      	str	r3, [r2, #32]
 8002dd0:	e02d      	b.n	8002e2e <HAL_RCC_OscConfig+0x36e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x334>
 8002dda:	4b6a      	ldr	r3, [pc, #424]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	4a69      	ldr	r2, [pc, #420]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	f023 0301 	bic.w	r3, r3, #1
 8002de4:	6213      	str	r3, [r2, #32]
 8002de6:	4b67      	ldr	r3, [pc, #412]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	4a66      	ldr	r2, [pc, #408]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	f023 0304 	bic.w	r3, r3, #4
 8002df0:	6213      	str	r3, [r2, #32]
 8002df2:	e01c      	b.n	8002e2e <HAL_RCC_OscConfig+0x36e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b05      	cmp	r3, #5
 8002dfa:	d10c      	bne.n	8002e16 <HAL_RCC_OscConfig+0x356>
 8002dfc:	4b61      	ldr	r3, [pc, #388]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	4a60      	ldr	r2, [pc, #384]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002e02:	f043 0304 	orr.w	r3, r3, #4
 8002e06:	6213      	str	r3, [r2, #32]
 8002e08:	4b5e      	ldr	r3, [pc, #376]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	4a5d      	ldr	r2, [pc, #372]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	6213      	str	r3, [r2, #32]
 8002e14:	e00b      	b.n	8002e2e <HAL_RCC_OscConfig+0x36e>
 8002e16:	4b5b      	ldr	r3, [pc, #364]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	4a5a      	ldr	r2, [pc, #360]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	6213      	str	r3, [r2, #32]
 8002e22:	4b58      	ldr	r3, [pc, #352]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	4a57      	ldr	r2, [pc, #348]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002e28:	f023 0304 	bic.w	r3, r3, #4
 8002e2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d015      	beq.n	8002e62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e36:	f7fe ff1b 	bl	8001c70 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3c:	e00a      	b.n	8002e54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3e:	f7fe ff17 	bl	8001c70 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e0b1      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e54:	4b4b      	ldr	r3, [pc, #300]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0ee      	beq.n	8002e3e <HAL_RCC_OscConfig+0x37e>
 8002e60:	e014      	b.n	8002e8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e62:	f7fe ff05 	bl	8001c70 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e68:	e00a      	b.n	8002e80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f7fe ff01 	bl	8001c70 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e09b      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e80:	4b40      	ldr	r3, [pc, #256]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1ee      	bne.n	8002e6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d105      	bne.n	8002e9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e92:	4b3c      	ldr	r3, [pc, #240]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	4a3b      	ldr	r2, [pc, #236]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 8087 	beq.w	8002fb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ea8:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 030c 	and.w	r3, r3, #12
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d061      	beq.n	8002f78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d146      	bne.n	8002f4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebc:	4b33      	ldr	r3, [pc, #204]	; (8002f8c <HAL_RCC_OscConfig+0x4cc>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec2:	f7fe fed5 	bl	8001c70 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eca:	f7fe fed1 	bl	8001c70 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e06d      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002edc:	4b29      	ldr	r3, [pc, #164]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1f0      	bne.n	8002eca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef0:	d108      	bne.n	8002f04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ef2:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	4921      	ldr	r1, [pc, #132]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f04:	4b1f      	ldr	r3, [pc, #124]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a19      	ldr	r1, [r3, #32]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	430b      	orrs	r3, r1
 8002f16:	491b      	ldr	r1, [pc, #108]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f1c:	4b1b      	ldr	r3, [pc, #108]	; (8002f8c <HAL_RCC_OscConfig+0x4cc>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f22:	f7fe fea5 	bl	8001c70 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2a:	f7fe fea1 	bl	8001c70 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e03d      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f3c:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x46a>
 8002f48:	e035      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4a:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <HAL_RCC_OscConfig+0x4cc>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe fe8e 	bl	8001c70 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fe fe8a 	bl	8001c70 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e026      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x498>
 8002f76:	e01e      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e019      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4f8>
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40007000 	.word	0x40007000
 8002f8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCC_OscConfig+0x500>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d106      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d001      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000

08002fc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0d0      	b.n	800317a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b6a      	ldr	r3, [pc, #424]	; (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d910      	bls.n	8003008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b67      	ldr	r3, [pc, #412]	; (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 0207 	bic.w	r2, r3, #7
 8002fee:	4965      	ldr	r1, [pc, #404]	; (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b63      	ldr	r3, [pc, #396]	; (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0b8      	b.n	800317a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d020      	beq.n	8003056 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003020:	4b59      	ldr	r3, [pc, #356]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4a58      	ldr	r2, [pc, #352]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800302a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003038:	4b53      	ldr	r3, [pc, #332]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4a52      	ldr	r2, [pc, #328]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003042:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003044:	4b50      	ldr	r3, [pc, #320]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	494d      	ldr	r1, [pc, #308]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d040      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d107      	bne.n	800307a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306a:	4b47      	ldr	r3, [pc, #284]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d115      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e07f      	b.n	800317a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d107      	bne.n	8003092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003082:	4b41      	ldr	r3, [pc, #260]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e073      	b.n	800317a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003092:	4b3d      	ldr	r3, [pc, #244]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e06b      	b.n	800317a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a2:	4b39      	ldr	r3, [pc, #228]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f023 0203 	bic.w	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4936      	ldr	r1, [pc, #216]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b4:	f7fe fddc 	bl	8001c70 <HAL_GetTick>
 80030b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030bc:	f7fe fdd8 	bl	8001c70 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e053      	b.n	800317a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d2:	4b2d      	ldr	r3, [pc, #180]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 020c 	and.w	r2, r3, #12
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d1eb      	bne.n	80030bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030e4:	4b27      	ldr	r3, [pc, #156]	; (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d210      	bcs.n	8003114 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b24      	ldr	r3, [pc, #144]	; (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 0207 	bic.w	r2, r3, #7
 80030fa:	4922      	ldr	r1, [pc, #136]	; (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b20      	ldr	r3, [pc, #128]	; (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e032      	b.n	800317a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003120:	4b19      	ldr	r3, [pc, #100]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4916      	ldr	r1, [pc, #88]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	4313      	orrs	r3, r2
 8003130:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d009      	beq.n	8003152 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800313e:	4b12      	ldr	r3, [pc, #72]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	490e      	ldr	r1, [pc, #56]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 800314e:	4313      	orrs	r3, r2
 8003150:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003152:	f000 f821 	bl	8003198 <HAL_RCC_GetSysClockFreq>
 8003156:	4602      	mov	r2, r0
 8003158:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	490a      	ldr	r1, [pc, #40]	; (800318c <HAL_RCC_ClockConfig+0x1c8>)
 8003164:	5ccb      	ldrb	r3, [r1, r3]
 8003166:	fa22 f303 	lsr.w	r3, r2, r3
 800316a:	4a09      	ldr	r2, [pc, #36]	; (8003190 <HAL_RCC_ClockConfig+0x1cc>)
 800316c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800316e:	4b09      	ldr	r3, [pc, #36]	; (8003194 <HAL_RCC_ClockConfig+0x1d0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe fd3a 	bl	8001bec <HAL_InitTick>

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40022000 	.word	0x40022000
 8003188:	40021000 	.word	0x40021000
 800318c:	08004604 	.word	0x08004604
 8003190:	20000010 	.word	0x20000010
 8003194:	20000014 	.word	0x20000014

08003198 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003198:	b490      	push	{r4, r7}
 800319a:	b08a      	sub	sp, #40	; 0x28
 800319c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800319e:	4b29      	ldr	r3, [pc, #164]	; (8003244 <HAL_RCC_GetSysClockFreq+0xac>)
 80031a0:	1d3c      	adds	r4, r7, #4
 80031a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031a8:	f240 2301 	movw	r3, #513	; 0x201
 80031ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
 80031b6:	2300      	movs	r3, #0
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031c2:	4b21      	ldr	r3, [pc, #132]	; (8003248 <HAL_RCC_GetSysClockFreq+0xb0>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d002      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x40>
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d003      	beq.n	80031de <HAL_RCC_GetSysClockFreq+0x46>
 80031d6:	e02b      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031d8:	4b1c      	ldr	r3, [pc, #112]	; (800324c <HAL_RCC_GetSysClockFreq+0xb4>)
 80031da:	623b      	str	r3, [r7, #32]
      break;
 80031dc:	e02b      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	0c9b      	lsrs	r3, r3, #18
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	3328      	adds	r3, #40	; 0x28
 80031e8:	443b      	add	r3, r7
 80031ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031ee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d012      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031fa:	4b13      	ldr	r3, [pc, #76]	; (8003248 <HAL_RCC_GetSysClockFreq+0xb0>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	0c5b      	lsrs	r3, r3, #17
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	3328      	adds	r3, #40	; 0x28
 8003206:	443b      	add	r3, r7
 8003208:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800320c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	4a0e      	ldr	r2, [pc, #56]	; (800324c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003212:	fb03 f202 	mul.w	r2, r3, r2
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
 800321e:	e004      	b.n	800322a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	4a0b      	ldr	r2, [pc, #44]	; (8003250 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003224:	fb02 f303 	mul.w	r3, r2, r3
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	623b      	str	r3, [r7, #32]
      break;
 800322e:	e002      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003230:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003232:	623b      	str	r3, [r7, #32]
      break;
 8003234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003236:	6a3b      	ldr	r3, [r7, #32]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3728      	adds	r7, #40	; 0x28
 800323c:	46bd      	mov	sp, r7
 800323e:	bc90      	pop	{r4, r7}
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	080045f4 	.word	0x080045f4
 8003248:	40021000 	.word	0x40021000
 800324c:	007a1200 	.word	0x007a1200
 8003250:	003d0900 	.word	0x003d0900

08003254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003258:	4b02      	ldr	r3, [pc, #8]	; (8003264 <HAL_RCC_GetHCLKFreq+0x10>)
 800325a:	681b      	ldr	r3, [r3, #0]
}
 800325c:	4618      	mov	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr
 8003264:	20000010 	.word	0x20000010

08003268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800326c:	f7ff fff2 	bl	8003254 <HAL_RCC_GetHCLKFreq>
 8003270:	4602      	mov	r2, r0
 8003272:	4b05      	ldr	r3, [pc, #20]	; (8003288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	0a1b      	lsrs	r3, r3, #8
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	4903      	ldr	r1, [pc, #12]	; (800328c <HAL_RCC_GetPCLK1Freq+0x24>)
 800327e:	5ccb      	ldrb	r3, [r1, r3]
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003284:	4618      	mov	r0, r3
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40021000 	.word	0x40021000
 800328c:	08004614 	.word	0x08004614

08003290 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003298:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <RCC_Delay+0x34>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a0a      	ldr	r2, [pc, #40]	; (80032c8 <RCC_Delay+0x38>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	0a5b      	lsrs	r3, r3, #9
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
 80032aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032ac:	bf00      	nop
  }
  while (Delay --);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1e5a      	subs	r2, r3, #1
 80032b2:	60fa      	str	r2, [r7, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1f9      	bne.n	80032ac <RCC_Delay+0x1c>
}
 80032b8:	bf00      	nop
 80032ba:	bf00      	nop
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr
 80032c4:	20000010 	.word	0x20000010
 80032c8:	10624dd3 	.word	0x10624dd3

080032cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e093      	b.n	8003408 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d106      	bne.n	80032fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7fe fbcf 	bl	8001a98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2202      	movs	r2, #2
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003310:	f023 0307 	bic.w	r3, r3, #7
 8003314:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3304      	adds	r3, #4
 800331e:	4619      	mov	r1, r3
 8003320:	4610      	mov	r0, r2
 8003322:	f000 f903 	bl	800352c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800334e:	f023 0303 	bic.w	r3, r3, #3
 8003352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	4313      	orrs	r3, r2
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800336c:	f023 030c 	bic.w	r3, r3, #12
 8003370:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003378:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800337c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	4313      	orrs	r3, r2
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	011a      	lsls	r2, r3, #4
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	031b      	lsls	r3, r3, #12
 800339c:	4313      	orrs	r3, r2
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80033aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	4313      	orrs	r3, r2
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003420:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003428:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003430:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003438:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d110      	bne.n	8003462 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d102      	bne.n	800344c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003446:	7b7b      	ldrb	r3, [r7, #13]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d001      	beq.n	8003450 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e069      	b.n	8003524 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003460:	e031      	b.n	80034c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b04      	cmp	r3, #4
 8003466:	d110      	bne.n	800348a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003468:	7bbb      	ldrb	r3, [r7, #14]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d102      	bne.n	8003474 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800346e:	7b3b      	ldrb	r3, [r7, #12]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d001      	beq.n	8003478 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e055      	b.n	8003524 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003488:	e01d      	b.n	80034c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d108      	bne.n	80034a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003490:	7bbb      	ldrb	r3, [r7, #14]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d105      	bne.n	80034a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003496:	7b7b      	ldrb	r3, [r7, #13]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d102      	bne.n	80034a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800349c:	7b3b      	ldrb	r3, [r7, #12]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d001      	beq.n	80034a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e03e      	b.n	8003524 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2202      	movs	r2, #2
 80034b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2202      	movs	r2, #2
 80034ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_TIM_Encoder_Start+0xc4>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d008      	beq.n	80034e4 <HAL_TIM_Encoder_Start+0xd4>
 80034d2:	e00f      	b.n	80034f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2201      	movs	r2, #1
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 f887 	bl	80035f0 <TIM_CCxChannelCmd>
      break;
 80034e2:	e016      	b.n	8003512 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2201      	movs	r2, #1
 80034ea:	2104      	movs	r1, #4
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 f87f 	bl	80035f0 <TIM_CCxChannelCmd>
      break;
 80034f2:	e00e      	b.n	8003512 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2201      	movs	r2, #1
 80034fa:	2100      	movs	r1, #0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 f877 	bl	80035f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2201      	movs	r2, #1
 8003508:	2104      	movs	r1, #4
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f870 	bl	80035f0 <TIM_CCxChannelCmd>
      break;
 8003510:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0201 	orr.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a29      	ldr	r2, [pc, #164]	; (80035e4 <TIM_Base_SetConfig+0xb8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00b      	beq.n	800355c <TIM_Base_SetConfig+0x30>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354a:	d007      	beq.n	800355c <TIM_Base_SetConfig+0x30>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a26      	ldr	r2, [pc, #152]	; (80035e8 <TIM_Base_SetConfig+0xbc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d003      	beq.n	800355c <TIM_Base_SetConfig+0x30>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a25      	ldr	r2, [pc, #148]	; (80035ec <TIM_Base_SetConfig+0xc0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d108      	bne.n	800356e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a1c      	ldr	r2, [pc, #112]	; (80035e4 <TIM_Base_SetConfig+0xb8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00b      	beq.n	800358e <TIM_Base_SetConfig+0x62>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357c:	d007      	beq.n	800358e <TIM_Base_SetConfig+0x62>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a19      	ldr	r2, [pc, #100]	; (80035e8 <TIM_Base_SetConfig+0xbc>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d003      	beq.n	800358e <TIM_Base_SetConfig+0x62>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a18      	ldr	r2, [pc, #96]	; (80035ec <TIM_Base_SetConfig+0xc0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d108      	bne.n	80035a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a07      	ldr	r2, [pc, #28]	; (80035e4 <TIM_Base_SetConfig+0xb8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d103      	bne.n	80035d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	615a      	str	r2, [r3, #20]
}
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	40012c00 	.word	0x40012c00
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800

080035f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f003 031f 	and.w	r3, r3, #31
 8003602:	2201      	movs	r2, #1
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a1a      	ldr	r2, [r3, #32]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	43db      	mvns	r3, r3
 8003612:	401a      	ands	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a1a      	ldr	r2, [r3, #32]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	fa01 f303 	lsl.w	r3, r1, r3
 8003628:	431a      	orrs	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	621a      	str	r2, [r3, #32]
}
 800362e:	bf00      	nop
 8003630:	371c      	adds	r7, #28
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr

08003638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800364c:	2302      	movs	r3, #2
 800364e:	e046      	b.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a16      	ldr	r2, [pc, #88]	; (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800369c:	d009      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a12      	ldr	r2, [pc, #72]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a10      	ldr	r2, [pc, #64]	; (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10c      	bne.n	80036cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr
 80036e8:	40012c00 	.word	0x40012c00
 80036ec:	40000400 	.word	0x40000400
 80036f0:	40000800 	.word	0x40000800

080036f4 <__errno>:
 80036f4:	4b01      	ldr	r3, [pc, #4]	; (80036fc <__errno+0x8>)
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	2000001c 	.word	0x2000001c

08003700 <__libc_init_array>:
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	2600      	movs	r6, #0
 8003704:	4d0c      	ldr	r5, [pc, #48]	; (8003738 <__libc_init_array+0x38>)
 8003706:	4c0d      	ldr	r4, [pc, #52]	; (800373c <__libc_init_array+0x3c>)
 8003708:	1b64      	subs	r4, r4, r5
 800370a:	10a4      	asrs	r4, r4, #2
 800370c:	42a6      	cmp	r6, r4
 800370e:	d109      	bne.n	8003724 <__libc_init_array+0x24>
 8003710:	f000 ff60 	bl	80045d4 <_init>
 8003714:	2600      	movs	r6, #0
 8003716:	4d0a      	ldr	r5, [pc, #40]	; (8003740 <__libc_init_array+0x40>)
 8003718:	4c0a      	ldr	r4, [pc, #40]	; (8003744 <__libc_init_array+0x44>)
 800371a:	1b64      	subs	r4, r4, r5
 800371c:	10a4      	asrs	r4, r4, #2
 800371e:	42a6      	cmp	r6, r4
 8003720:	d105      	bne.n	800372e <__libc_init_array+0x2e>
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	f855 3b04 	ldr.w	r3, [r5], #4
 8003728:	4798      	blx	r3
 800372a:	3601      	adds	r6, #1
 800372c:	e7ee      	b.n	800370c <__libc_init_array+0xc>
 800372e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003732:	4798      	blx	r3
 8003734:	3601      	adds	r6, #1
 8003736:	e7f2      	b.n	800371e <__libc_init_array+0x1e>
 8003738:	08004678 	.word	0x08004678
 800373c:	08004678 	.word	0x08004678
 8003740:	08004678 	.word	0x08004678
 8003744:	0800467c 	.word	0x0800467c

08003748 <__itoa>:
 8003748:	1e93      	subs	r3, r2, #2
 800374a:	2b22      	cmp	r3, #34	; 0x22
 800374c:	b510      	push	{r4, lr}
 800374e:	460c      	mov	r4, r1
 8003750:	d904      	bls.n	800375c <__itoa+0x14>
 8003752:	2300      	movs	r3, #0
 8003754:	461c      	mov	r4, r3
 8003756:	700b      	strb	r3, [r1, #0]
 8003758:	4620      	mov	r0, r4
 800375a:	bd10      	pop	{r4, pc}
 800375c:	2a0a      	cmp	r2, #10
 800375e:	d109      	bne.n	8003774 <__itoa+0x2c>
 8003760:	2800      	cmp	r0, #0
 8003762:	da07      	bge.n	8003774 <__itoa+0x2c>
 8003764:	232d      	movs	r3, #45	; 0x2d
 8003766:	700b      	strb	r3, [r1, #0]
 8003768:	2101      	movs	r1, #1
 800376a:	4240      	negs	r0, r0
 800376c:	4421      	add	r1, r4
 800376e:	f000 f80d 	bl	800378c <__utoa>
 8003772:	e7f1      	b.n	8003758 <__itoa+0x10>
 8003774:	2100      	movs	r1, #0
 8003776:	e7f9      	b.n	800376c <__itoa+0x24>

08003778 <itoa>:
 8003778:	f7ff bfe6 	b.w	8003748 <__itoa>

0800377c <memset>:
 800377c:	4603      	mov	r3, r0
 800377e:	4402      	add	r2, r0
 8003780:	4293      	cmp	r3, r2
 8003782:	d100      	bne.n	8003786 <memset+0xa>
 8003784:	4770      	bx	lr
 8003786:	f803 1b01 	strb.w	r1, [r3], #1
 800378a:	e7f9      	b.n	8003780 <memset+0x4>

0800378c <__utoa>:
 800378c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800378e:	b08b      	sub	sp, #44	; 0x2c
 8003790:	4605      	mov	r5, r0
 8003792:	460b      	mov	r3, r1
 8003794:	466e      	mov	r6, sp
 8003796:	4c1d      	ldr	r4, [pc, #116]	; (800380c <__utoa+0x80>)
 8003798:	f104 0c20 	add.w	ip, r4, #32
 800379c:	4637      	mov	r7, r6
 800379e:	6820      	ldr	r0, [r4, #0]
 80037a0:	6861      	ldr	r1, [r4, #4]
 80037a2:	3408      	adds	r4, #8
 80037a4:	c703      	stmia	r7!, {r0, r1}
 80037a6:	4564      	cmp	r4, ip
 80037a8:	463e      	mov	r6, r7
 80037aa:	d1f7      	bne.n	800379c <__utoa+0x10>
 80037ac:	7921      	ldrb	r1, [r4, #4]
 80037ae:	6820      	ldr	r0, [r4, #0]
 80037b0:	7139      	strb	r1, [r7, #4]
 80037b2:	1e91      	subs	r1, r2, #2
 80037b4:	2922      	cmp	r1, #34	; 0x22
 80037b6:	6038      	str	r0, [r7, #0]
 80037b8:	f04f 0100 	mov.w	r1, #0
 80037bc:	d904      	bls.n	80037c8 <__utoa+0x3c>
 80037be:	7019      	strb	r1, [r3, #0]
 80037c0:	460b      	mov	r3, r1
 80037c2:	4618      	mov	r0, r3
 80037c4:	b00b      	add	sp, #44	; 0x2c
 80037c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037c8:	1e58      	subs	r0, r3, #1
 80037ca:	4684      	mov	ip, r0
 80037cc:	fbb5 f7f2 	udiv	r7, r5, r2
 80037d0:	fb02 5617 	mls	r6, r2, r7, r5
 80037d4:	3628      	adds	r6, #40	; 0x28
 80037d6:	446e      	add	r6, sp
 80037d8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80037dc:	460c      	mov	r4, r1
 80037de:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80037e2:	462e      	mov	r6, r5
 80037e4:	42b2      	cmp	r2, r6
 80037e6:	463d      	mov	r5, r7
 80037e8:	f101 0101 	add.w	r1, r1, #1
 80037ec:	d9ee      	bls.n	80037cc <__utoa+0x40>
 80037ee:	2200      	movs	r2, #0
 80037f0:	545a      	strb	r2, [r3, r1]
 80037f2:	1919      	adds	r1, r3, r4
 80037f4:	1aa5      	subs	r5, r4, r2
 80037f6:	42aa      	cmp	r2, r5
 80037f8:	dae3      	bge.n	80037c2 <__utoa+0x36>
 80037fa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80037fe:	780e      	ldrb	r6, [r1, #0]
 8003800:	3201      	adds	r2, #1
 8003802:	7006      	strb	r6, [r0, #0]
 8003804:	f801 5901 	strb.w	r5, [r1], #-1
 8003808:	e7f4      	b.n	80037f4 <__utoa+0x68>
 800380a:	bf00      	nop
 800380c:	0800461c 	.word	0x0800461c

08003810 <pow>:
 8003810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003814:	4614      	mov	r4, r2
 8003816:	461d      	mov	r5, r3
 8003818:	4680      	mov	r8, r0
 800381a:	4689      	mov	r9, r1
 800381c:	f000 f860 	bl	80038e0 <__ieee754_pow>
 8003820:	4622      	mov	r2, r4
 8003822:	4606      	mov	r6, r0
 8003824:	460f      	mov	r7, r1
 8003826:	462b      	mov	r3, r5
 8003828:	4620      	mov	r0, r4
 800382a:	4629      	mov	r1, r5
 800382c:	f7fd f8e6 	bl	80009fc <__aeabi_dcmpun>
 8003830:	bbc8      	cbnz	r0, 80038a6 <pow+0x96>
 8003832:	2200      	movs	r2, #0
 8003834:	2300      	movs	r3, #0
 8003836:	4640      	mov	r0, r8
 8003838:	4649      	mov	r1, r9
 800383a:	f7fd f8ad 	bl	8000998 <__aeabi_dcmpeq>
 800383e:	b1b8      	cbz	r0, 8003870 <pow+0x60>
 8003840:	2200      	movs	r2, #0
 8003842:	2300      	movs	r3, #0
 8003844:	4620      	mov	r0, r4
 8003846:	4629      	mov	r1, r5
 8003848:	f7fd f8a6 	bl	8000998 <__aeabi_dcmpeq>
 800384c:	2800      	cmp	r0, #0
 800384e:	d141      	bne.n	80038d4 <pow+0xc4>
 8003850:	4620      	mov	r0, r4
 8003852:	4629      	mov	r1, r5
 8003854:	f000 fe39 	bl	80044ca <finite>
 8003858:	b328      	cbz	r0, 80038a6 <pow+0x96>
 800385a:	2200      	movs	r2, #0
 800385c:	2300      	movs	r3, #0
 800385e:	4620      	mov	r0, r4
 8003860:	4629      	mov	r1, r5
 8003862:	f7fd f8a3 	bl	80009ac <__aeabi_dcmplt>
 8003866:	b1f0      	cbz	r0, 80038a6 <pow+0x96>
 8003868:	f7ff ff44 	bl	80036f4 <__errno>
 800386c:	2322      	movs	r3, #34	; 0x22
 800386e:	e019      	b.n	80038a4 <pow+0x94>
 8003870:	4630      	mov	r0, r6
 8003872:	4639      	mov	r1, r7
 8003874:	f000 fe29 	bl	80044ca <finite>
 8003878:	b9c8      	cbnz	r0, 80038ae <pow+0x9e>
 800387a:	4640      	mov	r0, r8
 800387c:	4649      	mov	r1, r9
 800387e:	f000 fe24 	bl	80044ca <finite>
 8003882:	b1a0      	cbz	r0, 80038ae <pow+0x9e>
 8003884:	4620      	mov	r0, r4
 8003886:	4629      	mov	r1, r5
 8003888:	f000 fe1f 	bl	80044ca <finite>
 800388c:	b178      	cbz	r0, 80038ae <pow+0x9e>
 800388e:	4632      	mov	r2, r6
 8003890:	463b      	mov	r3, r7
 8003892:	4630      	mov	r0, r6
 8003894:	4639      	mov	r1, r7
 8003896:	f7fd f8b1 	bl	80009fc <__aeabi_dcmpun>
 800389a:	2800      	cmp	r0, #0
 800389c:	d0e4      	beq.n	8003868 <pow+0x58>
 800389e:	f7ff ff29 	bl	80036f4 <__errno>
 80038a2:	2321      	movs	r3, #33	; 0x21
 80038a4:	6003      	str	r3, [r0, #0]
 80038a6:	4630      	mov	r0, r6
 80038a8:	4639      	mov	r1, r7
 80038aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038ae:	2200      	movs	r2, #0
 80038b0:	2300      	movs	r3, #0
 80038b2:	4630      	mov	r0, r6
 80038b4:	4639      	mov	r1, r7
 80038b6:	f7fd f86f 	bl	8000998 <__aeabi_dcmpeq>
 80038ba:	2800      	cmp	r0, #0
 80038bc:	d0f3      	beq.n	80038a6 <pow+0x96>
 80038be:	4640      	mov	r0, r8
 80038c0:	4649      	mov	r1, r9
 80038c2:	f000 fe02 	bl	80044ca <finite>
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d0ed      	beq.n	80038a6 <pow+0x96>
 80038ca:	4620      	mov	r0, r4
 80038cc:	4629      	mov	r1, r5
 80038ce:	f000 fdfc 	bl	80044ca <finite>
 80038d2:	e7c8      	b.n	8003866 <pow+0x56>
 80038d4:	2600      	movs	r6, #0
 80038d6:	4f01      	ldr	r7, [pc, #4]	; (80038dc <pow+0xcc>)
 80038d8:	e7e5      	b.n	80038a6 <pow+0x96>
 80038da:	bf00      	nop
 80038dc:	3ff00000 	.word	0x3ff00000

080038e0 <__ieee754_pow>:
 80038e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e4:	b093      	sub	sp, #76	; 0x4c
 80038e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80038ea:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80038ee:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80038f2:	4689      	mov	r9, r1
 80038f4:	ea56 0102 	orrs.w	r1, r6, r2
 80038f8:	4680      	mov	r8, r0
 80038fa:	d111      	bne.n	8003920 <__ieee754_pow+0x40>
 80038fc:	1803      	adds	r3, r0, r0
 80038fe:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8003902:	4152      	adcs	r2, r2
 8003904:	4299      	cmp	r1, r3
 8003906:	4b82      	ldr	r3, [pc, #520]	; (8003b10 <__ieee754_pow+0x230>)
 8003908:	4193      	sbcs	r3, r2
 800390a:	f080 84b9 	bcs.w	8004280 <__ieee754_pow+0x9a0>
 800390e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003912:	4640      	mov	r0, r8
 8003914:	4649      	mov	r1, r9
 8003916:	f7fc fc21 	bl	800015c <__adddf3>
 800391a:	4683      	mov	fp, r0
 800391c:	468c      	mov	ip, r1
 800391e:	e06f      	b.n	8003a00 <__ieee754_pow+0x120>
 8003920:	4b7c      	ldr	r3, [pc, #496]	; (8003b14 <__ieee754_pow+0x234>)
 8003922:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8003926:	429c      	cmp	r4, r3
 8003928:	464d      	mov	r5, r9
 800392a:	4682      	mov	sl, r0
 800392c:	dc06      	bgt.n	800393c <__ieee754_pow+0x5c>
 800392e:	d101      	bne.n	8003934 <__ieee754_pow+0x54>
 8003930:	2800      	cmp	r0, #0
 8003932:	d1ec      	bne.n	800390e <__ieee754_pow+0x2e>
 8003934:	429e      	cmp	r6, r3
 8003936:	dc01      	bgt.n	800393c <__ieee754_pow+0x5c>
 8003938:	d10f      	bne.n	800395a <__ieee754_pow+0x7a>
 800393a:	b172      	cbz	r2, 800395a <__ieee754_pow+0x7a>
 800393c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003940:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003944:	ea55 050a 	orrs.w	r5, r5, sl
 8003948:	d1e1      	bne.n	800390e <__ieee754_pow+0x2e>
 800394a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800394e:	18db      	adds	r3, r3, r3
 8003950:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8003954:	4152      	adcs	r2, r2
 8003956:	429d      	cmp	r5, r3
 8003958:	e7d5      	b.n	8003906 <__ieee754_pow+0x26>
 800395a:	2d00      	cmp	r5, #0
 800395c:	da39      	bge.n	80039d2 <__ieee754_pow+0xf2>
 800395e:	4b6e      	ldr	r3, [pc, #440]	; (8003b18 <__ieee754_pow+0x238>)
 8003960:	429e      	cmp	r6, r3
 8003962:	dc52      	bgt.n	8003a0a <__ieee754_pow+0x12a>
 8003964:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003968:	429e      	cmp	r6, r3
 800396a:	f340 849c 	ble.w	80042a6 <__ieee754_pow+0x9c6>
 800396e:	1533      	asrs	r3, r6, #20
 8003970:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003974:	2b14      	cmp	r3, #20
 8003976:	dd0f      	ble.n	8003998 <__ieee754_pow+0xb8>
 8003978:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800397c:	fa22 f103 	lsr.w	r1, r2, r3
 8003980:	fa01 f303 	lsl.w	r3, r1, r3
 8003984:	4293      	cmp	r3, r2
 8003986:	f040 848e 	bne.w	80042a6 <__ieee754_pow+0x9c6>
 800398a:	f001 0101 	and.w	r1, r1, #1
 800398e:	f1c1 0302 	rsb	r3, r1, #2
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	b182      	cbz	r2, 80039b8 <__ieee754_pow+0xd8>
 8003996:	e05d      	b.n	8003a54 <__ieee754_pow+0x174>
 8003998:	2a00      	cmp	r2, #0
 800399a:	d159      	bne.n	8003a50 <__ieee754_pow+0x170>
 800399c:	f1c3 0314 	rsb	r3, r3, #20
 80039a0:	fa46 f103 	asr.w	r1, r6, r3
 80039a4:	fa01 f303 	lsl.w	r3, r1, r3
 80039a8:	42b3      	cmp	r3, r6
 80039aa:	f040 8479 	bne.w	80042a0 <__ieee754_pow+0x9c0>
 80039ae:	f001 0101 	and.w	r1, r1, #1
 80039b2:	f1c1 0302 	rsb	r3, r1, #2
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	4b58      	ldr	r3, [pc, #352]	; (8003b1c <__ieee754_pow+0x23c>)
 80039ba:	429e      	cmp	r6, r3
 80039bc:	d132      	bne.n	8003a24 <__ieee754_pow+0x144>
 80039be:	2f00      	cmp	r7, #0
 80039c0:	f280 846a 	bge.w	8004298 <__ieee754_pow+0x9b8>
 80039c4:	4642      	mov	r2, r8
 80039c6:	464b      	mov	r3, r9
 80039c8:	2000      	movs	r0, #0
 80039ca:	4954      	ldr	r1, [pc, #336]	; (8003b1c <__ieee754_pow+0x23c>)
 80039cc:	f7fc fea6 	bl	800071c <__aeabi_ddiv>
 80039d0:	e7a3      	b.n	800391a <__ieee754_pow+0x3a>
 80039d2:	2300      	movs	r3, #0
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	2a00      	cmp	r2, #0
 80039d8:	d13c      	bne.n	8003a54 <__ieee754_pow+0x174>
 80039da:	4b4e      	ldr	r3, [pc, #312]	; (8003b14 <__ieee754_pow+0x234>)
 80039dc:	429e      	cmp	r6, r3
 80039de:	d1eb      	bne.n	80039b8 <__ieee754_pow+0xd8>
 80039e0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80039e4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80039e8:	ea53 030a 	orrs.w	r3, r3, sl
 80039ec:	f000 8448 	beq.w	8004280 <__ieee754_pow+0x9a0>
 80039f0:	4b4b      	ldr	r3, [pc, #300]	; (8003b20 <__ieee754_pow+0x240>)
 80039f2:	429c      	cmp	r4, r3
 80039f4:	dd0b      	ble.n	8003a0e <__ieee754_pow+0x12e>
 80039f6:	2f00      	cmp	r7, #0
 80039f8:	f2c0 8448 	blt.w	800428c <__ieee754_pow+0x9ac>
 80039fc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8003a00:	4658      	mov	r0, fp
 8003a02:	4661      	mov	r1, ip
 8003a04:	b013      	add	sp, #76	; 0x4c
 8003a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e7e2      	b.n	80039d4 <__ieee754_pow+0xf4>
 8003a0e:	2f00      	cmp	r7, #0
 8003a10:	f04f 0b00 	mov.w	fp, #0
 8003a14:	f04f 0c00 	mov.w	ip, #0
 8003a18:	daf2      	bge.n	8003a00 <__ieee754_pow+0x120>
 8003a1a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003a1e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003a22:	e7ed      	b.n	8003a00 <__ieee754_pow+0x120>
 8003a24:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8003a28:	d106      	bne.n	8003a38 <__ieee754_pow+0x158>
 8003a2a:	4642      	mov	r2, r8
 8003a2c:	464b      	mov	r3, r9
 8003a2e:	4640      	mov	r0, r8
 8003a30:	4649      	mov	r1, r9
 8003a32:	f7fc fd49 	bl	80004c8 <__aeabi_dmul>
 8003a36:	e770      	b.n	800391a <__ieee754_pow+0x3a>
 8003a38:	4b3a      	ldr	r3, [pc, #232]	; (8003b24 <__ieee754_pow+0x244>)
 8003a3a:	429f      	cmp	r7, r3
 8003a3c:	d10a      	bne.n	8003a54 <__ieee754_pow+0x174>
 8003a3e:	2d00      	cmp	r5, #0
 8003a40:	db08      	blt.n	8003a54 <__ieee754_pow+0x174>
 8003a42:	4640      	mov	r0, r8
 8003a44:	4649      	mov	r1, r9
 8003a46:	b013      	add	sp, #76	; 0x4c
 8003a48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a4c:	f000 bc5e 	b.w	800430c <__ieee754_sqrt>
 8003a50:	2300      	movs	r3, #0
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	4640      	mov	r0, r8
 8003a56:	4649      	mov	r1, r9
 8003a58:	f000 fd34 	bl	80044c4 <fabs>
 8003a5c:	4683      	mov	fp, r0
 8003a5e:	468c      	mov	ip, r1
 8003a60:	f1ba 0f00 	cmp.w	sl, #0
 8003a64:	d128      	bne.n	8003ab8 <__ieee754_pow+0x1d8>
 8003a66:	b124      	cbz	r4, 8003a72 <__ieee754_pow+0x192>
 8003a68:	4b2c      	ldr	r3, [pc, #176]	; (8003b1c <__ieee754_pow+0x23c>)
 8003a6a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d122      	bne.n	8003ab8 <__ieee754_pow+0x1d8>
 8003a72:	2f00      	cmp	r7, #0
 8003a74:	da07      	bge.n	8003a86 <__ieee754_pow+0x1a6>
 8003a76:	465a      	mov	r2, fp
 8003a78:	4663      	mov	r3, ip
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	4927      	ldr	r1, [pc, #156]	; (8003b1c <__ieee754_pow+0x23c>)
 8003a7e:	f7fc fe4d 	bl	800071c <__aeabi_ddiv>
 8003a82:	4683      	mov	fp, r0
 8003a84:	468c      	mov	ip, r1
 8003a86:	2d00      	cmp	r5, #0
 8003a88:	daba      	bge.n	8003a00 <__ieee754_pow+0x120>
 8003a8a:	9b00      	ldr	r3, [sp, #0]
 8003a8c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003a90:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003a94:	4323      	orrs	r3, r4
 8003a96:	d108      	bne.n	8003aaa <__ieee754_pow+0x1ca>
 8003a98:	465a      	mov	r2, fp
 8003a9a:	4663      	mov	r3, ip
 8003a9c:	4658      	mov	r0, fp
 8003a9e:	4661      	mov	r1, ip
 8003aa0:	f7fc fb5a 	bl	8000158 <__aeabi_dsub>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	e790      	b.n	80039cc <__ieee754_pow+0xec>
 8003aaa:	9b00      	ldr	r3, [sp, #0]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d1a7      	bne.n	8003a00 <__ieee754_pow+0x120>
 8003ab0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8003ab4:	469c      	mov	ip, r3
 8003ab6:	e7a3      	b.n	8003a00 <__ieee754_pow+0x120>
 8003ab8:	0feb      	lsrs	r3, r5, #31
 8003aba:	3b01      	subs	r3, #1
 8003abc:	930c      	str	r3, [sp, #48]	; 0x30
 8003abe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ac0:	9b00      	ldr	r3, [sp, #0]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	d104      	bne.n	8003ad0 <__ieee754_pow+0x1f0>
 8003ac6:	4642      	mov	r2, r8
 8003ac8:	464b      	mov	r3, r9
 8003aca:	4640      	mov	r0, r8
 8003acc:	4649      	mov	r1, r9
 8003ace:	e7e7      	b.n	8003aa0 <__ieee754_pow+0x1c0>
 8003ad0:	4b15      	ldr	r3, [pc, #84]	; (8003b28 <__ieee754_pow+0x248>)
 8003ad2:	429e      	cmp	r6, r3
 8003ad4:	f340 80f6 	ble.w	8003cc4 <__ieee754_pow+0x3e4>
 8003ad8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003adc:	429e      	cmp	r6, r3
 8003ade:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <__ieee754_pow+0x240>)
 8003ae0:	dd09      	ble.n	8003af6 <__ieee754_pow+0x216>
 8003ae2:	429c      	cmp	r4, r3
 8003ae4:	dc0c      	bgt.n	8003b00 <__ieee754_pow+0x220>
 8003ae6:	2f00      	cmp	r7, #0
 8003ae8:	da0c      	bge.n	8003b04 <__ieee754_pow+0x224>
 8003aea:	2000      	movs	r0, #0
 8003aec:	b013      	add	sp, #76	; 0x4c
 8003aee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003af2:	f000 bce2 	b.w	80044ba <__math_oflow>
 8003af6:	429c      	cmp	r4, r3
 8003af8:	dbf5      	blt.n	8003ae6 <__ieee754_pow+0x206>
 8003afa:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <__ieee754_pow+0x23c>)
 8003afc:	429c      	cmp	r4, r3
 8003afe:	dd15      	ble.n	8003b2c <__ieee754_pow+0x24c>
 8003b00:	2f00      	cmp	r7, #0
 8003b02:	dcf2      	bgt.n	8003aea <__ieee754_pow+0x20a>
 8003b04:	2000      	movs	r0, #0
 8003b06:	b013      	add	sp, #76	; 0x4c
 8003b08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b0c:	f000 bcd0 	b.w	80044b0 <__math_uflow>
 8003b10:	fff00000 	.word	0xfff00000
 8003b14:	7ff00000 	.word	0x7ff00000
 8003b18:	433fffff 	.word	0x433fffff
 8003b1c:	3ff00000 	.word	0x3ff00000
 8003b20:	3fefffff 	.word	0x3fefffff
 8003b24:	3fe00000 	.word	0x3fe00000
 8003b28:	41e00000 	.word	0x41e00000
 8003b2c:	4661      	mov	r1, ip
 8003b2e:	2200      	movs	r2, #0
 8003b30:	4658      	mov	r0, fp
 8003b32:	4b5f      	ldr	r3, [pc, #380]	; (8003cb0 <__ieee754_pow+0x3d0>)
 8003b34:	f7fc fb10 	bl	8000158 <__aeabi_dsub>
 8003b38:	a355      	add	r3, pc, #340	; (adr r3, 8003c90 <__ieee754_pow+0x3b0>)
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	4604      	mov	r4, r0
 8003b40:	460d      	mov	r5, r1
 8003b42:	f7fc fcc1 	bl	80004c8 <__aeabi_dmul>
 8003b46:	a354      	add	r3, pc, #336	; (adr r3, 8003c98 <__ieee754_pow+0x3b8>)
 8003b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4c:	4606      	mov	r6, r0
 8003b4e:	460f      	mov	r7, r1
 8003b50:	4620      	mov	r0, r4
 8003b52:	4629      	mov	r1, r5
 8003b54:	f7fc fcb8 	bl	80004c8 <__aeabi_dmul>
 8003b58:	2200      	movs	r2, #0
 8003b5a:	4682      	mov	sl, r0
 8003b5c:	468b      	mov	fp, r1
 8003b5e:	4620      	mov	r0, r4
 8003b60:	4629      	mov	r1, r5
 8003b62:	4b54      	ldr	r3, [pc, #336]	; (8003cb4 <__ieee754_pow+0x3d4>)
 8003b64:	f7fc fcb0 	bl	80004c8 <__aeabi_dmul>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	a14c      	add	r1, pc, #304	; (adr r1, 8003ca0 <__ieee754_pow+0x3c0>)
 8003b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b72:	f7fc faf1 	bl	8000158 <__aeabi_dsub>
 8003b76:	4622      	mov	r2, r4
 8003b78:	462b      	mov	r3, r5
 8003b7a:	f7fc fca5 	bl	80004c8 <__aeabi_dmul>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	2000      	movs	r0, #0
 8003b84:	494c      	ldr	r1, [pc, #304]	; (8003cb8 <__ieee754_pow+0x3d8>)
 8003b86:	f7fc fae7 	bl	8000158 <__aeabi_dsub>
 8003b8a:	4622      	mov	r2, r4
 8003b8c:	462b      	mov	r3, r5
 8003b8e:	4680      	mov	r8, r0
 8003b90:	4689      	mov	r9, r1
 8003b92:	4620      	mov	r0, r4
 8003b94:	4629      	mov	r1, r5
 8003b96:	f7fc fc97 	bl	80004c8 <__aeabi_dmul>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4640      	mov	r0, r8
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	f7fc fc91 	bl	80004c8 <__aeabi_dmul>
 8003ba6:	a340      	add	r3, pc, #256	; (adr r3, 8003ca8 <__ieee754_pow+0x3c8>)
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	f7fc fc8c 	bl	80004c8 <__aeabi_dmul>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4650      	mov	r0, sl
 8003bb6:	4659      	mov	r1, fp
 8003bb8:	f7fc face 	bl	8000158 <__aeabi_dsub>
 8003bbc:	f04f 0a00 	mov.w	sl, #0
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4604      	mov	r4, r0
 8003bc6:	460d      	mov	r5, r1
 8003bc8:	4630      	mov	r0, r6
 8003bca:	4639      	mov	r1, r7
 8003bcc:	f7fc fac6 	bl	800015c <__adddf3>
 8003bd0:	4632      	mov	r2, r6
 8003bd2:	463b      	mov	r3, r7
 8003bd4:	4650      	mov	r0, sl
 8003bd6:	468b      	mov	fp, r1
 8003bd8:	f7fc fabe 	bl	8000158 <__aeabi_dsub>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4620      	mov	r0, r4
 8003be2:	4629      	mov	r1, r5
 8003be4:	f7fc fab8 	bl	8000158 <__aeabi_dsub>
 8003be8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003bec:	9b00      	ldr	r3, [sp, #0]
 8003bee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f04f 0600 	mov.w	r6, #0
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	bf0c      	ite	eq
 8003bfe:	4b2f      	ldreq	r3, [pc, #188]	; (8003cbc <__ieee754_pow+0x3dc>)
 8003c00:	4b2b      	ldrne	r3, [pc, #172]	; (8003cb0 <__ieee754_pow+0x3d0>)
 8003c02:	4604      	mov	r4, r0
 8003c04:	460d      	mov	r5, r1
 8003c06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c0a:	e9cd 2300 	strd	r2, r3, [sp]
 8003c0e:	4632      	mov	r2, r6
 8003c10:	463b      	mov	r3, r7
 8003c12:	f7fc faa1 	bl	8000158 <__aeabi_dsub>
 8003c16:	4652      	mov	r2, sl
 8003c18:	465b      	mov	r3, fp
 8003c1a:	f7fc fc55 	bl	80004c8 <__aeabi_dmul>
 8003c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c22:	4680      	mov	r8, r0
 8003c24:	4689      	mov	r9, r1
 8003c26:	4620      	mov	r0, r4
 8003c28:	4629      	mov	r1, r5
 8003c2a:	f7fc fc4d 	bl	80004c8 <__aeabi_dmul>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4640      	mov	r0, r8
 8003c34:	4649      	mov	r1, r9
 8003c36:	f7fc fa91 	bl	800015c <__adddf3>
 8003c3a:	4632      	mov	r2, r6
 8003c3c:	463b      	mov	r3, r7
 8003c3e:	4680      	mov	r8, r0
 8003c40:	4689      	mov	r9, r1
 8003c42:	4650      	mov	r0, sl
 8003c44:	4659      	mov	r1, fp
 8003c46:	f7fc fc3f 	bl	80004c8 <__aeabi_dmul>
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	460d      	mov	r5, r1
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4602      	mov	r2, r0
 8003c52:	4649      	mov	r1, r9
 8003c54:	4640      	mov	r0, r8
 8003c56:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003c5a:	f7fc fa7f 	bl	800015c <__adddf3>
 8003c5e:	4b18      	ldr	r3, [pc, #96]	; (8003cc0 <__ieee754_pow+0x3e0>)
 8003c60:	4682      	mov	sl, r0
 8003c62:	4299      	cmp	r1, r3
 8003c64:	460f      	mov	r7, r1
 8003c66:	460e      	mov	r6, r1
 8003c68:	f340 82e5 	ble.w	8004236 <__ieee754_pow+0x956>
 8003c6c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003c70:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003c74:	4303      	orrs	r3, r0
 8003c76:	f000 81df 	beq.w	8004038 <__ieee754_pow+0x758>
 8003c7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2300      	movs	r3, #0
 8003c82:	f7fc fe93 	bl	80009ac <__aeabi_dcmplt>
 8003c86:	3800      	subs	r0, #0
 8003c88:	bf18      	it	ne
 8003c8a:	2001      	movne	r0, #1
 8003c8c:	e72e      	b.n	8003aec <__ieee754_pow+0x20c>
 8003c8e:	bf00      	nop
 8003c90:	60000000 	.word	0x60000000
 8003c94:	3ff71547 	.word	0x3ff71547
 8003c98:	f85ddf44 	.word	0xf85ddf44
 8003c9c:	3e54ae0b 	.word	0x3e54ae0b
 8003ca0:	55555555 	.word	0x55555555
 8003ca4:	3fd55555 	.word	0x3fd55555
 8003ca8:	652b82fe 	.word	0x652b82fe
 8003cac:	3ff71547 	.word	0x3ff71547
 8003cb0:	3ff00000 	.word	0x3ff00000
 8003cb4:	3fd00000 	.word	0x3fd00000
 8003cb8:	3fe00000 	.word	0x3fe00000
 8003cbc:	bff00000 	.word	0xbff00000
 8003cc0:	408fffff 	.word	0x408fffff
 8003cc4:	4bd2      	ldr	r3, [pc, #840]	; (8004010 <__ieee754_pow+0x730>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	402b      	ands	r3, r5
 8003cca:	b943      	cbnz	r3, 8003cde <__ieee754_pow+0x3fe>
 8003ccc:	4658      	mov	r0, fp
 8003cce:	4661      	mov	r1, ip
 8003cd0:	4bd0      	ldr	r3, [pc, #832]	; (8004014 <__ieee754_pow+0x734>)
 8003cd2:	f7fc fbf9 	bl	80004c8 <__aeabi_dmul>
 8003cd6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003cda:	4683      	mov	fp, r0
 8003cdc:	460c      	mov	r4, r1
 8003cde:	1523      	asrs	r3, r4, #20
 8003ce0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003ce4:	4413      	add	r3, r2
 8003ce6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ce8:	4bcb      	ldr	r3, [pc, #812]	; (8004018 <__ieee754_pow+0x738>)
 8003cea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003cee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003cf2:	429c      	cmp	r4, r3
 8003cf4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003cf8:	dd08      	ble.n	8003d0c <__ieee754_pow+0x42c>
 8003cfa:	4bc8      	ldr	r3, [pc, #800]	; (800401c <__ieee754_pow+0x73c>)
 8003cfc:	429c      	cmp	r4, r3
 8003cfe:	f340 8199 	ble.w	8004034 <__ieee754_pow+0x754>
 8003d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d04:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003d08:	3301      	adds	r3, #1
 8003d0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d0c:	2600      	movs	r6, #0
 8003d0e:	00f3      	lsls	r3, r6, #3
 8003d10:	930d      	str	r3, [sp, #52]	; 0x34
 8003d12:	4bc3      	ldr	r3, [pc, #780]	; (8004020 <__ieee754_pow+0x740>)
 8003d14:	4658      	mov	r0, fp
 8003d16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003d1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d1e:	4629      	mov	r1, r5
 8003d20:	461a      	mov	r2, r3
 8003d22:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8003d26:	4623      	mov	r3, r4
 8003d28:	f7fc fa16 	bl	8000158 <__aeabi_dsub>
 8003d2c:	46da      	mov	sl, fp
 8003d2e:	462b      	mov	r3, r5
 8003d30:	4652      	mov	r2, sl
 8003d32:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003d36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003d3a:	f7fc fa0f 	bl	800015c <__adddf3>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	2000      	movs	r0, #0
 8003d44:	49b7      	ldr	r1, [pc, #732]	; (8004024 <__ieee754_pow+0x744>)
 8003d46:	f7fc fce9 	bl	800071c <__aeabi_ddiv>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003d52:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003d56:	f7fc fbb7 	bl	80004c8 <__aeabi_dmul>
 8003d5a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003d5e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8003d62:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003d66:	2300      	movs	r3, #0
 8003d68:	2200      	movs	r2, #0
 8003d6a:	46ab      	mov	fp, r5
 8003d6c:	106d      	asrs	r5, r5, #1
 8003d6e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003d72:	9304      	str	r3, [sp, #16]
 8003d74:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003d78:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003d7c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8003d80:	4640      	mov	r0, r8
 8003d82:	4649      	mov	r1, r9
 8003d84:	4614      	mov	r4, r2
 8003d86:	461d      	mov	r5, r3
 8003d88:	f7fc fb9e 	bl	80004c8 <__aeabi_dmul>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003d94:	f7fc f9e0 	bl	8000158 <__aeabi_dsub>
 8003d98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003d9c:	4606      	mov	r6, r0
 8003d9e:	460f      	mov	r7, r1
 8003da0:	4620      	mov	r0, r4
 8003da2:	4629      	mov	r1, r5
 8003da4:	f7fc f9d8 	bl	8000158 <__aeabi_dsub>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4650      	mov	r0, sl
 8003dae:	4659      	mov	r1, fp
 8003db0:	f7fc f9d2 	bl	8000158 <__aeabi_dsub>
 8003db4:	4642      	mov	r2, r8
 8003db6:	464b      	mov	r3, r9
 8003db8:	f7fc fb86 	bl	80004c8 <__aeabi_dmul>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4630      	mov	r0, r6
 8003dc2:	4639      	mov	r1, r7
 8003dc4:	f7fc f9c8 	bl	8000158 <__aeabi_dsub>
 8003dc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003dcc:	f7fc fb7c 	bl	80004c8 <__aeabi_dmul>
 8003dd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003dd4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003dd8:	4610      	mov	r0, r2
 8003dda:	4619      	mov	r1, r3
 8003ddc:	f7fc fb74 	bl	80004c8 <__aeabi_dmul>
 8003de0:	a379      	add	r3, pc, #484	; (adr r3, 8003fc8 <__ieee754_pow+0x6e8>)
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	4604      	mov	r4, r0
 8003de8:	460d      	mov	r5, r1
 8003dea:	f7fc fb6d 	bl	80004c8 <__aeabi_dmul>
 8003dee:	a378      	add	r3, pc, #480	; (adr r3, 8003fd0 <__ieee754_pow+0x6f0>)
 8003df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df4:	f7fc f9b2 	bl	800015c <__adddf3>
 8003df8:	4622      	mov	r2, r4
 8003dfa:	462b      	mov	r3, r5
 8003dfc:	f7fc fb64 	bl	80004c8 <__aeabi_dmul>
 8003e00:	a375      	add	r3, pc, #468	; (adr r3, 8003fd8 <__ieee754_pow+0x6f8>)
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	f7fc f9a9 	bl	800015c <__adddf3>
 8003e0a:	4622      	mov	r2, r4
 8003e0c:	462b      	mov	r3, r5
 8003e0e:	f7fc fb5b 	bl	80004c8 <__aeabi_dmul>
 8003e12:	a373      	add	r3, pc, #460	; (adr r3, 8003fe0 <__ieee754_pow+0x700>)
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	f7fc f9a0 	bl	800015c <__adddf3>
 8003e1c:	4622      	mov	r2, r4
 8003e1e:	462b      	mov	r3, r5
 8003e20:	f7fc fb52 	bl	80004c8 <__aeabi_dmul>
 8003e24:	a370      	add	r3, pc, #448	; (adr r3, 8003fe8 <__ieee754_pow+0x708>)
 8003e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2a:	f7fc f997 	bl	800015c <__adddf3>
 8003e2e:	4622      	mov	r2, r4
 8003e30:	462b      	mov	r3, r5
 8003e32:	f7fc fb49 	bl	80004c8 <__aeabi_dmul>
 8003e36:	a36e      	add	r3, pc, #440	; (adr r3, 8003ff0 <__ieee754_pow+0x710>)
 8003e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3c:	f7fc f98e 	bl	800015c <__adddf3>
 8003e40:	4622      	mov	r2, r4
 8003e42:	4606      	mov	r6, r0
 8003e44:	460f      	mov	r7, r1
 8003e46:	462b      	mov	r3, r5
 8003e48:	4620      	mov	r0, r4
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	f7fc fb3c 	bl	80004c8 <__aeabi_dmul>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4630      	mov	r0, r6
 8003e56:	4639      	mov	r1, r7
 8003e58:	f7fc fb36 	bl	80004c8 <__aeabi_dmul>
 8003e5c:	4604      	mov	r4, r0
 8003e5e:	460d      	mov	r5, r1
 8003e60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e64:	4642      	mov	r2, r8
 8003e66:	464b      	mov	r3, r9
 8003e68:	f7fc f978 	bl	800015c <__adddf3>
 8003e6c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003e70:	f7fc fb2a 	bl	80004c8 <__aeabi_dmul>
 8003e74:	4622      	mov	r2, r4
 8003e76:	462b      	mov	r3, r5
 8003e78:	f7fc f970 	bl	800015c <__adddf3>
 8003e7c:	4642      	mov	r2, r8
 8003e7e:	4606      	mov	r6, r0
 8003e80:	460f      	mov	r7, r1
 8003e82:	464b      	mov	r3, r9
 8003e84:	4640      	mov	r0, r8
 8003e86:	4649      	mov	r1, r9
 8003e88:	f7fc fb1e 	bl	80004c8 <__aeabi_dmul>
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	4b66      	ldr	r3, [pc, #408]	; (8004028 <__ieee754_pow+0x748>)
 8003e90:	4682      	mov	sl, r0
 8003e92:	468b      	mov	fp, r1
 8003e94:	f7fc f962 	bl	800015c <__adddf3>
 8003e98:	4632      	mov	r2, r6
 8003e9a:	463b      	mov	r3, r7
 8003e9c:	f7fc f95e 	bl	800015c <__adddf3>
 8003ea0:	2400      	movs	r4, #0
 8003ea2:	460d      	mov	r5, r1
 8003ea4:	4622      	mov	r2, r4
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4640      	mov	r0, r8
 8003eaa:	4649      	mov	r1, r9
 8003eac:	f7fc fb0c 	bl	80004c8 <__aeabi_dmul>
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	4680      	mov	r8, r0
 8003eb4:	4689      	mov	r9, r1
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	4629      	mov	r1, r5
 8003eba:	4b5b      	ldr	r3, [pc, #364]	; (8004028 <__ieee754_pow+0x748>)
 8003ebc:	f7fc f94c 	bl	8000158 <__aeabi_dsub>
 8003ec0:	4652      	mov	r2, sl
 8003ec2:	465b      	mov	r3, fp
 8003ec4:	f7fc f948 	bl	8000158 <__aeabi_dsub>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4630      	mov	r0, r6
 8003ece:	4639      	mov	r1, r7
 8003ed0:	f7fc f942 	bl	8000158 <__aeabi_dsub>
 8003ed4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003ed8:	f7fc faf6 	bl	80004c8 <__aeabi_dmul>
 8003edc:	4622      	mov	r2, r4
 8003ede:	4606      	mov	r6, r0
 8003ee0:	460f      	mov	r7, r1
 8003ee2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003ee6:	462b      	mov	r3, r5
 8003ee8:	f7fc faee 	bl	80004c8 <__aeabi_dmul>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	4639      	mov	r1, r7
 8003ef4:	f7fc f932 	bl	800015c <__adddf3>
 8003ef8:	2400      	movs	r4, #0
 8003efa:	4606      	mov	r6, r0
 8003efc:	460f      	mov	r7, r1
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4640      	mov	r0, r8
 8003f04:	4649      	mov	r1, r9
 8003f06:	f7fc f929 	bl	800015c <__adddf3>
 8003f0a:	a33b      	add	r3, pc, #236	; (adr r3, 8003ff8 <__ieee754_pow+0x718>)
 8003f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f10:	4620      	mov	r0, r4
 8003f12:	460d      	mov	r5, r1
 8003f14:	f7fc fad8 	bl	80004c8 <__aeabi_dmul>
 8003f18:	4642      	mov	r2, r8
 8003f1a:	464b      	mov	r3, r9
 8003f1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003f20:	4620      	mov	r0, r4
 8003f22:	4629      	mov	r1, r5
 8003f24:	f7fc f918 	bl	8000158 <__aeabi_dsub>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4630      	mov	r0, r6
 8003f2e:	4639      	mov	r1, r7
 8003f30:	f7fc f912 	bl	8000158 <__aeabi_dsub>
 8003f34:	a332      	add	r3, pc, #200	; (adr r3, 8004000 <__ieee754_pow+0x720>)
 8003f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3a:	f7fc fac5 	bl	80004c8 <__aeabi_dmul>
 8003f3e:	a332      	add	r3, pc, #200	; (adr r3, 8004008 <__ieee754_pow+0x728>)
 8003f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f44:	4606      	mov	r6, r0
 8003f46:	460f      	mov	r7, r1
 8003f48:	4620      	mov	r0, r4
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	f7fc fabc 	bl	80004c8 <__aeabi_dmul>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4630      	mov	r0, r6
 8003f56:	4639      	mov	r1, r7
 8003f58:	f7fc f900 	bl	800015c <__adddf3>
 8003f5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003f5e:	4b33      	ldr	r3, [pc, #204]	; (800402c <__ieee754_pow+0x74c>)
 8003f60:	f04f 0a00 	mov.w	sl, #0
 8003f64:	4413      	add	r3, r2
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	f7fc f8f7 	bl	800015c <__adddf3>
 8003f6e:	4680      	mov	r8, r0
 8003f70:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003f72:	4689      	mov	r9, r1
 8003f74:	f7fc fa3e 	bl	80003f4 <__aeabi_i2d>
 8003f78:	4604      	mov	r4, r0
 8003f7a:	460d      	mov	r5, r1
 8003f7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003f7e:	4b2c      	ldr	r3, [pc, #176]	; (8004030 <__ieee754_pow+0x750>)
 8003f80:	4413      	add	r3, r2
 8003f82:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003f86:	4642      	mov	r2, r8
 8003f88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f8c:	464b      	mov	r3, r9
 8003f8e:	f7fc f8e5 	bl	800015c <__adddf3>
 8003f92:	4632      	mov	r2, r6
 8003f94:	463b      	mov	r3, r7
 8003f96:	f7fc f8e1 	bl	800015c <__adddf3>
 8003f9a:	4622      	mov	r2, r4
 8003f9c:	462b      	mov	r3, r5
 8003f9e:	f7fc f8dd 	bl	800015c <__adddf3>
 8003fa2:	4622      	mov	r2, r4
 8003fa4:	462b      	mov	r3, r5
 8003fa6:	4650      	mov	r0, sl
 8003fa8:	468b      	mov	fp, r1
 8003faa:	f7fc f8d5 	bl	8000158 <__aeabi_dsub>
 8003fae:	4632      	mov	r2, r6
 8003fb0:	463b      	mov	r3, r7
 8003fb2:	f7fc f8d1 	bl	8000158 <__aeabi_dsub>
 8003fb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003fba:	f7fc f8cd 	bl	8000158 <__aeabi_dsub>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4640      	mov	r0, r8
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	e60d      	b.n	8003be4 <__ieee754_pow+0x304>
 8003fc8:	4a454eef 	.word	0x4a454eef
 8003fcc:	3fca7e28 	.word	0x3fca7e28
 8003fd0:	93c9db65 	.word	0x93c9db65
 8003fd4:	3fcd864a 	.word	0x3fcd864a
 8003fd8:	a91d4101 	.word	0xa91d4101
 8003fdc:	3fd17460 	.word	0x3fd17460
 8003fe0:	518f264d 	.word	0x518f264d
 8003fe4:	3fd55555 	.word	0x3fd55555
 8003fe8:	db6fabff 	.word	0xdb6fabff
 8003fec:	3fdb6db6 	.word	0x3fdb6db6
 8003ff0:	33333303 	.word	0x33333303
 8003ff4:	3fe33333 	.word	0x3fe33333
 8003ff8:	e0000000 	.word	0xe0000000
 8003ffc:	3feec709 	.word	0x3feec709
 8004000:	dc3a03fd 	.word	0xdc3a03fd
 8004004:	3feec709 	.word	0x3feec709
 8004008:	145b01f5 	.word	0x145b01f5
 800400c:	be3e2fe0 	.word	0xbe3e2fe0
 8004010:	7ff00000 	.word	0x7ff00000
 8004014:	43400000 	.word	0x43400000
 8004018:	0003988e 	.word	0x0003988e
 800401c:	000bb679 	.word	0x000bb679
 8004020:	08004648 	.word	0x08004648
 8004024:	3ff00000 	.word	0x3ff00000
 8004028:	40080000 	.word	0x40080000
 800402c:	08004668 	.word	0x08004668
 8004030:	08004658 	.word	0x08004658
 8004034:	2601      	movs	r6, #1
 8004036:	e66a      	b.n	8003d0e <__ieee754_pow+0x42e>
 8004038:	a39d      	add	r3, pc, #628	; (adr r3, 80042b0 <__ieee754_pow+0x9d0>)
 800403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403e:	4640      	mov	r0, r8
 8004040:	4649      	mov	r1, r9
 8004042:	f7fc f88b 	bl	800015c <__adddf3>
 8004046:	4622      	mov	r2, r4
 8004048:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800404c:	462b      	mov	r3, r5
 800404e:	4650      	mov	r0, sl
 8004050:	4639      	mov	r1, r7
 8004052:	f7fc f881 	bl	8000158 <__aeabi_dsub>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800405e:	f7fc fcc3 	bl	80009e8 <__aeabi_dcmpgt>
 8004062:	2800      	cmp	r0, #0
 8004064:	f47f ae09 	bne.w	8003c7a <__ieee754_pow+0x39a>
 8004068:	4aa3      	ldr	r2, [pc, #652]	; (80042f8 <__ieee754_pow+0xa18>)
 800406a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800406e:	4293      	cmp	r3, r2
 8004070:	f340 8101 	ble.w	8004276 <__ieee754_pow+0x996>
 8004074:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004078:	2000      	movs	r0, #0
 800407a:	151b      	asrs	r3, r3, #20
 800407c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004080:	fa4a f303 	asr.w	r3, sl, r3
 8004084:	4433      	add	r3, r6
 8004086:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800408a:	4f9c      	ldr	r7, [pc, #624]	; (80042fc <__ieee754_pow+0xa1c>)
 800408c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004090:	4117      	asrs	r7, r2
 8004092:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004096:	ea23 0107 	bic.w	r1, r3, r7
 800409a:	f1c2 0214 	rsb	r2, r2, #20
 800409e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80040a2:	460b      	mov	r3, r1
 80040a4:	fa4a fa02 	asr.w	sl, sl, r2
 80040a8:	2e00      	cmp	r6, #0
 80040aa:	4602      	mov	r2, r0
 80040ac:	4629      	mov	r1, r5
 80040ae:	4620      	mov	r0, r4
 80040b0:	bfb8      	it	lt
 80040b2:	f1ca 0a00 	rsblt	sl, sl, #0
 80040b6:	f7fc f84f 	bl	8000158 <__aeabi_dsub>
 80040ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040c2:	2400      	movs	r4, #0
 80040c4:	4642      	mov	r2, r8
 80040c6:	464b      	mov	r3, r9
 80040c8:	f7fc f848 	bl	800015c <__adddf3>
 80040cc:	a37a      	add	r3, pc, #488	; (adr r3, 80042b8 <__ieee754_pow+0x9d8>)
 80040ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d2:	4620      	mov	r0, r4
 80040d4:	460d      	mov	r5, r1
 80040d6:	f7fc f9f7 	bl	80004c8 <__aeabi_dmul>
 80040da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040de:	4606      	mov	r6, r0
 80040e0:	460f      	mov	r7, r1
 80040e2:	4620      	mov	r0, r4
 80040e4:	4629      	mov	r1, r5
 80040e6:	f7fc f837 	bl	8000158 <__aeabi_dsub>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4640      	mov	r0, r8
 80040f0:	4649      	mov	r1, r9
 80040f2:	f7fc f831 	bl	8000158 <__aeabi_dsub>
 80040f6:	a372      	add	r3, pc, #456	; (adr r3, 80042c0 <__ieee754_pow+0x9e0>)
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	f7fc f9e4 	bl	80004c8 <__aeabi_dmul>
 8004100:	a371      	add	r3, pc, #452	; (adr r3, 80042c8 <__ieee754_pow+0x9e8>)
 8004102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004106:	4680      	mov	r8, r0
 8004108:	4689      	mov	r9, r1
 800410a:	4620      	mov	r0, r4
 800410c:	4629      	mov	r1, r5
 800410e:	f7fc f9db 	bl	80004c8 <__aeabi_dmul>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4640      	mov	r0, r8
 8004118:	4649      	mov	r1, r9
 800411a:	f7fc f81f 	bl	800015c <__adddf3>
 800411e:	4604      	mov	r4, r0
 8004120:	460d      	mov	r5, r1
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4630      	mov	r0, r6
 8004128:	4639      	mov	r1, r7
 800412a:	f7fc f817 	bl	800015c <__adddf3>
 800412e:	4632      	mov	r2, r6
 8004130:	463b      	mov	r3, r7
 8004132:	4680      	mov	r8, r0
 8004134:	4689      	mov	r9, r1
 8004136:	f7fc f80f 	bl	8000158 <__aeabi_dsub>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4620      	mov	r0, r4
 8004140:	4629      	mov	r1, r5
 8004142:	f7fc f809 	bl	8000158 <__aeabi_dsub>
 8004146:	4642      	mov	r2, r8
 8004148:	4606      	mov	r6, r0
 800414a:	460f      	mov	r7, r1
 800414c:	464b      	mov	r3, r9
 800414e:	4640      	mov	r0, r8
 8004150:	4649      	mov	r1, r9
 8004152:	f7fc f9b9 	bl	80004c8 <__aeabi_dmul>
 8004156:	a35e      	add	r3, pc, #376	; (adr r3, 80042d0 <__ieee754_pow+0x9f0>)
 8004158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415c:	4604      	mov	r4, r0
 800415e:	460d      	mov	r5, r1
 8004160:	f7fc f9b2 	bl	80004c8 <__aeabi_dmul>
 8004164:	a35c      	add	r3, pc, #368	; (adr r3, 80042d8 <__ieee754_pow+0x9f8>)
 8004166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416a:	f7fb fff5 	bl	8000158 <__aeabi_dsub>
 800416e:	4622      	mov	r2, r4
 8004170:	462b      	mov	r3, r5
 8004172:	f7fc f9a9 	bl	80004c8 <__aeabi_dmul>
 8004176:	a35a      	add	r3, pc, #360	; (adr r3, 80042e0 <__ieee754_pow+0xa00>)
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	f7fb ffee 	bl	800015c <__adddf3>
 8004180:	4622      	mov	r2, r4
 8004182:	462b      	mov	r3, r5
 8004184:	f7fc f9a0 	bl	80004c8 <__aeabi_dmul>
 8004188:	a357      	add	r3, pc, #348	; (adr r3, 80042e8 <__ieee754_pow+0xa08>)
 800418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418e:	f7fb ffe3 	bl	8000158 <__aeabi_dsub>
 8004192:	4622      	mov	r2, r4
 8004194:	462b      	mov	r3, r5
 8004196:	f7fc f997 	bl	80004c8 <__aeabi_dmul>
 800419a:	a355      	add	r3, pc, #340	; (adr r3, 80042f0 <__ieee754_pow+0xa10>)
 800419c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a0:	f7fb ffdc 	bl	800015c <__adddf3>
 80041a4:	4622      	mov	r2, r4
 80041a6:	462b      	mov	r3, r5
 80041a8:	f7fc f98e 	bl	80004c8 <__aeabi_dmul>
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4640      	mov	r0, r8
 80041b2:	4649      	mov	r1, r9
 80041b4:	f7fb ffd0 	bl	8000158 <__aeabi_dsub>
 80041b8:	4604      	mov	r4, r0
 80041ba:	460d      	mov	r5, r1
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4640      	mov	r0, r8
 80041c2:	4649      	mov	r1, r9
 80041c4:	f7fc f980 	bl	80004c8 <__aeabi_dmul>
 80041c8:	2200      	movs	r2, #0
 80041ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041d2:	4620      	mov	r0, r4
 80041d4:	4629      	mov	r1, r5
 80041d6:	f7fb ffbf 	bl	8000158 <__aeabi_dsub>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041e2:	f7fc fa9b 	bl	800071c <__aeabi_ddiv>
 80041e6:	4632      	mov	r2, r6
 80041e8:	4604      	mov	r4, r0
 80041ea:	460d      	mov	r5, r1
 80041ec:	463b      	mov	r3, r7
 80041ee:	4640      	mov	r0, r8
 80041f0:	4649      	mov	r1, r9
 80041f2:	f7fc f969 	bl	80004c8 <__aeabi_dmul>
 80041f6:	4632      	mov	r2, r6
 80041f8:	463b      	mov	r3, r7
 80041fa:	f7fb ffaf 	bl	800015c <__adddf3>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4620      	mov	r0, r4
 8004204:	4629      	mov	r1, r5
 8004206:	f7fb ffa7 	bl	8000158 <__aeabi_dsub>
 800420a:	4642      	mov	r2, r8
 800420c:	464b      	mov	r3, r9
 800420e:	f7fb ffa3 	bl	8000158 <__aeabi_dsub>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	2000      	movs	r0, #0
 8004218:	4939      	ldr	r1, [pc, #228]	; (8004300 <__ieee754_pow+0xa20>)
 800421a:	f7fb ff9d 	bl	8000158 <__aeabi_dsub>
 800421e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004222:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004226:	da29      	bge.n	800427c <__ieee754_pow+0x99c>
 8004228:	4652      	mov	r2, sl
 800422a:	f000 f955 	bl	80044d8 <scalbn>
 800422e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004232:	f7ff bbfe 	b.w	8003a32 <__ieee754_pow+0x152>
 8004236:	4b33      	ldr	r3, [pc, #204]	; (8004304 <__ieee754_pow+0xa24>)
 8004238:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800423c:	429f      	cmp	r7, r3
 800423e:	f77f af13 	ble.w	8004068 <__ieee754_pow+0x788>
 8004242:	4b31      	ldr	r3, [pc, #196]	; (8004308 <__ieee754_pow+0xa28>)
 8004244:	440b      	add	r3, r1
 8004246:	4303      	orrs	r3, r0
 8004248:	d009      	beq.n	800425e <__ieee754_pow+0x97e>
 800424a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800424e:	2200      	movs	r2, #0
 8004250:	2300      	movs	r3, #0
 8004252:	f7fc fbab 	bl	80009ac <__aeabi_dcmplt>
 8004256:	3800      	subs	r0, #0
 8004258:	bf18      	it	ne
 800425a:	2001      	movne	r0, #1
 800425c:	e453      	b.n	8003b06 <__ieee754_pow+0x226>
 800425e:	4622      	mov	r2, r4
 8004260:	462b      	mov	r3, r5
 8004262:	f7fb ff79 	bl	8000158 <__aeabi_dsub>
 8004266:	4642      	mov	r2, r8
 8004268:	464b      	mov	r3, r9
 800426a:	f7fc fbb3 	bl	80009d4 <__aeabi_dcmpge>
 800426e:	2800      	cmp	r0, #0
 8004270:	f43f aefa 	beq.w	8004068 <__ieee754_pow+0x788>
 8004274:	e7e9      	b.n	800424a <__ieee754_pow+0x96a>
 8004276:	f04f 0a00 	mov.w	sl, #0
 800427a:	e720      	b.n	80040be <__ieee754_pow+0x7de>
 800427c:	4621      	mov	r1, r4
 800427e:	e7d6      	b.n	800422e <__ieee754_pow+0x94e>
 8004280:	f04f 0b00 	mov.w	fp, #0
 8004284:	f8df c078 	ldr.w	ip, [pc, #120]	; 8004300 <__ieee754_pow+0xa20>
 8004288:	f7ff bbba 	b.w	8003a00 <__ieee754_pow+0x120>
 800428c:	f04f 0b00 	mov.w	fp, #0
 8004290:	f04f 0c00 	mov.w	ip, #0
 8004294:	f7ff bbb4 	b.w	8003a00 <__ieee754_pow+0x120>
 8004298:	4640      	mov	r0, r8
 800429a:	4649      	mov	r1, r9
 800429c:	f7ff bb3d 	b.w	800391a <__ieee754_pow+0x3a>
 80042a0:	9200      	str	r2, [sp, #0]
 80042a2:	f7ff bb89 	b.w	80039b8 <__ieee754_pow+0xd8>
 80042a6:	2300      	movs	r3, #0
 80042a8:	f7ff bb73 	b.w	8003992 <__ieee754_pow+0xb2>
 80042ac:	f3af 8000 	nop.w
 80042b0:	652b82fe 	.word	0x652b82fe
 80042b4:	3c971547 	.word	0x3c971547
 80042b8:	00000000 	.word	0x00000000
 80042bc:	3fe62e43 	.word	0x3fe62e43
 80042c0:	fefa39ef 	.word	0xfefa39ef
 80042c4:	3fe62e42 	.word	0x3fe62e42
 80042c8:	0ca86c39 	.word	0x0ca86c39
 80042cc:	be205c61 	.word	0xbe205c61
 80042d0:	72bea4d0 	.word	0x72bea4d0
 80042d4:	3e663769 	.word	0x3e663769
 80042d8:	c5d26bf1 	.word	0xc5d26bf1
 80042dc:	3ebbbd41 	.word	0x3ebbbd41
 80042e0:	af25de2c 	.word	0xaf25de2c
 80042e4:	3f11566a 	.word	0x3f11566a
 80042e8:	16bebd93 	.word	0x16bebd93
 80042ec:	3f66c16c 	.word	0x3f66c16c
 80042f0:	5555553e 	.word	0x5555553e
 80042f4:	3fc55555 	.word	0x3fc55555
 80042f8:	3fe00000 	.word	0x3fe00000
 80042fc:	000fffff 	.word	0x000fffff
 8004300:	3ff00000 	.word	0x3ff00000
 8004304:	4090cbff 	.word	0x4090cbff
 8004308:	3f6f3400 	.word	0x3f6f3400

0800430c <__ieee754_sqrt>:
 800430c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8004468 <__ieee754_sqrt+0x15c>
 8004310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004314:	ea3c 0c01 	bics.w	ip, ip, r1
 8004318:	4606      	mov	r6, r0
 800431a:	460d      	mov	r5, r1
 800431c:	460c      	mov	r4, r1
 800431e:	460a      	mov	r2, r1
 8004320:	4607      	mov	r7, r0
 8004322:	4603      	mov	r3, r0
 8004324:	d10f      	bne.n	8004346 <__ieee754_sqrt+0x3a>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	f7fc f8cd 	bl	80004c8 <__aeabi_dmul>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4630      	mov	r0, r6
 8004334:	4629      	mov	r1, r5
 8004336:	f7fb ff11 	bl	800015c <__adddf3>
 800433a:	4606      	mov	r6, r0
 800433c:	460d      	mov	r5, r1
 800433e:	4630      	mov	r0, r6
 8004340:	4629      	mov	r1, r5
 8004342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004346:	2900      	cmp	r1, #0
 8004348:	dc0e      	bgt.n	8004368 <__ieee754_sqrt+0x5c>
 800434a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800434e:	ea5c 0707 	orrs.w	r7, ip, r7
 8004352:	d0f4      	beq.n	800433e <__ieee754_sqrt+0x32>
 8004354:	b141      	cbz	r1, 8004368 <__ieee754_sqrt+0x5c>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	f7fb fefd 	bl	8000158 <__aeabi_dsub>
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	f7fc f9db 	bl	800071c <__aeabi_ddiv>
 8004366:	e7e8      	b.n	800433a <__ieee754_sqrt+0x2e>
 8004368:	1521      	asrs	r1, r4, #20
 800436a:	d075      	beq.n	8004458 <__ieee754_sqrt+0x14c>
 800436c:	07cc      	lsls	r4, r1, #31
 800436e:	f04f 0400 	mov.w	r4, #0
 8004372:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004376:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800437a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800437e:	bf5e      	ittt	pl
 8004380:	0fd9      	lsrpl	r1, r3, #31
 8004382:	005b      	lslpl	r3, r3, #1
 8004384:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8004388:	0fd9      	lsrs	r1, r3, #31
 800438a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800438e:	2516      	movs	r5, #22
 8004390:	4620      	mov	r0, r4
 8004392:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004396:	107f      	asrs	r7, r7, #1
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	1846      	adds	r6, r0, r1
 800439c:	4296      	cmp	r6, r2
 800439e:	bfde      	ittt	le
 80043a0:	1b92      	suble	r2, r2, r6
 80043a2:	1870      	addle	r0, r6, r1
 80043a4:	1864      	addle	r4, r4, r1
 80043a6:	0052      	lsls	r2, r2, #1
 80043a8:	3d01      	subs	r5, #1
 80043aa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80043ae:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80043b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80043b6:	d1f0      	bne.n	800439a <__ieee754_sqrt+0x8e>
 80043b8:	4629      	mov	r1, r5
 80043ba:	f04f 0e20 	mov.w	lr, #32
 80043be:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80043c2:	4282      	cmp	r2, r0
 80043c4:	eb06 0c05 	add.w	ip, r6, r5
 80043c8:	dc02      	bgt.n	80043d0 <__ieee754_sqrt+0xc4>
 80043ca:	d113      	bne.n	80043f4 <__ieee754_sqrt+0xe8>
 80043cc:	459c      	cmp	ip, r3
 80043ce:	d811      	bhi.n	80043f4 <__ieee754_sqrt+0xe8>
 80043d0:	f1bc 0f00 	cmp.w	ip, #0
 80043d4:	eb0c 0506 	add.w	r5, ip, r6
 80043d8:	da43      	bge.n	8004462 <__ieee754_sqrt+0x156>
 80043da:	2d00      	cmp	r5, #0
 80043dc:	db41      	blt.n	8004462 <__ieee754_sqrt+0x156>
 80043de:	f100 0801 	add.w	r8, r0, #1
 80043e2:	1a12      	subs	r2, r2, r0
 80043e4:	4640      	mov	r0, r8
 80043e6:	459c      	cmp	ip, r3
 80043e8:	bf88      	it	hi
 80043ea:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80043ee:	eba3 030c 	sub.w	r3, r3, ip
 80043f2:	4431      	add	r1, r6
 80043f4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80043f8:	f1be 0e01 	subs.w	lr, lr, #1
 80043fc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8004400:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004404:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004408:	d1db      	bne.n	80043c2 <__ieee754_sqrt+0xb6>
 800440a:	4313      	orrs	r3, r2
 800440c:	d006      	beq.n	800441c <__ieee754_sqrt+0x110>
 800440e:	1c48      	adds	r0, r1, #1
 8004410:	bf0b      	itete	eq
 8004412:	4671      	moveq	r1, lr
 8004414:	3101      	addne	r1, #1
 8004416:	3401      	addeq	r4, #1
 8004418:	f021 0101 	bicne.w	r1, r1, #1
 800441c:	1063      	asrs	r3, r4, #1
 800441e:	0849      	lsrs	r1, r1, #1
 8004420:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004424:	07e2      	lsls	r2, r4, #31
 8004426:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800442a:	bf48      	it	mi
 800442c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8004430:	460e      	mov	r6, r1
 8004432:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004436:	e782      	b.n	800433e <__ieee754_sqrt+0x32>
 8004438:	0ada      	lsrs	r2, r3, #11
 800443a:	3815      	subs	r0, #21
 800443c:	055b      	lsls	r3, r3, #21
 800443e:	2a00      	cmp	r2, #0
 8004440:	d0fa      	beq.n	8004438 <__ieee754_sqrt+0x12c>
 8004442:	02d5      	lsls	r5, r2, #11
 8004444:	d50a      	bpl.n	800445c <__ieee754_sqrt+0x150>
 8004446:	f1c1 0420 	rsb	r4, r1, #32
 800444a:	fa23 f404 	lsr.w	r4, r3, r4
 800444e:	1e4d      	subs	r5, r1, #1
 8004450:	408b      	lsls	r3, r1
 8004452:	4322      	orrs	r2, r4
 8004454:	1b41      	subs	r1, r0, r5
 8004456:	e789      	b.n	800436c <__ieee754_sqrt+0x60>
 8004458:	4608      	mov	r0, r1
 800445a:	e7f0      	b.n	800443e <__ieee754_sqrt+0x132>
 800445c:	0052      	lsls	r2, r2, #1
 800445e:	3101      	adds	r1, #1
 8004460:	e7ef      	b.n	8004442 <__ieee754_sqrt+0x136>
 8004462:	4680      	mov	r8, r0
 8004464:	e7bd      	b.n	80043e2 <__ieee754_sqrt+0xd6>
 8004466:	bf00      	nop
 8004468:	7ff00000 	.word	0x7ff00000

0800446c <with_errno>:
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	4604      	mov	r4, r0
 8004470:	460d      	mov	r5, r1
 8004472:	4616      	mov	r6, r2
 8004474:	f7ff f93e 	bl	80036f4 <__errno>
 8004478:	4629      	mov	r1, r5
 800447a:	6006      	str	r6, [r0, #0]
 800447c:	4620      	mov	r0, r4
 800447e:	bd70      	pop	{r4, r5, r6, pc}

08004480 <xflow>:
 8004480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004482:	4615      	mov	r5, r2
 8004484:	461c      	mov	r4, r3
 8004486:	b180      	cbz	r0, 80044aa <xflow+0x2a>
 8004488:	4610      	mov	r0, r2
 800448a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800448e:	e9cd 0100 	strd	r0, r1, [sp]
 8004492:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004496:	4628      	mov	r0, r5
 8004498:	4621      	mov	r1, r4
 800449a:	f7fc f815 	bl	80004c8 <__aeabi_dmul>
 800449e:	2222      	movs	r2, #34	; 0x22
 80044a0:	b003      	add	sp, #12
 80044a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044a6:	f7ff bfe1 	b.w	800446c <with_errno>
 80044aa:	4610      	mov	r0, r2
 80044ac:	4619      	mov	r1, r3
 80044ae:	e7ee      	b.n	800448e <xflow+0xe>

080044b0 <__math_uflow>:
 80044b0:	2200      	movs	r2, #0
 80044b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80044b6:	f7ff bfe3 	b.w	8004480 <xflow>

080044ba <__math_oflow>:
 80044ba:	2200      	movs	r2, #0
 80044bc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80044c0:	f7ff bfde 	b.w	8004480 <xflow>

080044c4 <fabs>:
 80044c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80044c8:	4770      	bx	lr

080044ca <finite>:
 80044ca:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80044ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80044d2:	0fc0      	lsrs	r0, r0, #31
 80044d4:	4770      	bx	lr
	...

080044d8 <scalbn>:
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80044de:	4604      	mov	r4, r0
 80044e0:	460d      	mov	r5, r1
 80044e2:	4617      	mov	r7, r2
 80044e4:	460b      	mov	r3, r1
 80044e6:	b996      	cbnz	r6, 800450e <scalbn+0x36>
 80044e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80044ec:	4303      	orrs	r3, r0
 80044ee:	d039      	beq.n	8004564 <scalbn+0x8c>
 80044f0:	4b33      	ldr	r3, [pc, #204]	; (80045c0 <scalbn+0xe8>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	f7fb ffe8 	bl	80004c8 <__aeabi_dmul>
 80044f8:	4b32      	ldr	r3, [pc, #200]	; (80045c4 <scalbn+0xec>)
 80044fa:	4604      	mov	r4, r0
 80044fc:	429f      	cmp	r7, r3
 80044fe:	460d      	mov	r5, r1
 8004500:	da0f      	bge.n	8004522 <scalbn+0x4a>
 8004502:	a32b      	add	r3, pc, #172	; (adr r3, 80045b0 <scalbn+0xd8>)
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	f7fb ffde 	bl	80004c8 <__aeabi_dmul>
 800450c:	e006      	b.n	800451c <scalbn+0x44>
 800450e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004512:	4296      	cmp	r6, r2
 8004514:	d10a      	bne.n	800452c <scalbn+0x54>
 8004516:	4602      	mov	r2, r0
 8004518:	f7fb fe20 	bl	800015c <__adddf3>
 800451c:	4604      	mov	r4, r0
 800451e:	460d      	mov	r5, r1
 8004520:	e020      	b.n	8004564 <scalbn+0x8c>
 8004522:	460b      	mov	r3, r1
 8004524:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004528:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800452c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004530:	19b9      	adds	r1, r7, r6
 8004532:	4291      	cmp	r1, r2
 8004534:	dd0e      	ble.n	8004554 <scalbn+0x7c>
 8004536:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800453a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800453e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8004542:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8004546:	4820      	ldr	r0, [pc, #128]	; (80045c8 <scalbn+0xf0>)
 8004548:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800454c:	a31a      	add	r3, pc, #104	; (adr r3, 80045b8 <scalbn+0xe0>)
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	e7d9      	b.n	8004508 <scalbn+0x30>
 8004554:	2900      	cmp	r1, #0
 8004556:	dd08      	ble.n	800456a <scalbn+0x92>
 8004558:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800455c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004560:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004564:	4620      	mov	r0, r4
 8004566:	4629      	mov	r1, r5
 8004568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800456a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800456e:	da12      	bge.n	8004596 <scalbn+0xbe>
 8004570:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004574:	429f      	cmp	r7, r3
 8004576:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800457a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800457e:	dcdc      	bgt.n	800453a <scalbn+0x62>
 8004580:	a30b      	add	r3, pc, #44	; (adr r3, 80045b0 <scalbn+0xd8>)
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800458a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800458e:	480f      	ldr	r0, [pc, #60]	; (80045cc <scalbn+0xf4>)
 8004590:	f041 011f 	orr.w	r1, r1, #31
 8004594:	e7b8      	b.n	8004508 <scalbn+0x30>
 8004596:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800459a:	3136      	adds	r1, #54	; 0x36
 800459c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80045a0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80045a4:	4620      	mov	r0, r4
 80045a6:	4629      	mov	r1, r5
 80045a8:	2200      	movs	r2, #0
 80045aa:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <scalbn+0xf8>)
 80045ac:	e7ac      	b.n	8004508 <scalbn+0x30>
 80045ae:	bf00      	nop
 80045b0:	c2f8f359 	.word	0xc2f8f359
 80045b4:	01a56e1f 	.word	0x01a56e1f
 80045b8:	8800759c 	.word	0x8800759c
 80045bc:	7e37e43c 	.word	0x7e37e43c
 80045c0:	43500000 	.word	0x43500000
 80045c4:	ffff3cb0 	.word	0xffff3cb0
 80045c8:	8800759c 	.word	0x8800759c
 80045cc:	c2f8f359 	.word	0xc2f8f359
 80045d0:	3c900000 	.word	0x3c900000

080045d4 <_init>:
 80045d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d6:	bf00      	nop
 80045d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045da:	bc08      	pop	{r3}
 80045dc:	469e      	mov	lr, r3
 80045de:	4770      	bx	lr

080045e0 <_fini>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	bf00      	nop
 80045e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e6:	bc08      	pop	{r3}
 80045e8:	469e      	mov	lr, r3
 80045ea:	4770      	bx	lr
